/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/ResellerPortalRoleDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ResellerPortalRoleDto::ResellerPortalRoleDto()
{
    m_ResellerId = utility::conversions::to_string_t("");
    m_ResellerIdIsSet = false;
    m_ResellerName = utility::conversions::to_string_t("");
    m_ResellerNameIsSet = false;
    m_ResellerPortalRoleId = utility::conversions::to_string_t("");
    m_ResellerPortalRoleIdIsSet = false;
}

ResellerPortalRoleDto::~ResellerPortalRoleDto()
{
}

void ResellerPortalRoleDto::validate()
{
    // TODO: implement validation
}

web::json::value ResellerPortalRoleDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ResellerIdIsSet)
    {
        val[utility::conversions::to_string_t(U("resellerId"))] = ModelBase::toJson(m_ResellerId);
    }
    if(m_ResellerNameIsSet)
    {
        val[utility::conversions::to_string_t(U("resellerName"))] = ModelBase::toJson(m_ResellerName);
    }
    if(m_ResellerPortalRoleIdIsSet)
    {
        val[utility::conversions::to_string_t(U("resellerPortalRoleId"))] = ModelBase::toJson(m_ResellerPortalRoleId);
    }

    return val;
}

bool ResellerPortalRoleDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("resellerId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("resellerId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setResellerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResellerId);
            setResellerId(refVal_setResellerId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("resellerName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("resellerName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setResellerName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResellerName);
            setResellerName(refVal_setResellerName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("resellerPortalRoleId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("resellerPortalRoleId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setResellerPortalRoleId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResellerPortalRoleId);
            setResellerPortalRoleId(refVal_setResellerPortalRoleId);
        }
    }
    return ok;
}

void ResellerPortalRoleDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ResellerIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("resellerId")), m_ResellerId));
    }
    if(m_ResellerNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("resellerName")), m_ResellerName));
    }
    if(m_ResellerPortalRoleIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("resellerPortalRoleId")), m_ResellerPortalRoleId));
    }
}

bool ResellerPortalRoleDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("resellerId"))))
    {
        utility::string_t refVal_setResellerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("resellerId"))), refVal_setResellerId );
        setResellerId(refVal_setResellerId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("resellerName"))))
    {
        utility::string_t refVal_setResellerName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("resellerName"))), refVal_setResellerName );
        setResellerName(refVal_setResellerName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("resellerPortalRoleId"))))
    {
        utility::string_t refVal_setResellerPortalRoleId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("resellerPortalRoleId"))), refVal_setResellerPortalRoleId );
        setResellerPortalRoleId(refVal_setResellerPortalRoleId);
    }
    return ok;
}

utility::string_t ResellerPortalRoleDto::getResellerId() const
{
    return m_ResellerId;
}

void ResellerPortalRoleDto::setResellerId(const utility::string_t& value)
{
    m_ResellerId = value;
    m_ResellerIdIsSet = true;
}

bool ResellerPortalRoleDto::resellerIdIsSet() const
{
    return m_ResellerIdIsSet;
}

void ResellerPortalRoleDto::unsetResellerId()
{
    m_ResellerIdIsSet = false;
}
utility::string_t ResellerPortalRoleDto::getResellerName() const
{
    return m_ResellerName;
}

void ResellerPortalRoleDto::setResellerName(const utility::string_t& value)
{
    m_ResellerName = value;
    m_ResellerNameIsSet = true;
}

bool ResellerPortalRoleDto::resellerNameIsSet() const
{
    return m_ResellerNameIsSet;
}

void ResellerPortalRoleDto::unsetResellerName()
{
    m_ResellerNameIsSet = false;
}
utility::string_t ResellerPortalRoleDto::getResellerPortalRoleId() const
{
    return m_ResellerPortalRoleId;
}

void ResellerPortalRoleDto::setResellerPortalRoleId(const utility::string_t& value)
{
    m_ResellerPortalRoleId = value;
    m_ResellerPortalRoleIdIsSet = true;
}

bool ResellerPortalRoleDto::resellerPortalRoleIdIsSet() const
{
    return m_ResellerPortalRoleIdIsSet;
}

void ResellerPortalRoleDto::unsetResellerPortalRoleId()
{
    m_ResellerPortalRoleIdIsSet = false;
}
}
}
}
}


