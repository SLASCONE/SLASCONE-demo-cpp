/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/LicenseLimitationDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



LicenseLimitationDto::LicenseLimitationDto()
{
    m_Product_id = utility::conversions::to_string_t("");
    m_Product_idIsSet = false;
    m_Limitation_id = utility::conversions::to_string_t("");
    m_Limitation_idIsSet = false;
    m_Limitation_name = utility::conversions::to_string_t("");
    m_Limitation_nameIsSet = false;
    m_Limitation_description = utility::conversions::to_string_t("");
    m_Limitation_descriptionIsSet = false;
    m_Limit = 0;
    m_LimitIsSet = false;
    m_Consumption_reset_modeIsSet = false;
    m_Consumption_reset_period_days = 0;
    m_Consumption_reset_period_daysIsSet = false;
    m_Current_user_transaction_id = utility::conversions::to_string_t("");
    m_Current_user_transaction_idIsSet = false;
}

LicenseLimitationDto::~LicenseLimitationDto()
{
}

void LicenseLimitationDto::validate()
{
    // TODO: implement validation
}

web::json::value LicenseLimitationDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Product_idIsSet)
    {
        val[utility::conversions::to_string_t(U("product_id"))] = ModelBase::toJson(m_Product_id);
    }
    if(m_Limitation_idIsSet)
    {
        val[utility::conversions::to_string_t(U("limitation_id"))] = ModelBase::toJson(m_Limitation_id);
    }
    if(m_Limitation_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("limitation_name"))] = ModelBase::toJson(m_Limitation_name);
    }
    if(m_Limitation_descriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("limitation_description"))] = ModelBase::toJson(m_Limitation_description);
    }
    if(m_LimitIsSet)
    {
        val[utility::conversions::to_string_t(U("limit"))] = ModelBase::toJson(m_Limit);
    }
    if(m_Consumption_reset_modeIsSet)
    {
        val[utility::conversions::to_string_t(U("consumption_reset_mode"))] = ModelBase::toJson(m_Consumption_reset_mode);
    }
    if(m_Consumption_reset_period_daysIsSet)
    {
        val[utility::conversions::to_string_t(U("consumption_reset_period_days"))] = ModelBase::toJson(m_Consumption_reset_period_days);
    }
    if(m_Current_user_transaction_idIsSet)
    {
        val[utility::conversions::to_string_t(U("current_user_transaction_id"))] = ModelBase::toJson(m_Current_user_transaction_id);
    }

    return val;
}

bool LicenseLimitationDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("product_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("product_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProductId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProductId);
            setProductId(refVal_setProductId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("limitation_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("limitation_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLimitationId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLimitationId);
            setLimitationId(refVal_setLimitationId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("limitation_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("limitation_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLimitationName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLimitationName);
            setLimitationName(refVal_setLimitationName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("limitation_description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("limitation_description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLimitationDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLimitationDescription);
            setLimitationDescription(refVal_setLimitationDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("limit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("limit")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLimit);
            setLimit(refVal_setLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("consumption_reset_mode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("consumption_reset_mode")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ConsumptionResetPeriod> refVal_setConsumptionResetMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConsumptionResetMode);
            setConsumptionResetMode(refVal_setConsumptionResetMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("consumption_reset_period_days"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("consumption_reset_period_days")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setConsumptionResetPeriodDays;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConsumptionResetPeriodDays);
            setConsumptionResetPeriodDays(refVal_setConsumptionResetPeriodDays);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("current_user_transaction_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("current_user_transaction_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCurrentUserTransactionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCurrentUserTransactionId);
            setCurrentUserTransactionId(refVal_setCurrentUserTransactionId);
        }
    }
    return ok;
}

void LicenseLimitationDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Product_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("product_id")), m_Product_id));
    }
    if(m_Limitation_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("limitation_id")), m_Limitation_id));
    }
    if(m_Limitation_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("limitation_name")), m_Limitation_name));
    }
    if(m_Limitation_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("limitation_description")), m_Limitation_description));
    }
    if(m_LimitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("limit")), m_Limit));
    }
    if(m_Consumption_reset_modeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("consumption_reset_mode")), m_Consumption_reset_mode));
    }
    if(m_Consumption_reset_period_daysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("consumption_reset_period_days")), m_Consumption_reset_period_days));
    }
    if(m_Current_user_transaction_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("current_user_transaction_id")), m_Current_user_transaction_id));
    }
}

bool LicenseLimitationDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("product_id"))))
    {
        utility::string_t refVal_setProductId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("product_id"))), refVal_setProductId );
        setProductId(refVal_setProductId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("limitation_id"))))
    {
        utility::string_t refVal_setLimitationId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("limitation_id"))), refVal_setLimitationId );
        setLimitationId(refVal_setLimitationId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("limitation_name"))))
    {
        utility::string_t refVal_setLimitationName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("limitation_name"))), refVal_setLimitationName );
        setLimitationName(refVal_setLimitationName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("limitation_description"))))
    {
        utility::string_t refVal_setLimitationDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("limitation_description"))), refVal_setLimitationDescription );
        setLimitationDescription(refVal_setLimitationDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("limit"))))
    {
        int32_t refVal_setLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("limit"))), refVal_setLimit );
        setLimit(refVal_setLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("consumption_reset_mode"))))
    {
        std::shared_ptr<ConsumptionResetPeriod> refVal_setConsumptionResetMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("consumption_reset_mode"))), refVal_setConsumptionResetMode );
        setConsumptionResetMode(refVal_setConsumptionResetMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("consumption_reset_period_days"))))
    {
        int32_t refVal_setConsumptionResetPeriodDays;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("consumption_reset_period_days"))), refVal_setConsumptionResetPeriodDays );
        setConsumptionResetPeriodDays(refVal_setConsumptionResetPeriodDays);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("current_user_transaction_id"))))
    {
        utility::string_t refVal_setCurrentUserTransactionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("current_user_transaction_id"))), refVal_setCurrentUserTransactionId );
        setCurrentUserTransactionId(refVal_setCurrentUserTransactionId);
    }
    return ok;
}

utility::string_t LicenseLimitationDto::getProductId() const
{
    return m_Product_id;
}

void LicenseLimitationDto::setProductId(const utility::string_t& value)
{
    m_Product_id = value;
    m_Product_idIsSet = true;
}

bool LicenseLimitationDto::productIdIsSet() const
{
    return m_Product_idIsSet;
}

void LicenseLimitationDto::unsetProduct_id()
{
    m_Product_idIsSet = false;
}
utility::string_t LicenseLimitationDto::getLimitationId() const
{
    return m_Limitation_id;
}

void LicenseLimitationDto::setLimitationId(const utility::string_t& value)
{
    m_Limitation_id = value;
    m_Limitation_idIsSet = true;
}

bool LicenseLimitationDto::limitationIdIsSet() const
{
    return m_Limitation_idIsSet;
}

void LicenseLimitationDto::unsetLimitation_id()
{
    m_Limitation_idIsSet = false;
}
utility::string_t LicenseLimitationDto::getLimitationName() const
{
    return m_Limitation_name;
}

void LicenseLimitationDto::setLimitationName(const utility::string_t& value)
{
    m_Limitation_name = value;
    m_Limitation_nameIsSet = true;
}

bool LicenseLimitationDto::limitationNameIsSet() const
{
    return m_Limitation_nameIsSet;
}

void LicenseLimitationDto::unsetLimitation_name()
{
    m_Limitation_nameIsSet = false;
}
utility::string_t LicenseLimitationDto::getLimitationDescription() const
{
    return m_Limitation_description;
}

void LicenseLimitationDto::setLimitationDescription(const utility::string_t& value)
{
    m_Limitation_description = value;
    m_Limitation_descriptionIsSet = true;
}

bool LicenseLimitationDto::limitationDescriptionIsSet() const
{
    return m_Limitation_descriptionIsSet;
}

void LicenseLimitationDto::unsetLimitation_description()
{
    m_Limitation_descriptionIsSet = false;
}
int32_t LicenseLimitationDto::getLimit() const
{
    return m_Limit;
}

void LicenseLimitationDto::setLimit(int32_t value)
{
    m_Limit = value;
    m_LimitIsSet = true;
}

bool LicenseLimitationDto::limitIsSet() const
{
    return m_LimitIsSet;
}

void LicenseLimitationDto::unsetLimit()
{
    m_LimitIsSet = false;
}
std::shared_ptr<ConsumptionResetPeriod> LicenseLimitationDto::getConsumptionResetMode() const
{
    return m_Consumption_reset_mode;
}

void LicenseLimitationDto::setConsumptionResetMode(const std::shared_ptr<ConsumptionResetPeriod>& value)
{
    m_Consumption_reset_mode = value;
    m_Consumption_reset_modeIsSet = true;
}

bool LicenseLimitationDto::consumptionResetModeIsSet() const
{
    return m_Consumption_reset_modeIsSet;
}

void LicenseLimitationDto::unsetConsumption_reset_mode()
{
    m_Consumption_reset_modeIsSet = false;
}
int32_t LicenseLimitationDto::getConsumptionResetPeriodDays() const
{
    return m_Consumption_reset_period_days;
}

void LicenseLimitationDto::setConsumptionResetPeriodDays(int32_t value)
{
    m_Consumption_reset_period_days = value;
    m_Consumption_reset_period_daysIsSet = true;
}

bool LicenseLimitationDto::consumptionResetPeriodDaysIsSet() const
{
    return m_Consumption_reset_period_daysIsSet;
}

void LicenseLimitationDto::unsetConsumption_reset_period_days()
{
    m_Consumption_reset_period_daysIsSet = false;
}
utility::string_t LicenseLimitationDto::getCurrentUserTransactionId() const
{
    return m_Current_user_transaction_id;
}

void LicenseLimitationDto::setCurrentUserTransactionId(const utility::string_t& value)
{
    m_Current_user_transaction_id = value;
    m_Current_user_transaction_idIsSet = true;
}

bool LicenseLimitationDto::currentUserTransactionIdIsSet() const
{
    return m_Current_user_transaction_idIsSet;
}

void LicenseLimitationDto::unsetCurrent_user_transaction_id()
{
    m_Current_user_transaction_idIsSet = false;
}
}
}
}
}


