/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/SessionDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



SessionDto::SessionDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Session_id = utility::conversions::to_string_t("");
    m_Session_idIsSet = false;
    m_Session_valid_until = utility::datetime();
    m_Session_valid_untilIsSet = false;
    m_Created_date_utc = utility::datetime();
    m_Created_date_utcIsSet = false;
    m_Modified_date_utc = utility::datetime();
    m_Modified_date_utcIsSet = false;
    m_License_id = utility::conversions::to_string_t("");
    m_License_idIsSet = false;
    m_Assignment_id = utility::conversions::to_string_t("");
    m_Assignment_idIsSet = false;
    m_AssignmentIsSet = false;
    m_User_id = utility::conversions::to_string_t("");
    m_User_idIsSet = false;
    m_Max_open_session_count = 0;
    m_Max_open_session_countIsSet = false;
    m_Max_active_client_count = 0;
    m_Max_active_client_countIsSet = false;
}

SessionDto::~SessionDto()
{
}

void SessionDto::validate()
{
    // TODO: implement validation
}

web::json::value SessionDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_Session_idIsSet)
    {
        val[utility::conversions::to_string_t(U("session_id"))] = ModelBase::toJson(m_Session_id);
    }
    if(m_Session_valid_untilIsSet)
    {
        val[utility::conversions::to_string_t(U("session_valid_until"))] = ModelBase::toJson(m_Session_valid_until);
    }
    if(m_Created_date_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("created_date_utc"))] = ModelBase::toJson(m_Created_date_utc);
    }
    if(m_Modified_date_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("modified_date_utc"))] = ModelBase::toJson(m_Modified_date_utc);
    }
    if(m_License_idIsSet)
    {
        val[utility::conversions::to_string_t(U("license_id"))] = ModelBase::toJson(m_License_id);
    }
    if(m_Assignment_idIsSet)
    {
        val[utility::conversions::to_string_t(U("assignment_id"))] = ModelBase::toJson(m_Assignment_id);
    }
    if(m_AssignmentIsSet)
    {
        val[utility::conversions::to_string_t(U("assignment"))] = ModelBase::toJson(m_Assignment);
    }
    if(m_User_idIsSet)
    {
        val[utility::conversions::to_string_t(U("user_id"))] = ModelBase::toJson(m_User_id);
    }
    if(m_Max_open_session_countIsSet)
    {
        val[utility::conversions::to_string_t(U("max_open_session_count"))] = ModelBase::toJson(m_Max_open_session_count);
    }
    if(m_Max_active_client_countIsSet)
    {
        val[utility::conversions::to_string_t(U("max_active_client_count"))] = ModelBase::toJson(m_Max_active_client_count);
    }

    return val;
}

bool SessionDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("session_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("session_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSessionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSessionId);
            setSessionId(refVal_setSessionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("session_valid_until"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("session_valid_until")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setSessionValidUntil;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSessionValidUntil);
            setSessionValidUntil(refVal_setSessionValidUntil);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_date_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_date_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedDateUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedDateUtc);
            setCreatedDateUtc(refVal_setCreatedDateUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("modified_date_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("modified_date_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setModifiedDateUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModifiedDateUtc);
            setModifiedDateUtc(refVal_setModifiedDateUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("license_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("license_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLicenseId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenseId);
            setLicenseId(refVal_setLicenseId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("assignment_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("assignment_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssignmentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssignmentId);
            setAssignmentId(refVal_setAssignmentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("assignment"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("assignment")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DeviceLicenseAssignmentDto> refVal_setAssignment;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssignment);
            setAssignment(refVal_setAssignment);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("user_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("user_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserId);
            setUserId(refVal_setUserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("max_open_session_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("max_open_session_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMaxOpenSessionCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaxOpenSessionCount);
            setMaxOpenSessionCount(refVal_setMaxOpenSessionCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("max_active_client_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("max_active_client_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMaxActiveClientCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaxActiveClientCount);
            setMaxActiveClientCount(refVal_setMaxActiveClientCount);
        }
    }
    return ok;
}

void SessionDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_Session_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("session_id")), m_Session_id));
    }
    if(m_Session_valid_untilIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("session_valid_until")), m_Session_valid_until));
    }
    if(m_Created_date_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_date_utc")), m_Created_date_utc));
    }
    if(m_Modified_date_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("modified_date_utc")), m_Modified_date_utc));
    }
    if(m_License_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("license_id")), m_License_id));
    }
    if(m_Assignment_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("assignment_id")), m_Assignment_id));
    }
    if(m_AssignmentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("assignment")), m_Assignment));
    }
    if(m_User_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("user_id")), m_User_id));
    }
    if(m_Max_open_session_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("max_open_session_count")), m_Max_open_session_count));
    }
    if(m_Max_active_client_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("max_active_client_count")), m_Max_active_client_count));
    }
}

bool SessionDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("session_id"))))
    {
        utility::string_t refVal_setSessionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("session_id"))), refVal_setSessionId );
        setSessionId(refVal_setSessionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("session_valid_until"))))
    {
        utility::datetime refVal_setSessionValidUntil;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("session_valid_until"))), refVal_setSessionValidUntil );
        setSessionValidUntil(refVal_setSessionValidUntil);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_date_utc"))))
    {
        utility::datetime refVal_setCreatedDateUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_date_utc"))), refVal_setCreatedDateUtc );
        setCreatedDateUtc(refVal_setCreatedDateUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("modified_date_utc"))))
    {
        utility::datetime refVal_setModifiedDateUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("modified_date_utc"))), refVal_setModifiedDateUtc );
        setModifiedDateUtc(refVal_setModifiedDateUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("license_id"))))
    {
        utility::string_t refVal_setLicenseId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("license_id"))), refVal_setLicenseId );
        setLicenseId(refVal_setLicenseId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("assignment_id"))))
    {
        utility::string_t refVal_setAssignmentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("assignment_id"))), refVal_setAssignmentId );
        setAssignmentId(refVal_setAssignmentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("assignment"))))
    {
        std::shared_ptr<DeviceLicenseAssignmentDto> refVal_setAssignment;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("assignment"))), refVal_setAssignment );
        setAssignment(refVal_setAssignment);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("user_id"))))
    {
        utility::string_t refVal_setUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("user_id"))), refVal_setUserId );
        setUserId(refVal_setUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("max_open_session_count"))))
    {
        int32_t refVal_setMaxOpenSessionCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("max_open_session_count"))), refVal_setMaxOpenSessionCount );
        setMaxOpenSessionCount(refVal_setMaxOpenSessionCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("max_active_client_count"))))
    {
        int32_t refVal_setMaxActiveClientCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("max_active_client_count"))), refVal_setMaxActiveClientCount );
        setMaxActiveClientCount(refVal_setMaxActiveClientCount);
    }
    return ok;
}

utility::string_t SessionDto::getId() const
{
    return m_Id;
}

void SessionDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool SessionDto::idIsSet() const
{
    return m_IdIsSet;
}

void SessionDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t SessionDto::getSessionId() const
{
    return m_Session_id;
}

void SessionDto::setSessionId(const utility::string_t& value)
{
    m_Session_id = value;
    m_Session_idIsSet = true;
}

bool SessionDto::sessionIdIsSet() const
{
    return m_Session_idIsSet;
}

void SessionDto::unsetSession_id()
{
    m_Session_idIsSet = false;
}
utility::datetime SessionDto::getSessionValidUntil() const
{
    return m_Session_valid_until;
}

void SessionDto::setSessionValidUntil(const utility::datetime& value)
{
    m_Session_valid_until = value;
    m_Session_valid_untilIsSet = true;
}

bool SessionDto::sessionValidUntilIsSet() const
{
    return m_Session_valid_untilIsSet;
}

void SessionDto::unsetSession_valid_until()
{
    m_Session_valid_untilIsSet = false;
}
utility::datetime SessionDto::getCreatedDateUtc() const
{
    return m_Created_date_utc;
}

void SessionDto::setCreatedDateUtc(const utility::datetime& value)
{
    m_Created_date_utc = value;
    m_Created_date_utcIsSet = true;
}

bool SessionDto::createdDateUtcIsSet() const
{
    return m_Created_date_utcIsSet;
}

void SessionDto::unsetCreated_date_utc()
{
    m_Created_date_utcIsSet = false;
}
utility::datetime SessionDto::getModifiedDateUtc() const
{
    return m_Modified_date_utc;
}

void SessionDto::setModifiedDateUtc(const utility::datetime& value)
{
    m_Modified_date_utc = value;
    m_Modified_date_utcIsSet = true;
}

bool SessionDto::modifiedDateUtcIsSet() const
{
    return m_Modified_date_utcIsSet;
}

void SessionDto::unsetModified_date_utc()
{
    m_Modified_date_utcIsSet = false;
}
utility::string_t SessionDto::getLicenseId() const
{
    return m_License_id;
}

void SessionDto::setLicenseId(const utility::string_t& value)
{
    m_License_id = value;
    m_License_idIsSet = true;
}

bool SessionDto::licenseIdIsSet() const
{
    return m_License_idIsSet;
}

void SessionDto::unsetLicense_id()
{
    m_License_idIsSet = false;
}
utility::string_t SessionDto::getAssignmentId() const
{
    return m_Assignment_id;
}

void SessionDto::setAssignmentId(const utility::string_t& value)
{
    m_Assignment_id = value;
    m_Assignment_idIsSet = true;
}

bool SessionDto::assignmentIdIsSet() const
{
    return m_Assignment_idIsSet;
}

void SessionDto::unsetAssignment_id()
{
    m_Assignment_idIsSet = false;
}
std::shared_ptr<DeviceLicenseAssignmentDto> SessionDto::getAssignment() const
{
    return m_Assignment;
}

void SessionDto::setAssignment(const std::shared_ptr<DeviceLicenseAssignmentDto>& value)
{
    m_Assignment = value;
    m_AssignmentIsSet = true;
}

bool SessionDto::assignmentIsSet() const
{
    return m_AssignmentIsSet;
}

void SessionDto::unsetAssignment()
{
    m_AssignmentIsSet = false;
}
utility::string_t SessionDto::getUserId() const
{
    return m_User_id;
}

void SessionDto::setUserId(const utility::string_t& value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}

bool SessionDto::userIdIsSet() const
{
    return m_User_idIsSet;
}

void SessionDto::unsetUser_id()
{
    m_User_idIsSet = false;
}
int32_t SessionDto::getMaxOpenSessionCount() const
{
    return m_Max_open_session_count;
}

void SessionDto::setMaxOpenSessionCount(int32_t value)
{
    m_Max_open_session_count = value;
    m_Max_open_session_countIsSet = true;
}

bool SessionDto::maxOpenSessionCountIsSet() const
{
    return m_Max_open_session_countIsSet;
}

void SessionDto::unsetMax_open_session_count()
{
    m_Max_open_session_countIsSet = false;
}
int32_t SessionDto::getMaxActiveClientCount() const
{
    return m_Max_active_client_count;
}

void SessionDto::setMaxActiveClientCount(int32_t value)
{
    m_Max_active_client_count = value;
    m_Max_active_client_countIsSet = true;
}

bool SessionDto::maxActiveClientCountIsSet() const
{
    return m_Max_active_client_countIsSet;
}

void SessionDto::unsetMax_active_client_count()
{
    m_Max_active_client_countIsSet = false;
}
}
}
}
}


