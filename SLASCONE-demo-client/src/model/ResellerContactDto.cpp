/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/ResellerContactDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ResellerContactDto::ResellerContactDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Surname = utility::conversions::to_string_t("");
    m_SurnameIsSet = false;
    m_Email = utility::conversions::to_string_t("");
    m_EmailIsSet = false;
    m_Phone = utility::conversions::to_string_t("");
    m_PhoneIsSet = false;
    m_Mobile = utility::conversions::to_string_t("");
    m_MobileIsSet = false;
    m_User_id = utility::conversions::to_string_t("");
    m_User_idIsSet = false;
    m_Is_active = false;
    m_Is_activeIsSet = false;
    m_Is_reseller_portal_user = false;
    m_Is_reseller_portal_userIsSet = false;
    m_Language = utility::conversions::to_string_t("");
    m_LanguageIsSet = false;
    m_Reseller_id = utility::conversions::to_string_t("");
    m_Reseller_idIsSet = false;
    m_Created_date_utc = utility::datetime();
    m_Created_date_utcIsSet = false;
    m_Modified_date_utc = utility::datetime();
    m_Modified_date_utcIsSet = false;
    m_Last_modified_by = utility::conversions::to_string_t("");
    m_Last_modified_byIsSet = false;
}

ResellerContactDto::~ResellerContactDto()
{
}

void ResellerContactDto::validate()
{
    // TODO: implement validation
}

web::json::value ResellerContactDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_SurnameIsSet)
    {
        val[utility::conversions::to_string_t(U("surname"))] = ModelBase::toJson(m_Surname);
    }
    if(m_EmailIsSet)
    {
        val[utility::conversions::to_string_t(U("email"))] = ModelBase::toJson(m_Email);
    }
    if(m_PhoneIsSet)
    {
        val[utility::conversions::to_string_t(U("phone"))] = ModelBase::toJson(m_Phone);
    }
    if(m_MobileIsSet)
    {
        val[utility::conversions::to_string_t(U("mobile"))] = ModelBase::toJson(m_Mobile);
    }
    if(m_User_idIsSet)
    {
        val[utility::conversions::to_string_t(U("user_id"))] = ModelBase::toJson(m_User_id);
    }
    if(m_Is_activeIsSet)
    {
        val[utility::conversions::to_string_t(U("is_active"))] = ModelBase::toJson(m_Is_active);
    }
    if(m_Is_reseller_portal_userIsSet)
    {
        val[utility::conversions::to_string_t(U("is_reseller_portal_user"))] = ModelBase::toJson(m_Is_reseller_portal_user);
    }
    if(m_LanguageIsSet)
    {
        val[utility::conversions::to_string_t(U("language"))] = ModelBase::toJson(m_Language);
    }
    if(m_Reseller_idIsSet)
    {
        val[utility::conversions::to_string_t(U("reseller_id"))] = ModelBase::toJson(m_Reseller_id);
    }
    if(m_Created_date_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("created_date_utc"))] = ModelBase::toJson(m_Created_date_utc);
    }
    if(m_Modified_date_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("modified_date_utc"))] = ModelBase::toJson(m_Modified_date_utc);
    }
    if(m_Last_modified_byIsSet)
    {
        val[utility::conversions::to_string_t(U("last_modified_by"))] = ModelBase::toJson(m_Last_modified_by);
    }

    return val;
}

bool ResellerContactDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("surname"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("surname")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSurname;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSurname);
            setSurname(refVal_setSurname);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("email"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("email")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEmail;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEmail);
            setEmail(refVal_setEmail);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("phone"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("phone")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPhone;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPhone);
            setPhone(refVal_setPhone);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mobile"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mobile")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMobile;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMobile);
            setMobile(refVal_setMobile);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("user_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("user_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserId);
            setUserId(refVal_setUserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_active"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_active")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsActive;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsActive);
            setIsActive(refVal_setIsActive);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_reseller_portal_user"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_reseller_portal_user")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsResellerPortalUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsResellerPortalUser);
            setIsResellerPortalUser(refVal_setIsResellerPortalUser);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("language"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("language")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLanguage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLanguage);
            setLanguage(refVal_setLanguage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reseller_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reseller_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setResellerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResellerId);
            setResellerId(refVal_setResellerId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_date_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_date_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedDateUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedDateUtc);
            setCreatedDateUtc(refVal_setCreatedDateUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("modified_date_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("modified_date_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setModifiedDateUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModifiedDateUtc);
            setModifiedDateUtc(refVal_setModifiedDateUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("last_modified_by"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("last_modified_by")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLastModifiedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastModifiedBy);
            setLastModifiedBy(refVal_setLastModifiedBy);
        }
    }
    return ok;
}

void ResellerContactDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_SurnameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("surname")), m_Surname));
    }
    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("email")), m_Email));
    }
    if(m_PhoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("phone")), m_Phone));
    }
    if(m_MobileIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mobile")), m_Mobile));
    }
    if(m_User_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("user_id")), m_User_id));
    }
    if(m_Is_activeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_active")), m_Is_active));
    }
    if(m_Is_reseller_portal_userIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_reseller_portal_user")), m_Is_reseller_portal_user));
    }
    if(m_LanguageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("language")), m_Language));
    }
    if(m_Reseller_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reseller_id")), m_Reseller_id));
    }
    if(m_Created_date_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_date_utc")), m_Created_date_utc));
    }
    if(m_Modified_date_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("modified_date_utc")), m_Modified_date_utc));
    }
    if(m_Last_modified_byIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("last_modified_by")), m_Last_modified_by));
    }
}

bool ResellerContactDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("surname"))))
    {
        utility::string_t refVal_setSurname;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("surname"))), refVal_setSurname );
        setSurname(refVal_setSurname);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("email"))))
    {
        utility::string_t refVal_setEmail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("email"))), refVal_setEmail );
        setEmail(refVal_setEmail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("phone"))))
    {
        utility::string_t refVal_setPhone;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("phone"))), refVal_setPhone );
        setPhone(refVal_setPhone);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mobile"))))
    {
        utility::string_t refVal_setMobile;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mobile"))), refVal_setMobile );
        setMobile(refVal_setMobile);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("user_id"))))
    {
        utility::string_t refVal_setUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("user_id"))), refVal_setUserId );
        setUserId(refVal_setUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_active"))))
    {
        bool refVal_setIsActive;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_active"))), refVal_setIsActive );
        setIsActive(refVal_setIsActive);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_reseller_portal_user"))))
    {
        bool refVal_setIsResellerPortalUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_reseller_portal_user"))), refVal_setIsResellerPortalUser );
        setIsResellerPortalUser(refVal_setIsResellerPortalUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("language"))))
    {
        utility::string_t refVal_setLanguage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("language"))), refVal_setLanguage );
        setLanguage(refVal_setLanguage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reseller_id"))))
    {
        utility::string_t refVal_setResellerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reseller_id"))), refVal_setResellerId );
        setResellerId(refVal_setResellerId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_date_utc"))))
    {
        utility::datetime refVal_setCreatedDateUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_date_utc"))), refVal_setCreatedDateUtc );
        setCreatedDateUtc(refVal_setCreatedDateUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("modified_date_utc"))))
    {
        utility::datetime refVal_setModifiedDateUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("modified_date_utc"))), refVal_setModifiedDateUtc );
        setModifiedDateUtc(refVal_setModifiedDateUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("last_modified_by"))))
    {
        utility::string_t refVal_setLastModifiedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("last_modified_by"))), refVal_setLastModifiedBy );
        setLastModifiedBy(refVal_setLastModifiedBy);
    }
    return ok;
}

utility::string_t ResellerContactDto::getId() const
{
    return m_Id;
}

void ResellerContactDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool ResellerContactDto::idIsSet() const
{
    return m_IdIsSet;
}

void ResellerContactDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t ResellerContactDto::getName() const
{
    return m_Name;
}

void ResellerContactDto::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool ResellerContactDto::nameIsSet() const
{
    return m_NameIsSet;
}

void ResellerContactDto::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t ResellerContactDto::getSurname() const
{
    return m_Surname;
}

void ResellerContactDto::setSurname(const utility::string_t& value)
{
    m_Surname = value;
    m_SurnameIsSet = true;
}

bool ResellerContactDto::surnameIsSet() const
{
    return m_SurnameIsSet;
}

void ResellerContactDto::unsetSurname()
{
    m_SurnameIsSet = false;
}
utility::string_t ResellerContactDto::getEmail() const
{
    return m_Email;
}

void ResellerContactDto::setEmail(const utility::string_t& value)
{
    m_Email = value;
    m_EmailIsSet = true;
}

bool ResellerContactDto::emailIsSet() const
{
    return m_EmailIsSet;
}

void ResellerContactDto::unsetEmail()
{
    m_EmailIsSet = false;
}
utility::string_t ResellerContactDto::getPhone() const
{
    return m_Phone;
}

void ResellerContactDto::setPhone(const utility::string_t& value)
{
    m_Phone = value;
    m_PhoneIsSet = true;
}

bool ResellerContactDto::phoneIsSet() const
{
    return m_PhoneIsSet;
}

void ResellerContactDto::unsetPhone()
{
    m_PhoneIsSet = false;
}
utility::string_t ResellerContactDto::getMobile() const
{
    return m_Mobile;
}

void ResellerContactDto::setMobile(const utility::string_t& value)
{
    m_Mobile = value;
    m_MobileIsSet = true;
}

bool ResellerContactDto::mobileIsSet() const
{
    return m_MobileIsSet;
}

void ResellerContactDto::unsetMobile()
{
    m_MobileIsSet = false;
}
utility::string_t ResellerContactDto::getUserId() const
{
    return m_User_id;
}

void ResellerContactDto::setUserId(const utility::string_t& value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}

bool ResellerContactDto::userIdIsSet() const
{
    return m_User_idIsSet;
}

void ResellerContactDto::unsetUser_id()
{
    m_User_idIsSet = false;
}
bool ResellerContactDto::isIsActive() const
{
    return m_Is_active;
}

void ResellerContactDto::setIsActive(bool value)
{
    m_Is_active = value;
    m_Is_activeIsSet = true;
}

bool ResellerContactDto::isActiveIsSet() const
{
    return m_Is_activeIsSet;
}

void ResellerContactDto::unsetIs_active()
{
    m_Is_activeIsSet = false;
}
bool ResellerContactDto::isIsResellerPortalUser() const
{
    return m_Is_reseller_portal_user;
}

void ResellerContactDto::setIsResellerPortalUser(bool value)
{
    m_Is_reseller_portal_user = value;
    m_Is_reseller_portal_userIsSet = true;
}

bool ResellerContactDto::isResellerPortalUserIsSet() const
{
    return m_Is_reseller_portal_userIsSet;
}

void ResellerContactDto::unsetIs_reseller_portal_user()
{
    m_Is_reseller_portal_userIsSet = false;
}
utility::string_t ResellerContactDto::getLanguage() const
{
    return m_Language;
}

void ResellerContactDto::setLanguage(const utility::string_t& value)
{
    m_Language = value;
    m_LanguageIsSet = true;
}

bool ResellerContactDto::languageIsSet() const
{
    return m_LanguageIsSet;
}

void ResellerContactDto::unsetLanguage()
{
    m_LanguageIsSet = false;
}
utility::string_t ResellerContactDto::getResellerId() const
{
    return m_Reseller_id;
}

void ResellerContactDto::setResellerId(const utility::string_t& value)
{
    m_Reseller_id = value;
    m_Reseller_idIsSet = true;
}

bool ResellerContactDto::resellerIdIsSet() const
{
    return m_Reseller_idIsSet;
}

void ResellerContactDto::unsetReseller_id()
{
    m_Reseller_idIsSet = false;
}
utility::datetime ResellerContactDto::getCreatedDateUtc() const
{
    return m_Created_date_utc;
}

void ResellerContactDto::setCreatedDateUtc(const utility::datetime& value)
{
    m_Created_date_utc = value;
    m_Created_date_utcIsSet = true;
}

bool ResellerContactDto::createdDateUtcIsSet() const
{
    return m_Created_date_utcIsSet;
}

void ResellerContactDto::unsetCreated_date_utc()
{
    m_Created_date_utcIsSet = false;
}
utility::datetime ResellerContactDto::getModifiedDateUtc() const
{
    return m_Modified_date_utc;
}

void ResellerContactDto::setModifiedDateUtc(const utility::datetime& value)
{
    m_Modified_date_utc = value;
    m_Modified_date_utcIsSet = true;
}

bool ResellerContactDto::modifiedDateUtcIsSet() const
{
    return m_Modified_date_utcIsSet;
}

void ResellerContactDto::unsetModified_date_utc()
{
    m_Modified_date_utcIsSet = false;
}
utility::string_t ResellerContactDto::getLastModifiedBy() const
{
    return m_Last_modified_by;
}

void ResellerContactDto::setLastModifiedBy(const utility::string_t& value)
{
    m_Last_modified_by = value;
    m_Last_modified_byIsSet = true;
}

bool ResellerContactDto::lastModifiedByIsSet() const
{
    return m_Last_modified_byIsSet;
}

void ResellerContactDto::unsetLast_modified_by()
{
    m_Last_modified_byIsSet = false;
}
}
}
}
}


