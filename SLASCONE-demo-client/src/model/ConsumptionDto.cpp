/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/ConsumptionDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ConsumptionDto::ConsumptionDto()
{
    m_Transaction_id = utility::conversions::to_string_t("");
    m_Transaction_idIsSet = false;
    m_Limitation_id = utility::conversions::to_string_t("");
    m_Limitation_idIsSet = false;
    m_Remaining = 0.0;
    m_RemainingIsSet = false;
    m_Limit = 0.0;
    m_LimitIsSet = false;
    m_Goodwill = 0.0;
    m_GoodwillIsSet = false;
    m_Last_reset_date_utc = utility::datetime();
    m_Last_reset_date_utcIsSet = false;
    m_Next_reset_date_utc = utility::datetime();
    m_Next_reset_date_utcIsSet = false;
}

ConsumptionDto::~ConsumptionDto()
{
}

void ConsumptionDto::validate()
{
    // TODO: implement validation
}

web::json::value ConsumptionDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Transaction_idIsSet)
    {
        val[utility::conversions::to_string_t(U("transaction_id"))] = ModelBase::toJson(m_Transaction_id);
    }
    if(m_Limitation_idIsSet)
    {
        val[utility::conversions::to_string_t(U("limitation_id"))] = ModelBase::toJson(m_Limitation_id);
    }
    if(m_RemainingIsSet)
    {
        val[utility::conversions::to_string_t(U("remaining"))] = ModelBase::toJson(m_Remaining);
    }
    if(m_LimitIsSet)
    {
        val[utility::conversions::to_string_t(U("limit"))] = ModelBase::toJson(m_Limit);
    }
    if(m_GoodwillIsSet)
    {
        val[utility::conversions::to_string_t(U("goodwill"))] = ModelBase::toJson(m_Goodwill);
    }
    if(m_Last_reset_date_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("last_reset_date_utc"))] = ModelBase::toJson(m_Last_reset_date_utc);
    }
    if(m_Next_reset_date_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("next_reset_date_utc"))] = ModelBase::toJson(m_Next_reset_date_utc);
    }

    return val;
}

bool ConsumptionDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("transaction_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("transaction_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTransactionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTransactionId);
            setTransactionId(refVal_setTransactionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("limitation_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("limitation_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLimitationId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLimitationId);
            setLimitationId(refVal_setLimitationId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("remaining"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("remaining")));
        if(!fieldValue.is_null())
        {
            double refVal_setRemaining;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRemaining);
            setRemaining(refVal_setRemaining);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("limit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("limit")));
        if(!fieldValue.is_null())
        {
            double refVal_setLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLimit);
            setLimit(refVal_setLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("goodwill"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("goodwill")));
        if(!fieldValue.is_null())
        {
            double refVal_setGoodwill;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGoodwill);
            setGoodwill(refVal_setGoodwill);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("last_reset_date_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("last_reset_date_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setLastResetDateUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastResetDateUtc);
            setLastResetDateUtc(refVal_setLastResetDateUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("next_reset_date_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("next_reset_date_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setNextResetDateUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNextResetDateUtc);
            setNextResetDateUtc(refVal_setNextResetDateUtc);
        }
    }
    return ok;
}

void ConsumptionDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Transaction_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("transaction_id")), m_Transaction_id));
    }
    if(m_Limitation_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("limitation_id")), m_Limitation_id));
    }
    if(m_RemainingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("remaining")), m_Remaining));
    }
    if(m_LimitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("limit")), m_Limit));
    }
    if(m_GoodwillIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("goodwill")), m_Goodwill));
    }
    if(m_Last_reset_date_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("last_reset_date_utc")), m_Last_reset_date_utc));
    }
    if(m_Next_reset_date_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("next_reset_date_utc")), m_Next_reset_date_utc));
    }
}

bool ConsumptionDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("transaction_id"))))
    {
        utility::string_t refVal_setTransactionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("transaction_id"))), refVal_setTransactionId );
        setTransactionId(refVal_setTransactionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("limitation_id"))))
    {
        utility::string_t refVal_setLimitationId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("limitation_id"))), refVal_setLimitationId );
        setLimitationId(refVal_setLimitationId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("remaining"))))
    {
        double refVal_setRemaining;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("remaining"))), refVal_setRemaining );
        setRemaining(refVal_setRemaining);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("limit"))))
    {
        double refVal_setLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("limit"))), refVal_setLimit );
        setLimit(refVal_setLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("goodwill"))))
    {
        double refVal_setGoodwill;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("goodwill"))), refVal_setGoodwill );
        setGoodwill(refVal_setGoodwill);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("last_reset_date_utc"))))
    {
        utility::datetime refVal_setLastResetDateUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("last_reset_date_utc"))), refVal_setLastResetDateUtc );
        setLastResetDateUtc(refVal_setLastResetDateUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("next_reset_date_utc"))))
    {
        utility::datetime refVal_setNextResetDateUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("next_reset_date_utc"))), refVal_setNextResetDateUtc );
        setNextResetDateUtc(refVal_setNextResetDateUtc);
    }
    return ok;
}

utility::string_t ConsumptionDto::getTransactionId() const
{
    return m_Transaction_id;
}

void ConsumptionDto::setTransactionId(const utility::string_t& value)
{
    m_Transaction_id = value;
    m_Transaction_idIsSet = true;
}

bool ConsumptionDto::transactionIdIsSet() const
{
    return m_Transaction_idIsSet;
}

void ConsumptionDto::unsetTransaction_id()
{
    m_Transaction_idIsSet = false;
}
utility::string_t ConsumptionDto::getLimitationId() const
{
    return m_Limitation_id;
}

void ConsumptionDto::setLimitationId(const utility::string_t& value)
{
    m_Limitation_id = value;
    m_Limitation_idIsSet = true;
}

bool ConsumptionDto::limitationIdIsSet() const
{
    return m_Limitation_idIsSet;
}

void ConsumptionDto::unsetLimitation_id()
{
    m_Limitation_idIsSet = false;
}
double ConsumptionDto::getRemaining() const
{
    return m_Remaining;
}

void ConsumptionDto::setRemaining(double value)
{
    m_Remaining = value;
    m_RemainingIsSet = true;
}

bool ConsumptionDto::remainingIsSet() const
{
    return m_RemainingIsSet;
}

void ConsumptionDto::unsetRemaining()
{
    m_RemainingIsSet = false;
}
double ConsumptionDto::getLimit() const
{
    return m_Limit;
}

void ConsumptionDto::setLimit(double value)
{
    m_Limit = value;
    m_LimitIsSet = true;
}

bool ConsumptionDto::limitIsSet() const
{
    return m_LimitIsSet;
}

void ConsumptionDto::unsetLimit()
{
    m_LimitIsSet = false;
}
double ConsumptionDto::getGoodwill() const
{
    return m_Goodwill;
}

void ConsumptionDto::setGoodwill(double value)
{
    m_Goodwill = value;
    m_GoodwillIsSet = true;
}

bool ConsumptionDto::goodwillIsSet() const
{
    return m_GoodwillIsSet;
}

void ConsumptionDto::unsetGoodwill()
{
    m_GoodwillIsSet = false;
}
utility::datetime ConsumptionDto::getLastResetDateUtc() const
{
    return m_Last_reset_date_utc;
}

void ConsumptionDto::setLastResetDateUtc(const utility::datetime& value)
{
    m_Last_reset_date_utc = value;
    m_Last_reset_date_utcIsSet = true;
}

bool ConsumptionDto::lastResetDateUtcIsSet() const
{
    return m_Last_reset_date_utcIsSet;
}

void ConsumptionDto::unsetLast_reset_date_utc()
{
    m_Last_reset_date_utcIsSet = false;
}
utility::datetime ConsumptionDto::getNextResetDateUtc() const
{
    return m_Next_reset_date_utc;
}

void ConsumptionDto::setNextResetDateUtc(const utility::datetime& value)
{
    m_Next_reset_date_utc = value;
    m_Next_reset_date_utcIsSet = true;
}

bool ConsumptionDto::nextResetDateUtcIsSet() const
{
    return m_Next_reset_date_utcIsSet;
}

void ConsumptionDto::unsetNext_reset_date_utc()
{
    m_Next_reset_date_utcIsSet = false;
}
}
}
}
}


