/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/ProvisioningConstrainedVariableDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ProvisioningConstrainedVariableDto::ProvisioningConstrainedVariableDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_CustomListId = utility::conversions::to_string_t("");
    m_CustomListIdIsSet = false;
    m_ValueIsSet = false;
}

ProvisioningConstrainedVariableDto::~ProvisioningConstrainedVariableDto()
{
}

void ProvisioningConstrainedVariableDto::validate()
{
    // TODO: implement validation
}

web::json::value ProvisioningConstrainedVariableDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_CustomListIdIsSet)
    {
        val[utility::conversions::to_string_t(U("customListId"))] = ModelBase::toJson(m_CustomListId);
    }
    if(m_ValueIsSet)
    {
        val[utility::conversions::to_string_t(U("value"))] = ModelBase::toJson(m_Value);
    }

    return val;
}

bool ProvisioningConstrainedVariableDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("customListId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("customListId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCustomListId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomListId);
            setCustomListId(refVal_setCustomListId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("value"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("value")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValue);
            setValue(refVal_setValue);
        }
    }
    return ok;
}

void ProvisioningConstrainedVariableDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_CustomListIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("customListId")), m_CustomListId));
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("value")), m_Value));
    }
}

bool ProvisioningConstrainedVariableDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("customListId"))))
    {
        utility::string_t refVal_setCustomListId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("customListId"))), refVal_setCustomListId );
        setCustomListId(refVal_setCustomListId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("value"))))
    {
        std::vector<utility::string_t> refVal_setValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("value"))), refVal_setValue );
        setValue(refVal_setValue);
    }
    return ok;
}

utility::string_t ProvisioningConstrainedVariableDto::getId() const
{
    return m_Id;
}

void ProvisioningConstrainedVariableDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool ProvisioningConstrainedVariableDto::idIsSet() const
{
    return m_IdIsSet;
}

void ProvisioningConstrainedVariableDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t ProvisioningConstrainedVariableDto::getName() const
{
    return m_Name;
}

void ProvisioningConstrainedVariableDto::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool ProvisioningConstrainedVariableDto::nameIsSet() const
{
    return m_NameIsSet;
}

void ProvisioningConstrainedVariableDto::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t ProvisioningConstrainedVariableDto::getDescription() const
{
    return m_Description;
}

void ProvisioningConstrainedVariableDto::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool ProvisioningConstrainedVariableDto::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void ProvisioningConstrainedVariableDto::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t ProvisioningConstrainedVariableDto::getCustomListId() const
{
    return m_CustomListId;
}

void ProvisioningConstrainedVariableDto::setCustomListId(const utility::string_t& value)
{
    m_CustomListId = value;
    m_CustomListIdIsSet = true;
}

bool ProvisioningConstrainedVariableDto::customListIdIsSet() const
{
    return m_CustomListIdIsSet;
}

void ProvisioningConstrainedVariableDto::unsetCustomListId()
{
    m_CustomListIdIsSet = false;
}
std::vector<utility::string_t>& ProvisioningConstrainedVariableDto::getValue()
{
    return m_Value;
}

void ProvisioningConstrainedVariableDto::setValue(const std::vector<utility::string_t>& value)
{
    m_Value = value;
    m_ValueIsSet = true;
}

bool ProvisioningConstrainedVariableDto::valueIsSet() const
{
    return m_ValueIsSet;
}

void ProvisioningConstrainedVariableDto::unsetValue()
{
    m_ValueIsSet = false;
}
}
}
}
}


