/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/LicenseInfoDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



LicenseInfoDto::LicenseInfoDto()
{
    m_CustomerIsSet = false;
    m_License_name = utility::conversions::to_string_t("");
    m_License_nameIsSet = false;
    m_License_key = utility::conversions::to_string_t("");
    m_License_keyIsSet = false;
    m_Token_key = utility::conversions::to_string_t("");
    m_Token_keyIsSet = false;
    m_Legacy_license_key = utility::conversions::to_string_t("");
    m_Legacy_license_keyIsSet = false;
    m_Client_id = utility::conversions::to_string_t("");
    m_Client_idIsSet = false;
    m_Client_description = utility::conversions::to_string_t("");
    m_Client_descriptionIsSet = false;
    m_Product_name = utility::conversions::to_string_t("");
    m_Product_nameIsSet = false;
    m_Product_id = utility::conversions::to_string_t("");
    m_Product_idIsSet = false;
    m_Template_name = utility::conversions::to_string_t("");
    m_Template_nameIsSet = false;
    m_Template_id = utility::conversions::to_string_t("");
    m_Template_idIsSet = false;
    m_Provisioning_modeIsSet = false;
    m_Client_typeIsSet = false;
    m_Is_license_active = false;
    m_Is_license_activeIsSet = false;
    m_Is_license_expired = false;
    m_Is_license_expiredIsSet = false;
    m_Is_license_valid = false;
    m_Is_license_validIsSet = false;
    m_Expiration_date_utc = utility::datetime();
    m_Expiration_date_utcIsSet = false;
    m_Token_limit = 0;
    m_Token_limitIsSet = false;
    m_Floating_token_limit = 0;
    m_Floating_token_limitIsSet = false;
    m_Is_temporary = false;
    m_Is_temporaryIsSet = false;
    m_Is_software_version_valid = false;
    m_Is_software_version_validIsSet = false;
    m_Software_release_limitationIsSet = false;
    m_Session_period = 0;
    m_Session_periodIsSet = false;
    m_Heartbeat_period = 0;
    m_Heartbeat_periodIsSet = false;
    m_Freeride = 0;
    m_FreerideIsSet = false;
    m_Enforce_software_version_upgrade = false;
    m_Enforce_software_version_upgradeIsSet = false;
    m_FeaturesIsSet = false;
    m_LimitationsIsSet = false;
    m_VariablesIsSet = false;
    m_Constrained_variablesIsSet = false;
    m_License_usersIsSet = false;
    m_Created_date_utc = utility::datetime();
    m_Created_date_utcIsSet = false;
    m_License_typeIsSet = false;
}

LicenseInfoDto::~LicenseInfoDto()
{
}

void LicenseInfoDto::validate()
{
    // TODO: implement validation
}

web::json::value LicenseInfoDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CustomerIsSet)
    {
        val[utility::conversions::to_string_t(U("customer"))] = ModelBase::toJson(m_Customer);
    }
    if(m_License_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("license_name"))] = ModelBase::toJson(m_License_name);
    }
    if(m_License_keyIsSet)
    {
        val[utility::conversions::to_string_t(U("license_key"))] = ModelBase::toJson(m_License_key);
    }
    if(m_Token_keyIsSet)
    {
        val[utility::conversions::to_string_t(U("token_key"))] = ModelBase::toJson(m_Token_key);
    }
    if(m_Legacy_license_keyIsSet)
    {
        val[utility::conversions::to_string_t(U("legacy_license_key"))] = ModelBase::toJson(m_Legacy_license_key);
    }
    if(m_Client_idIsSet)
    {
        val[utility::conversions::to_string_t(U("client_id"))] = ModelBase::toJson(m_Client_id);
    }
    if(m_Client_descriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("client_description"))] = ModelBase::toJson(m_Client_description);
    }
    if(m_Product_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("product_name"))] = ModelBase::toJson(m_Product_name);
    }
    if(m_Product_idIsSet)
    {
        val[utility::conversions::to_string_t(U("product_id"))] = ModelBase::toJson(m_Product_id);
    }
    if(m_Template_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("template_name"))] = ModelBase::toJson(m_Template_name);
    }
    if(m_Template_idIsSet)
    {
        val[utility::conversions::to_string_t(U("template_id"))] = ModelBase::toJson(m_Template_id);
    }
    if(m_Provisioning_modeIsSet)
    {
        val[utility::conversions::to_string_t(U("provisioning_mode"))] = ModelBase::toJson(m_Provisioning_mode);
    }
    if(m_Client_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("client_type"))] = ModelBase::toJson(m_Client_type);
    }
    if(m_Is_license_activeIsSet)
    {
        val[utility::conversions::to_string_t(U("is_license_active"))] = ModelBase::toJson(m_Is_license_active);
    }
    if(m_Is_license_expiredIsSet)
    {
        val[utility::conversions::to_string_t(U("is_license_expired"))] = ModelBase::toJson(m_Is_license_expired);
    }
    if(m_Is_license_validIsSet)
    {
        val[utility::conversions::to_string_t(U("is_license_valid"))] = ModelBase::toJson(m_Is_license_valid);
    }
    if(m_Expiration_date_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("expiration_date_utc"))] = ModelBase::toJson(m_Expiration_date_utc);
    }
    if(m_Token_limitIsSet)
    {
        val[utility::conversions::to_string_t(U("token_limit"))] = ModelBase::toJson(m_Token_limit);
    }
    if(m_Floating_token_limitIsSet)
    {
        val[utility::conversions::to_string_t(U("floating_token_limit"))] = ModelBase::toJson(m_Floating_token_limit);
    }
    if(m_Is_temporaryIsSet)
    {
        val[utility::conversions::to_string_t(U("is_temporary"))] = ModelBase::toJson(m_Is_temporary);
    }
    if(m_Is_software_version_validIsSet)
    {
        val[utility::conversions::to_string_t(U("is_software_version_valid"))] = ModelBase::toJson(m_Is_software_version_valid);
    }
    if(m_Software_release_limitationIsSet)
    {
        val[utility::conversions::to_string_t(U("software_release_limitation"))] = ModelBase::toJson(m_Software_release_limitation);
    }
    if(m_Session_periodIsSet)
    {
        val[utility::conversions::to_string_t(U("session_period"))] = ModelBase::toJson(m_Session_period);
    }
    if(m_Heartbeat_periodIsSet)
    {
        val[utility::conversions::to_string_t(U("heartbeat_period"))] = ModelBase::toJson(m_Heartbeat_period);
    }
    if(m_FreerideIsSet)
    {
        val[utility::conversions::to_string_t(U("freeride"))] = ModelBase::toJson(m_Freeride);
    }
    if(m_Enforce_software_version_upgradeIsSet)
    {
        val[utility::conversions::to_string_t(U("enforce_software_version_upgrade"))] = ModelBase::toJson(m_Enforce_software_version_upgrade);
    }
    if(m_FeaturesIsSet)
    {
        val[utility::conversions::to_string_t(U("features"))] = ModelBase::toJson(m_Features);
    }
    if(m_LimitationsIsSet)
    {
        val[utility::conversions::to_string_t(U("limitations"))] = ModelBase::toJson(m_Limitations);
    }
    if(m_VariablesIsSet)
    {
        val[utility::conversions::to_string_t(U("variables"))] = ModelBase::toJson(m_Variables);
    }
    if(m_Constrained_variablesIsSet)
    {
        val[utility::conversions::to_string_t(U("constrained_variables"))] = ModelBase::toJson(m_Constrained_variables);
    }
    if(m_License_usersIsSet)
    {
        val[utility::conversions::to_string_t(U("license_users"))] = ModelBase::toJson(m_License_users);
    }
    if(m_Created_date_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("created_date_utc"))] = ModelBase::toJson(m_Created_date_utc);
    }
    if(m_License_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("license_type"))] = ModelBase::toJson(m_License_type);
    }

    return val;
}

bool LicenseInfoDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("customer"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("customer")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CustomerAccountDto> refVal_setCustomer;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomer);
            setCustomer(refVal_setCustomer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("license_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("license_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLicenseName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenseName);
            setLicenseName(refVal_setLicenseName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("license_key"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("license_key")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLicenseKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenseKey);
            setLicenseKey(refVal_setLicenseKey);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("token_key"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("token_key")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTokenKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTokenKey);
            setTokenKey(refVal_setTokenKey);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("legacy_license_key"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("legacy_license_key")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLegacyLicenseKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLegacyLicenseKey);
            setLegacyLicenseKey(refVal_setLegacyLicenseKey);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("client_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("client_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClientId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClientId);
            setClientId(refVal_setClientId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("client_description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("client_description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClientDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClientDescription);
            setClientDescription(refVal_setClientDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("product_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("product_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProductName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProductName);
            setProductName(refVal_setProductName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("product_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("product_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProductId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProductId);
            setProductId(refVal_setProductId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("template_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("template_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTemplateName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTemplateName);
            setTemplateName(refVal_setTemplateName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("template_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("template_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTemplateId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTemplateId);
            setTemplateId(refVal_setTemplateId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("provisioning_mode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("provisioning_mode")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ProvisioningMode> refVal_setProvisioningMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProvisioningMode);
            setProvisioningMode(refVal_setProvisioningMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("client_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("client_type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ClientType> refVal_setClientType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClientType);
            setClientType(refVal_setClientType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_license_active"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_license_active")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsLicenseActive;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsLicenseActive);
            setIsLicenseActive(refVal_setIsLicenseActive);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_license_expired"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_license_expired")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsLicenseExpired;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsLicenseExpired);
            setIsLicenseExpired(refVal_setIsLicenseExpired);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_license_valid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_license_valid")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsLicenseValid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsLicenseValid);
            setIsLicenseValid(refVal_setIsLicenseValid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expiration_date_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expiration_date_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setExpirationDateUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExpirationDateUtc);
            setExpirationDateUtc(refVal_setExpirationDateUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("token_limit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("token_limit")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTokenLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTokenLimit);
            setTokenLimit(refVal_setTokenLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("floating_token_limit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("floating_token_limit")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFloatingTokenLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFloatingTokenLimit);
            setFloatingTokenLimit(refVal_setFloatingTokenLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_temporary"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_temporary")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsTemporary;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsTemporary);
            setIsTemporary(refVal_setIsTemporary);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_software_version_valid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_software_version_valid")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsSoftwareVersionValid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsSoftwareVersionValid);
            setIsSoftwareVersionValid(refVal_setIsSoftwareVersionValid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("software_release_limitation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("software_release_limitation")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SoftwareReleaseLimitationDto> refVal_setSoftwareReleaseLimitation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSoftwareReleaseLimitation);
            setSoftwareReleaseLimitation(refVal_setSoftwareReleaseLimitation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("session_period"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("session_period")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSessionPeriod;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSessionPeriod);
            setSessionPeriod(refVal_setSessionPeriod);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("heartbeat_period"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("heartbeat_period")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setHeartbeatPeriod;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHeartbeatPeriod);
            setHeartbeatPeriod(refVal_setHeartbeatPeriod);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("freeride"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("freeride")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFreeride;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFreeride);
            setFreeride(refVal_setFreeride);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("enforce_software_version_upgrade"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("enforce_software_version_upgrade")));
        if(!fieldValue.is_null())
        {
            bool refVal_setEnforceSoftwareVersionUpgrade;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEnforceSoftwareVersionUpgrade);
            setEnforceSoftwareVersionUpgrade(refVal_setEnforceSoftwareVersionUpgrade);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("features"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("features")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ProvisioningFeatureDto>> refVal_setFeatures;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFeatures);
            setFeatures(refVal_setFeatures);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("limitations"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("limitations")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ProvisioningLimitationDto>> refVal_setLimitations;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLimitations);
            setLimitations(refVal_setLimitations);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("variables"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("variables")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ProvisioningVariableDto>> refVal_setVariables;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVariables);
            setVariables(refVal_setVariables);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("constrained_variables"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("constrained_variables")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ProvisioningConstrainedVariableDto>> refVal_setConstrainedVariables;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConstrainedVariables);
            setConstrainedVariables(refVal_setConstrainedVariables);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("license_users"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("license_users")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<LicenseUserDto>> refVal_setLicenseUsers;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenseUsers);
            setLicenseUsers(refVal_setLicenseUsers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_date_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_date_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedDateUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedDateUtc);
            setCreatedDateUtc(refVal_setCreatedDateUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("license_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("license_type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<LicenseTypeDto> refVal_setLicenseType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenseType);
            setLicenseType(refVal_setLicenseType);
        }
    }
    return ok;
}

void LicenseInfoDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CustomerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("customer")), m_Customer));
    }
    if(m_License_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("license_name")), m_License_name));
    }
    if(m_License_keyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("license_key")), m_License_key));
    }
    if(m_Token_keyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("token_key")), m_Token_key));
    }
    if(m_Legacy_license_keyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("legacy_license_key")), m_Legacy_license_key));
    }
    if(m_Client_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("client_id")), m_Client_id));
    }
    if(m_Client_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("client_description")), m_Client_description));
    }
    if(m_Product_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("product_name")), m_Product_name));
    }
    if(m_Product_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("product_id")), m_Product_id));
    }
    if(m_Template_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("template_name")), m_Template_name));
    }
    if(m_Template_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("template_id")), m_Template_id));
    }
    if(m_Provisioning_modeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("provisioning_mode")), m_Provisioning_mode));
    }
    if(m_Client_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("client_type")), m_Client_type));
    }
    if(m_Is_license_activeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_license_active")), m_Is_license_active));
    }
    if(m_Is_license_expiredIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_license_expired")), m_Is_license_expired));
    }
    if(m_Is_license_validIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_license_valid")), m_Is_license_valid));
    }
    if(m_Expiration_date_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expiration_date_utc")), m_Expiration_date_utc));
    }
    if(m_Token_limitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("token_limit")), m_Token_limit));
    }
    if(m_Floating_token_limitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("floating_token_limit")), m_Floating_token_limit));
    }
    if(m_Is_temporaryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_temporary")), m_Is_temporary));
    }
    if(m_Is_software_version_validIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_software_version_valid")), m_Is_software_version_valid));
    }
    if(m_Software_release_limitationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("software_release_limitation")), m_Software_release_limitation));
    }
    if(m_Session_periodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("session_period")), m_Session_period));
    }
    if(m_Heartbeat_periodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("heartbeat_period")), m_Heartbeat_period));
    }
    if(m_FreerideIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("freeride")), m_Freeride));
    }
    if(m_Enforce_software_version_upgradeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("enforce_software_version_upgrade")), m_Enforce_software_version_upgrade));
    }
    if(m_FeaturesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("features")), m_Features));
    }
    if(m_LimitationsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("limitations")), m_Limitations));
    }
    if(m_VariablesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("variables")), m_Variables));
    }
    if(m_Constrained_variablesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("constrained_variables")), m_Constrained_variables));
    }
    if(m_License_usersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("license_users")), m_License_users));
    }
    if(m_Created_date_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_date_utc")), m_Created_date_utc));
    }
    if(m_License_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("license_type")), m_License_type));
    }
}

bool LicenseInfoDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("customer"))))
    {
        std::shared_ptr<CustomerAccountDto> refVal_setCustomer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("customer"))), refVal_setCustomer );
        setCustomer(refVal_setCustomer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("license_name"))))
    {
        utility::string_t refVal_setLicenseName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("license_name"))), refVal_setLicenseName );
        setLicenseName(refVal_setLicenseName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("license_key"))))
    {
        utility::string_t refVal_setLicenseKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("license_key"))), refVal_setLicenseKey );
        setLicenseKey(refVal_setLicenseKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("token_key"))))
    {
        utility::string_t refVal_setTokenKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("token_key"))), refVal_setTokenKey );
        setTokenKey(refVal_setTokenKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("legacy_license_key"))))
    {
        utility::string_t refVal_setLegacyLicenseKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("legacy_license_key"))), refVal_setLegacyLicenseKey );
        setLegacyLicenseKey(refVal_setLegacyLicenseKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("client_id"))))
    {
        utility::string_t refVal_setClientId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("client_id"))), refVal_setClientId );
        setClientId(refVal_setClientId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("client_description"))))
    {
        utility::string_t refVal_setClientDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("client_description"))), refVal_setClientDescription );
        setClientDescription(refVal_setClientDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("product_name"))))
    {
        utility::string_t refVal_setProductName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("product_name"))), refVal_setProductName );
        setProductName(refVal_setProductName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("product_id"))))
    {
        utility::string_t refVal_setProductId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("product_id"))), refVal_setProductId );
        setProductId(refVal_setProductId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("template_name"))))
    {
        utility::string_t refVal_setTemplateName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("template_name"))), refVal_setTemplateName );
        setTemplateName(refVal_setTemplateName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("template_id"))))
    {
        utility::string_t refVal_setTemplateId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("template_id"))), refVal_setTemplateId );
        setTemplateId(refVal_setTemplateId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("provisioning_mode"))))
    {
        std::shared_ptr<ProvisioningMode> refVal_setProvisioningMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("provisioning_mode"))), refVal_setProvisioningMode );
        setProvisioningMode(refVal_setProvisioningMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("client_type"))))
    {
        std::shared_ptr<ClientType> refVal_setClientType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("client_type"))), refVal_setClientType );
        setClientType(refVal_setClientType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_license_active"))))
    {
        bool refVal_setIsLicenseActive;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_license_active"))), refVal_setIsLicenseActive );
        setIsLicenseActive(refVal_setIsLicenseActive);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_license_expired"))))
    {
        bool refVal_setIsLicenseExpired;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_license_expired"))), refVal_setIsLicenseExpired );
        setIsLicenseExpired(refVal_setIsLicenseExpired);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_license_valid"))))
    {
        bool refVal_setIsLicenseValid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_license_valid"))), refVal_setIsLicenseValid );
        setIsLicenseValid(refVal_setIsLicenseValid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expiration_date_utc"))))
    {
        utility::datetime refVal_setExpirationDateUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expiration_date_utc"))), refVal_setExpirationDateUtc );
        setExpirationDateUtc(refVal_setExpirationDateUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("token_limit"))))
    {
        int32_t refVal_setTokenLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("token_limit"))), refVal_setTokenLimit );
        setTokenLimit(refVal_setTokenLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("floating_token_limit"))))
    {
        int32_t refVal_setFloatingTokenLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("floating_token_limit"))), refVal_setFloatingTokenLimit );
        setFloatingTokenLimit(refVal_setFloatingTokenLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_temporary"))))
    {
        bool refVal_setIsTemporary;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_temporary"))), refVal_setIsTemporary );
        setIsTemporary(refVal_setIsTemporary);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_software_version_valid"))))
    {
        bool refVal_setIsSoftwareVersionValid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_software_version_valid"))), refVal_setIsSoftwareVersionValid );
        setIsSoftwareVersionValid(refVal_setIsSoftwareVersionValid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("software_release_limitation"))))
    {
        std::shared_ptr<SoftwareReleaseLimitationDto> refVal_setSoftwareReleaseLimitation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("software_release_limitation"))), refVal_setSoftwareReleaseLimitation );
        setSoftwareReleaseLimitation(refVal_setSoftwareReleaseLimitation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("session_period"))))
    {
        int32_t refVal_setSessionPeriod;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("session_period"))), refVal_setSessionPeriod );
        setSessionPeriod(refVal_setSessionPeriod);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("heartbeat_period"))))
    {
        int32_t refVal_setHeartbeatPeriod;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("heartbeat_period"))), refVal_setHeartbeatPeriod );
        setHeartbeatPeriod(refVal_setHeartbeatPeriod);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("freeride"))))
    {
        int32_t refVal_setFreeride;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("freeride"))), refVal_setFreeride );
        setFreeride(refVal_setFreeride);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("enforce_software_version_upgrade"))))
    {
        bool refVal_setEnforceSoftwareVersionUpgrade;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("enforce_software_version_upgrade"))), refVal_setEnforceSoftwareVersionUpgrade );
        setEnforceSoftwareVersionUpgrade(refVal_setEnforceSoftwareVersionUpgrade);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("features"))))
    {
        std::vector<std::shared_ptr<ProvisioningFeatureDto>> refVal_setFeatures;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("features"))), refVal_setFeatures );
        setFeatures(refVal_setFeatures);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("limitations"))))
    {
        std::vector<std::shared_ptr<ProvisioningLimitationDto>> refVal_setLimitations;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("limitations"))), refVal_setLimitations );
        setLimitations(refVal_setLimitations);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("variables"))))
    {
        std::vector<std::shared_ptr<ProvisioningVariableDto>> refVal_setVariables;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("variables"))), refVal_setVariables );
        setVariables(refVal_setVariables);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("constrained_variables"))))
    {
        std::vector<std::shared_ptr<ProvisioningConstrainedVariableDto>> refVal_setConstrainedVariables;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("constrained_variables"))), refVal_setConstrainedVariables );
        setConstrainedVariables(refVal_setConstrainedVariables);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("license_users"))))
    {
        std::vector<std::shared_ptr<LicenseUserDto>> refVal_setLicenseUsers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("license_users"))), refVal_setLicenseUsers );
        setLicenseUsers(refVal_setLicenseUsers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_date_utc"))))
    {
        utility::datetime refVal_setCreatedDateUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_date_utc"))), refVal_setCreatedDateUtc );
        setCreatedDateUtc(refVal_setCreatedDateUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("license_type"))))
    {
        std::shared_ptr<LicenseTypeDto> refVal_setLicenseType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("license_type"))), refVal_setLicenseType );
        setLicenseType(refVal_setLicenseType);
    }
    return ok;
}

std::shared_ptr<CustomerAccountDto> LicenseInfoDto::getCustomer() const
{
    return m_Customer;
}

void LicenseInfoDto::setCustomer(const std::shared_ptr<CustomerAccountDto>& value)
{
    m_Customer = value;
    m_CustomerIsSet = true;
}

bool LicenseInfoDto::customerIsSet() const
{
    return m_CustomerIsSet;
}

void LicenseInfoDto::unsetCustomer()
{
    m_CustomerIsSet = false;
}
utility::string_t LicenseInfoDto::getLicenseName() const
{
    return m_License_name;
}

void LicenseInfoDto::setLicenseName(const utility::string_t& value)
{
    m_License_name = value;
    m_License_nameIsSet = true;
}

bool LicenseInfoDto::licenseNameIsSet() const
{
    return m_License_nameIsSet;
}

void LicenseInfoDto::unsetLicense_name()
{
    m_License_nameIsSet = false;
}
utility::string_t LicenseInfoDto::getLicenseKey() const
{
    return m_License_key;
}

void LicenseInfoDto::setLicenseKey(const utility::string_t& value)
{
    m_License_key = value;
    m_License_keyIsSet = true;
}

bool LicenseInfoDto::licenseKeyIsSet() const
{
    return m_License_keyIsSet;
}

void LicenseInfoDto::unsetLicense_key()
{
    m_License_keyIsSet = false;
}
utility::string_t LicenseInfoDto::getTokenKey() const
{
    return m_Token_key;
}

void LicenseInfoDto::setTokenKey(const utility::string_t& value)
{
    m_Token_key = value;
    m_Token_keyIsSet = true;
}

bool LicenseInfoDto::tokenKeyIsSet() const
{
    return m_Token_keyIsSet;
}

void LicenseInfoDto::unsetToken_key()
{
    m_Token_keyIsSet = false;
}
utility::string_t LicenseInfoDto::getLegacyLicenseKey() const
{
    return m_Legacy_license_key;
}

void LicenseInfoDto::setLegacyLicenseKey(const utility::string_t& value)
{
    m_Legacy_license_key = value;
    m_Legacy_license_keyIsSet = true;
}

bool LicenseInfoDto::legacyLicenseKeyIsSet() const
{
    return m_Legacy_license_keyIsSet;
}

void LicenseInfoDto::unsetLegacy_license_key()
{
    m_Legacy_license_keyIsSet = false;
}
utility::string_t LicenseInfoDto::getClientId() const
{
    return m_Client_id;
}

void LicenseInfoDto::setClientId(const utility::string_t& value)
{
    m_Client_id = value;
    m_Client_idIsSet = true;
}

bool LicenseInfoDto::clientIdIsSet() const
{
    return m_Client_idIsSet;
}

void LicenseInfoDto::unsetClient_id()
{
    m_Client_idIsSet = false;
}
utility::string_t LicenseInfoDto::getClientDescription() const
{
    return m_Client_description;
}

void LicenseInfoDto::setClientDescription(const utility::string_t& value)
{
    m_Client_description = value;
    m_Client_descriptionIsSet = true;
}

bool LicenseInfoDto::clientDescriptionIsSet() const
{
    return m_Client_descriptionIsSet;
}

void LicenseInfoDto::unsetClient_description()
{
    m_Client_descriptionIsSet = false;
}
utility::string_t LicenseInfoDto::getProductName() const
{
    return m_Product_name;
}

void LicenseInfoDto::setProductName(const utility::string_t& value)
{
    m_Product_name = value;
    m_Product_nameIsSet = true;
}

bool LicenseInfoDto::productNameIsSet() const
{
    return m_Product_nameIsSet;
}

void LicenseInfoDto::unsetProduct_name()
{
    m_Product_nameIsSet = false;
}
utility::string_t LicenseInfoDto::getProductId() const
{
    return m_Product_id;
}

void LicenseInfoDto::setProductId(const utility::string_t& value)
{
    m_Product_id = value;
    m_Product_idIsSet = true;
}

bool LicenseInfoDto::productIdIsSet() const
{
    return m_Product_idIsSet;
}

void LicenseInfoDto::unsetProduct_id()
{
    m_Product_idIsSet = false;
}
utility::string_t LicenseInfoDto::getTemplateName() const
{
    return m_Template_name;
}

void LicenseInfoDto::setTemplateName(const utility::string_t& value)
{
    m_Template_name = value;
    m_Template_nameIsSet = true;
}

bool LicenseInfoDto::templateNameIsSet() const
{
    return m_Template_nameIsSet;
}

void LicenseInfoDto::unsetTemplate_name()
{
    m_Template_nameIsSet = false;
}
utility::string_t LicenseInfoDto::getTemplateId() const
{
    return m_Template_id;
}

void LicenseInfoDto::setTemplateId(const utility::string_t& value)
{
    m_Template_id = value;
    m_Template_idIsSet = true;
}

bool LicenseInfoDto::templateIdIsSet() const
{
    return m_Template_idIsSet;
}

void LicenseInfoDto::unsetTemplate_id()
{
    m_Template_idIsSet = false;
}
std::shared_ptr<ProvisioningMode> LicenseInfoDto::getProvisioningMode() const
{
    return m_Provisioning_mode;
}

void LicenseInfoDto::setProvisioningMode(const std::shared_ptr<ProvisioningMode>& value)
{
    m_Provisioning_mode = value;
    m_Provisioning_modeIsSet = true;
}

bool LicenseInfoDto::provisioningModeIsSet() const
{
    return m_Provisioning_modeIsSet;
}

void LicenseInfoDto::unsetProvisioning_mode()
{
    m_Provisioning_modeIsSet = false;
}
std::shared_ptr<ClientType> LicenseInfoDto::getClientType() const
{
    return m_Client_type;
}

void LicenseInfoDto::setClientType(const std::shared_ptr<ClientType>& value)
{
    m_Client_type = value;
    m_Client_typeIsSet = true;
}

bool LicenseInfoDto::clientTypeIsSet() const
{
    return m_Client_typeIsSet;
}

void LicenseInfoDto::unsetClient_type()
{
    m_Client_typeIsSet = false;
}
bool LicenseInfoDto::isIsLicenseActive() const
{
    return m_Is_license_active;
}

void LicenseInfoDto::setIsLicenseActive(bool value)
{
    m_Is_license_active = value;
    m_Is_license_activeIsSet = true;
}

bool LicenseInfoDto::isLicenseActiveIsSet() const
{
    return m_Is_license_activeIsSet;
}

void LicenseInfoDto::unsetIs_license_active()
{
    m_Is_license_activeIsSet = false;
}
bool LicenseInfoDto::isIsLicenseExpired() const
{
    return m_Is_license_expired;
}

void LicenseInfoDto::setIsLicenseExpired(bool value)
{
    m_Is_license_expired = value;
    m_Is_license_expiredIsSet = true;
}

bool LicenseInfoDto::isLicenseExpiredIsSet() const
{
    return m_Is_license_expiredIsSet;
}

void LicenseInfoDto::unsetIs_license_expired()
{
    m_Is_license_expiredIsSet = false;
}
bool LicenseInfoDto::isIsLicenseValid() const
{
    return m_Is_license_valid;
}

void LicenseInfoDto::setIsLicenseValid(bool value)
{
    m_Is_license_valid = value;
    m_Is_license_validIsSet = true;
}

bool LicenseInfoDto::isLicenseValidIsSet() const
{
    return m_Is_license_validIsSet;
}

void LicenseInfoDto::unsetIs_license_valid()
{
    m_Is_license_validIsSet = false;
}
utility::datetime LicenseInfoDto::getExpirationDateUtc() const
{
    return m_Expiration_date_utc;
}

void LicenseInfoDto::setExpirationDateUtc(const utility::datetime& value)
{
    m_Expiration_date_utc = value;
    m_Expiration_date_utcIsSet = true;
}

bool LicenseInfoDto::expirationDateUtcIsSet() const
{
    return m_Expiration_date_utcIsSet;
}

void LicenseInfoDto::unsetExpiration_date_utc()
{
    m_Expiration_date_utcIsSet = false;
}
int32_t LicenseInfoDto::getTokenLimit() const
{
    return m_Token_limit;
}

void LicenseInfoDto::setTokenLimit(int32_t value)
{
    m_Token_limit = value;
    m_Token_limitIsSet = true;
}

bool LicenseInfoDto::tokenLimitIsSet() const
{
    return m_Token_limitIsSet;
}

void LicenseInfoDto::unsetToken_limit()
{
    m_Token_limitIsSet = false;
}
int32_t LicenseInfoDto::getFloatingTokenLimit() const
{
    return m_Floating_token_limit;
}

void LicenseInfoDto::setFloatingTokenLimit(int32_t value)
{
    m_Floating_token_limit = value;
    m_Floating_token_limitIsSet = true;
}

bool LicenseInfoDto::floatingTokenLimitIsSet() const
{
    return m_Floating_token_limitIsSet;
}

void LicenseInfoDto::unsetFloating_token_limit()
{
    m_Floating_token_limitIsSet = false;
}
bool LicenseInfoDto::isIsTemporary() const
{
    return m_Is_temporary;
}

void LicenseInfoDto::setIsTemporary(bool value)
{
    m_Is_temporary = value;
    m_Is_temporaryIsSet = true;
}

bool LicenseInfoDto::isTemporaryIsSet() const
{
    return m_Is_temporaryIsSet;
}

void LicenseInfoDto::unsetIs_temporary()
{
    m_Is_temporaryIsSet = false;
}
bool LicenseInfoDto::isIsSoftwareVersionValid() const
{
    return m_Is_software_version_valid;
}

void LicenseInfoDto::setIsSoftwareVersionValid(bool value)
{
    m_Is_software_version_valid = value;
    m_Is_software_version_validIsSet = true;
}

bool LicenseInfoDto::isSoftwareVersionValidIsSet() const
{
    return m_Is_software_version_validIsSet;
}

void LicenseInfoDto::unsetIs_software_version_valid()
{
    m_Is_software_version_validIsSet = false;
}
std::shared_ptr<SoftwareReleaseLimitationDto> LicenseInfoDto::getSoftwareReleaseLimitation() const
{
    return m_Software_release_limitation;
}

void LicenseInfoDto::setSoftwareReleaseLimitation(const std::shared_ptr<SoftwareReleaseLimitationDto>& value)
{
    m_Software_release_limitation = value;
    m_Software_release_limitationIsSet = true;
}

bool LicenseInfoDto::softwareReleaseLimitationIsSet() const
{
    return m_Software_release_limitationIsSet;
}

void LicenseInfoDto::unsetSoftware_release_limitation()
{
    m_Software_release_limitationIsSet = false;
}
int32_t LicenseInfoDto::getSessionPeriod() const
{
    return m_Session_period;
}

void LicenseInfoDto::setSessionPeriod(int32_t value)
{
    m_Session_period = value;
    m_Session_periodIsSet = true;
}

bool LicenseInfoDto::sessionPeriodIsSet() const
{
    return m_Session_periodIsSet;
}

void LicenseInfoDto::unsetSession_period()
{
    m_Session_periodIsSet = false;
}
int32_t LicenseInfoDto::getHeartbeatPeriod() const
{
    return m_Heartbeat_period;
}

void LicenseInfoDto::setHeartbeatPeriod(int32_t value)
{
    m_Heartbeat_period = value;
    m_Heartbeat_periodIsSet = true;
}

bool LicenseInfoDto::heartbeatPeriodIsSet() const
{
    return m_Heartbeat_periodIsSet;
}

void LicenseInfoDto::unsetHeartbeat_period()
{
    m_Heartbeat_periodIsSet = false;
}
int32_t LicenseInfoDto::getFreeride() const
{
    return m_Freeride;
}

void LicenseInfoDto::setFreeride(int32_t value)
{
    m_Freeride = value;
    m_FreerideIsSet = true;
}

bool LicenseInfoDto::freerideIsSet() const
{
    return m_FreerideIsSet;
}

void LicenseInfoDto::unsetFreeride()
{
    m_FreerideIsSet = false;
}
bool LicenseInfoDto::isEnforceSoftwareVersionUpgrade() const
{
    return m_Enforce_software_version_upgrade;
}

void LicenseInfoDto::setEnforceSoftwareVersionUpgrade(bool value)
{
    m_Enforce_software_version_upgrade = value;
    m_Enforce_software_version_upgradeIsSet = true;
}

bool LicenseInfoDto::enforceSoftwareVersionUpgradeIsSet() const
{
    return m_Enforce_software_version_upgradeIsSet;
}

void LicenseInfoDto::unsetEnforce_software_version_upgrade()
{
    m_Enforce_software_version_upgradeIsSet = false;
}
std::vector<std::shared_ptr<ProvisioningFeatureDto>>& LicenseInfoDto::getFeatures()
{
    return m_Features;
}

void LicenseInfoDto::setFeatures(const std::vector<std::shared_ptr<ProvisioningFeatureDto>>& value)
{
    m_Features = value;
    m_FeaturesIsSet = true;
}

bool LicenseInfoDto::featuresIsSet() const
{
    return m_FeaturesIsSet;
}

void LicenseInfoDto::unsetFeatures()
{
    m_FeaturesIsSet = false;
}
std::vector<std::shared_ptr<ProvisioningLimitationDto>>& LicenseInfoDto::getLimitations()
{
    return m_Limitations;
}

void LicenseInfoDto::setLimitations(const std::vector<std::shared_ptr<ProvisioningLimitationDto>>& value)
{
    m_Limitations = value;
    m_LimitationsIsSet = true;
}

bool LicenseInfoDto::limitationsIsSet() const
{
    return m_LimitationsIsSet;
}

void LicenseInfoDto::unsetLimitations()
{
    m_LimitationsIsSet = false;
}
std::vector<std::shared_ptr<ProvisioningVariableDto>>& LicenseInfoDto::getVariables()
{
    return m_Variables;
}

void LicenseInfoDto::setVariables(const std::vector<std::shared_ptr<ProvisioningVariableDto>>& value)
{
    m_Variables = value;
    m_VariablesIsSet = true;
}

bool LicenseInfoDto::variablesIsSet() const
{
    return m_VariablesIsSet;
}

void LicenseInfoDto::unsetVariables()
{
    m_VariablesIsSet = false;
}
std::vector<std::shared_ptr<ProvisioningConstrainedVariableDto>>& LicenseInfoDto::getConstrainedVariables()
{
    return m_Constrained_variables;
}

void LicenseInfoDto::setConstrainedVariables(const std::vector<std::shared_ptr<ProvisioningConstrainedVariableDto>>& value)
{
    m_Constrained_variables = value;
    m_Constrained_variablesIsSet = true;
}

bool LicenseInfoDto::constrainedVariablesIsSet() const
{
    return m_Constrained_variablesIsSet;
}

void LicenseInfoDto::unsetConstrained_variables()
{
    m_Constrained_variablesIsSet = false;
}
std::vector<std::shared_ptr<LicenseUserDto>>& LicenseInfoDto::getLicenseUsers()
{
    return m_License_users;
}

void LicenseInfoDto::setLicenseUsers(const std::vector<std::shared_ptr<LicenseUserDto>>& value)
{
    m_License_users = value;
    m_License_usersIsSet = true;
}

bool LicenseInfoDto::licenseUsersIsSet() const
{
    return m_License_usersIsSet;
}

void LicenseInfoDto::unsetLicense_users()
{
    m_License_usersIsSet = false;
}
utility::datetime LicenseInfoDto::getCreatedDateUtc() const
{
    return m_Created_date_utc;
}

void LicenseInfoDto::setCreatedDateUtc(const utility::datetime& value)
{
    m_Created_date_utc = value;
    m_Created_date_utcIsSet = true;
}

bool LicenseInfoDto::createdDateUtcIsSet() const
{
    return m_Created_date_utcIsSet;
}

void LicenseInfoDto::unsetCreated_date_utc()
{
    m_Created_date_utcIsSet = false;
}
std::shared_ptr<LicenseTypeDto> LicenseInfoDto::getLicenseType() const
{
    return m_License_type;
}

void LicenseInfoDto::setLicenseType(const std::shared_ptr<LicenseTypeDto>& value)
{
    m_License_type = value;
    m_License_typeIsSet = true;
}

bool LicenseInfoDto::licenseTypeIsSet() const
{
    return m_License_typeIsSet;
}

void LicenseInfoDto::unsetLicense_type()
{
    m_License_typeIsSet = false;
}
}
}
}
}


