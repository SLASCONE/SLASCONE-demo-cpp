/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/TemplateDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



TemplateDto::TemplateDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Product_id = utility::conversions::to_string_t("");
    m_Product_idIsSet = false;
    m_Product_name = utility::conversions::to_string_t("");
    m_Product_nameIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Short_description = utility::conversions::to_string_t("");
    m_Short_descriptionIsSet = false;
    m_Is_active = false;
    m_Is_activeIsSet = false;
    m_Token_limit = 0;
    m_Token_limitIsSet = false;
    m_Goodwill_token_limit = 0;
    m_Goodwill_token_limitIsSet = false;
    m_Floating_token_limit = 0;
    m_Floating_token_limitIsSet = false;
    m_Enforce_floating_limit = false;
    m_Enforce_floating_limitIsSet = false;
    m_User_limit = 0;
    m_User_limitIsSet = false;
    m_License_type_id = utility::conversions::to_string_t("");
    m_License_type_idIsSet = false;
    m_License_typeIsSet = false;
    m_Is_software_release_limitation_adjustable = false;
    m_Is_software_release_limitation_adjustableIsSet = false;
    m_Software_release_limitation_id = utility::conversions::to_string_t("");
    m_Software_release_limitation_idIsSet = false;
    m_Allows_invalid_software_release = false;
    m_Allows_invalid_software_releaseIsSet = false;
    m_Is_expiration_mode_adjustable = false;
    m_Is_expiration_mode_adjustableIsSet = false;
    m_Expiration_modeIsSet = false;
    m_Expiration_date_utc = utility::datetime();
    m_Expiration_date_utcIsSet = false;
    m_Valid_days_count = 0;
    m_Valid_days_countIsSet = false;
    m_Trial_days_count = 0;
    m_Trial_days_countIsSet = false;
    m_Heartbeat_modeIsSet = false;
    m_Heartbeat_period = 0;
    m_Heartbeat_periodIsSet = false;
    m_Free_ride = 0;
    m_Free_rideIsSet = false;
    m_Client_typeIsSet = false;
    m_Activation_upon_license_creationIsSet = false;
    m_Token_ui_modeIsSet = false;
    m_FeaturesIsSet = false;
    m_LimitationsIsSet = false;
    m_VariablesIsSet = false;
    m_Constrained_variablesIsSet = false;
    m_Provisioning_modeIsSet = false;
    m_Session_period = 0;
    m_Session_periodIsSet = false;
    m_Max_floating_sessions_with_same_client_id = 0;
    m_Max_floating_sessions_with_same_client_idIsSet = false;
    m_Is_temporary = false;
    m_Is_temporaryIsSet = false;
    m_Has_strict_heartbeats = false;
    m_Has_strict_heartbeatsIsSet = false;
    m_Created_date_utc = utility::datetime();
    m_Created_date_utcIsSet = false;
    m_Modified_date_utc = utility::datetime();
    m_Modified_date_utcIsSet = false;
    m_Last_modified_by = utility::conversions::to_string_t("");
    m_Last_modified_byIsSet = false;
    m_Software_release_limitationIsSet = false;
    m_Supports_license_user_groups = false;
    m_Supports_license_user_groupsIsSet = false;
    m_Heartbeat_sampling_rate = 0;
    m_Heartbeat_sampling_rateIsSet = false;
}

TemplateDto::~TemplateDto()
{
}

void TemplateDto::validate()
{
    // TODO: implement validation
}

web::json::value TemplateDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_Product_idIsSet)
    {
        val[utility::conversions::to_string_t(U("product_id"))] = ModelBase::toJson(m_Product_id);
    }
    if(m_Product_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("product_name"))] = ModelBase::toJson(m_Product_name);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_Short_descriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("short_description"))] = ModelBase::toJson(m_Short_description);
    }
    if(m_Is_activeIsSet)
    {
        val[utility::conversions::to_string_t(U("is_active"))] = ModelBase::toJson(m_Is_active);
    }
    if(m_Token_limitIsSet)
    {
        val[utility::conversions::to_string_t(U("token_limit"))] = ModelBase::toJson(m_Token_limit);
    }
    if(m_Goodwill_token_limitIsSet)
    {
        val[utility::conversions::to_string_t(U("goodwill_token_limit"))] = ModelBase::toJson(m_Goodwill_token_limit);
    }
    if(m_Floating_token_limitIsSet)
    {
        val[utility::conversions::to_string_t(U("floating_token_limit"))] = ModelBase::toJson(m_Floating_token_limit);
    }
    if(m_Enforce_floating_limitIsSet)
    {
        val[utility::conversions::to_string_t(U("enforce_floating_limit"))] = ModelBase::toJson(m_Enforce_floating_limit);
    }
    if(m_User_limitIsSet)
    {
        val[utility::conversions::to_string_t(U("user_limit"))] = ModelBase::toJson(m_User_limit);
    }
    if(m_License_type_idIsSet)
    {
        val[utility::conversions::to_string_t(U("license_type_id"))] = ModelBase::toJson(m_License_type_id);
    }
    if(m_License_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("license_type"))] = ModelBase::toJson(m_License_type);
    }
    if(m_Is_software_release_limitation_adjustableIsSet)
    {
        val[utility::conversions::to_string_t(U("is_software_release_limitation_adjustable"))] = ModelBase::toJson(m_Is_software_release_limitation_adjustable);
    }
    if(m_Software_release_limitation_idIsSet)
    {
        val[utility::conversions::to_string_t(U("software_release_limitation_id"))] = ModelBase::toJson(m_Software_release_limitation_id);
    }
    if(m_Allows_invalid_software_releaseIsSet)
    {
        val[utility::conversions::to_string_t(U("allows_invalid_software_release"))] = ModelBase::toJson(m_Allows_invalid_software_release);
    }
    if(m_Is_expiration_mode_adjustableIsSet)
    {
        val[utility::conversions::to_string_t(U("is_expiration_mode_adjustable"))] = ModelBase::toJson(m_Is_expiration_mode_adjustable);
    }
    if(m_Expiration_modeIsSet)
    {
        val[utility::conversions::to_string_t(U("expiration_mode"))] = ModelBase::toJson(m_Expiration_mode);
    }
    if(m_Expiration_date_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("expiration_date_utc"))] = ModelBase::toJson(m_Expiration_date_utc);
    }
    if(m_Valid_days_countIsSet)
    {
        val[utility::conversions::to_string_t(U("valid_days_count"))] = ModelBase::toJson(m_Valid_days_count);
    }
    if(m_Trial_days_countIsSet)
    {
        val[utility::conversions::to_string_t(U("trial_days_count"))] = ModelBase::toJson(m_Trial_days_count);
    }
    if(m_Heartbeat_modeIsSet)
    {
        val[utility::conversions::to_string_t(U("heartbeat_mode"))] = ModelBase::toJson(m_Heartbeat_mode);
    }
    if(m_Heartbeat_periodIsSet)
    {
        val[utility::conversions::to_string_t(U("heartbeat_period"))] = ModelBase::toJson(m_Heartbeat_period);
    }
    if(m_Free_rideIsSet)
    {
        val[utility::conversions::to_string_t(U("free_ride"))] = ModelBase::toJson(m_Free_ride);
    }
    if(m_Client_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("client_type"))] = ModelBase::toJson(m_Client_type);
    }
    if(m_Activation_upon_license_creationIsSet)
    {
        val[utility::conversions::to_string_t(U("activation_upon_license_creation"))] = ModelBase::toJson(m_Activation_upon_license_creation);
    }
    if(m_Token_ui_modeIsSet)
    {
        val[utility::conversions::to_string_t(U("token_ui_mode"))] = ModelBase::toJson(m_Token_ui_mode);
    }
    if(m_FeaturesIsSet)
    {
        val[utility::conversions::to_string_t(U("features"))] = ModelBase::toJson(m_Features);
    }
    if(m_LimitationsIsSet)
    {
        val[utility::conversions::to_string_t(U("limitations"))] = ModelBase::toJson(m_Limitations);
    }
    if(m_VariablesIsSet)
    {
        val[utility::conversions::to_string_t(U("variables"))] = ModelBase::toJson(m_Variables);
    }
    if(m_Constrained_variablesIsSet)
    {
        val[utility::conversions::to_string_t(U("constrained_variables"))] = ModelBase::toJson(m_Constrained_variables);
    }
    if(m_Provisioning_modeIsSet)
    {
        val[utility::conversions::to_string_t(U("provisioning_mode"))] = ModelBase::toJson(m_Provisioning_mode);
    }
    if(m_Session_periodIsSet)
    {
        val[utility::conversions::to_string_t(U("session_period"))] = ModelBase::toJson(m_Session_period);
    }
    if(m_Max_floating_sessions_with_same_client_idIsSet)
    {
        val[utility::conversions::to_string_t(U("max_floating_sessions_with_same_client_id"))] = ModelBase::toJson(m_Max_floating_sessions_with_same_client_id);
    }
    if(m_Is_temporaryIsSet)
    {
        val[utility::conversions::to_string_t(U("is_temporary"))] = ModelBase::toJson(m_Is_temporary);
    }
    if(m_Has_strict_heartbeatsIsSet)
    {
        val[utility::conversions::to_string_t(U("has_strict_heartbeats"))] = ModelBase::toJson(m_Has_strict_heartbeats);
    }
    if(m_Created_date_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("created_date_utc"))] = ModelBase::toJson(m_Created_date_utc);
    }
    if(m_Modified_date_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("modified_date_utc"))] = ModelBase::toJson(m_Modified_date_utc);
    }
    if(m_Last_modified_byIsSet)
    {
        val[utility::conversions::to_string_t(U("last_modified_by"))] = ModelBase::toJson(m_Last_modified_by);
    }
    if(m_Software_release_limitationIsSet)
    {
        val[utility::conversions::to_string_t(U("software_release_limitation"))] = ModelBase::toJson(m_Software_release_limitation);
    }
    if(m_Supports_license_user_groupsIsSet)
    {
        val[utility::conversions::to_string_t(U("supports_license_user_groups"))] = ModelBase::toJson(m_Supports_license_user_groups);
    }
    if(m_Heartbeat_sampling_rateIsSet)
    {
        val[utility::conversions::to_string_t(U("heartbeat_sampling_rate"))] = ModelBase::toJson(m_Heartbeat_sampling_rate);
    }

    return val;
}

bool TemplateDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("product_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("product_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProductId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProductId);
            setProductId(refVal_setProductId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("product_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("product_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProductName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProductName);
            setProductName(refVal_setProductName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("short_description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("short_description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setShortDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShortDescription);
            setShortDescription(refVal_setShortDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_active"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_active")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsActive;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsActive);
            setIsActive(refVal_setIsActive);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("token_limit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("token_limit")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTokenLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTokenLimit);
            setTokenLimit(refVal_setTokenLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("goodwill_token_limit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("goodwill_token_limit")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setGoodwillTokenLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGoodwillTokenLimit);
            setGoodwillTokenLimit(refVal_setGoodwillTokenLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("floating_token_limit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("floating_token_limit")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFloatingTokenLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFloatingTokenLimit);
            setFloatingTokenLimit(refVal_setFloatingTokenLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("enforce_floating_limit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("enforce_floating_limit")));
        if(!fieldValue.is_null())
        {
            bool refVal_setEnforceFloatingLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEnforceFloatingLimit);
            setEnforceFloatingLimit(refVal_setEnforceFloatingLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("user_limit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("user_limit")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setUserLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserLimit);
            setUserLimit(refVal_setUserLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("license_type_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("license_type_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLicenseTypeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenseTypeId);
            setLicenseTypeId(refVal_setLicenseTypeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("license_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("license_type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<LicenseTypeDto> refVal_setLicenseType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenseType);
            setLicenseType(refVal_setLicenseType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_software_release_limitation_adjustable"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_software_release_limitation_adjustable")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsSoftwareReleaseLimitationAdjustable;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsSoftwareReleaseLimitationAdjustable);
            setIsSoftwareReleaseLimitationAdjustable(refVal_setIsSoftwareReleaseLimitationAdjustable);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("software_release_limitation_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("software_release_limitation_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSoftwareReleaseLimitationId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSoftwareReleaseLimitationId);
            setSoftwareReleaseLimitationId(refVal_setSoftwareReleaseLimitationId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("allows_invalid_software_release"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("allows_invalid_software_release")));
        if(!fieldValue.is_null())
        {
            bool refVal_setAllowsInvalidSoftwareRelease;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAllowsInvalidSoftwareRelease);
            setAllowsInvalidSoftwareRelease(refVal_setAllowsInvalidSoftwareRelease);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_expiration_mode_adjustable"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_expiration_mode_adjustable")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsExpirationModeAdjustable;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsExpirationModeAdjustable);
            setIsExpirationModeAdjustable(refVal_setIsExpirationModeAdjustable);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expiration_mode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expiration_mode")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ExpirationMode> refVal_setExpirationMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExpirationMode);
            setExpirationMode(refVal_setExpirationMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expiration_date_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expiration_date_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setExpirationDateUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExpirationDateUtc);
            setExpirationDateUtc(refVal_setExpirationDateUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("valid_days_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("valid_days_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setValidDaysCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValidDaysCount);
            setValidDaysCount(refVal_setValidDaysCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("trial_days_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("trial_days_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTrialDaysCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTrialDaysCount);
            setTrialDaysCount(refVal_setTrialDaysCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("heartbeat_mode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("heartbeat_mode")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<HeartBeatMode> refVal_setHeartbeatMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHeartbeatMode);
            setHeartbeatMode(refVal_setHeartbeatMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("heartbeat_period"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("heartbeat_period")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setHeartbeatPeriod;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHeartbeatPeriod);
            setHeartbeatPeriod(refVal_setHeartbeatPeriod);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("free_ride"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("free_ride")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFreeRide;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFreeRide);
            setFreeRide(refVal_setFreeRide);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("client_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("client_type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ClientType> refVal_setClientType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClientType);
            setClientType(refVal_setClientType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("activation_upon_license_creation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("activation_upon_license_creation")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ActivationUponLicenseCreation> refVal_setActivationUponLicenseCreation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setActivationUponLicenseCreation);
            setActivationUponLicenseCreation(refVal_setActivationUponLicenseCreation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("token_ui_mode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("token_ui_mode")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TokenUiMode> refVal_setTokenUiMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTokenUiMode);
            setTokenUiMode(refVal_setTokenUiMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("features"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("features")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<TemplateFeatureDto>> refVal_setFeatures;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFeatures);
            setFeatures(refVal_setFeatures);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("limitations"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("limitations")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<TemplateLimitationDto>> refVal_setLimitations;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLimitations);
            setLimitations(refVal_setLimitations);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("variables"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("variables")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<TemplateVariableDto>> refVal_setVariables;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVariables);
            setVariables(refVal_setVariables);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("constrained_variables"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("constrained_variables")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<TemplateConstrainedVariableDto>> refVal_setConstrainedVariables;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConstrainedVariables);
            setConstrainedVariables(refVal_setConstrainedVariables);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("provisioning_mode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("provisioning_mode")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ProvisioningMode> refVal_setProvisioningMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProvisioningMode);
            setProvisioningMode(refVal_setProvisioningMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("session_period"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("session_period")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSessionPeriod;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSessionPeriod);
            setSessionPeriod(refVal_setSessionPeriod);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("max_floating_sessions_with_same_client_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("max_floating_sessions_with_same_client_id")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMaxFloatingSessionsWithSameClientId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaxFloatingSessionsWithSameClientId);
            setMaxFloatingSessionsWithSameClientId(refVal_setMaxFloatingSessionsWithSameClientId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_temporary"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_temporary")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsTemporary;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsTemporary);
            setIsTemporary(refVal_setIsTemporary);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("has_strict_heartbeats"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("has_strict_heartbeats")));
        if(!fieldValue.is_null())
        {
            bool refVal_setHasStrictHeartbeats;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHasStrictHeartbeats);
            setHasStrictHeartbeats(refVal_setHasStrictHeartbeats);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_date_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_date_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedDateUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedDateUtc);
            setCreatedDateUtc(refVal_setCreatedDateUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("modified_date_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("modified_date_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setModifiedDateUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModifiedDateUtc);
            setModifiedDateUtc(refVal_setModifiedDateUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("last_modified_by"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("last_modified_by")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLastModifiedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastModifiedBy);
            setLastModifiedBy(refVal_setLastModifiedBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("software_release_limitation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("software_release_limitation")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SoftwareReleaseLimitationDto> refVal_setSoftwareReleaseLimitation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSoftwareReleaseLimitation);
            setSoftwareReleaseLimitation(refVal_setSoftwareReleaseLimitation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("supports_license_user_groups"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("supports_license_user_groups")));
        if(!fieldValue.is_null())
        {
            bool refVal_setSupportsLicenseUserGroups;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSupportsLicenseUserGroups);
            setSupportsLicenseUserGroups(refVal_setSupportsLicenseUserGroups);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("heartbeat_sampling_rate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("heartbeat_sampling_rate")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setHeartbeatSamplingRate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHeartbeatSamplingRate);
            setHeartbeatSamplingRate(refVal_setHeartbeatSamplingRate);
        }
    }
    return ok;
}

void TemplateDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_Product_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("product_id")), m_Product_id));
    }
    if(m_Product_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("product_name")), m_Product_name));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_Short_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("short_description")), m_Short_description));
    }
    if(m_Is_activeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_active")), m_Is_active));
    }
    if(m_Token_limitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("token_limit")), m_Token_limit));
    }
    if(m_Goodwill_token_limitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("goodwill_token_limit")), m_Goodwill_token_limit));
    }
    if(m_Floating_token_limitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("floating_token_limit")), m_Floating_token_limit));
    }
    if(m_Enforce_floating_limitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("enforce_floating_limit")), m_Enforce_floating_limit));
    }
    if(m_User_limitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("user_limit")), m_User_limit));
    }
    if(m_License_type_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("license_type_id")), m_License_type_id));
    }
    if(m_License_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("license_type")), m_License_type));
    }
    if(m_Is_software_release_limitation_adjustableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_software_release_limitation_adjustable")), m_Is_software_release_limitation_adjustable));
    }
    if(m_Software_release_limitation_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("software_release_limitation_id")), m_Software_release_limitation_id));
    }
    if(m_Allows_invalid_software_releaseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("allows_invalid_software_release")), m_Allows_invalid_software_release));
    }
    if(m_Is_expiration_mode_adjustableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_expiration_mode_adjustable")), m_Is_expiration_mode_adjustable));
    }
    if(m_Expiration_modeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expiration_mode")), m_Expiration_mode));
    }
    if(m_Expiration_date_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expiration_date_utc")), m_Expiration_date_utc));
    }
    if(m_Valid_days_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("valid_days_count")), m_Valid_days_count));
    }
    if(m_Trial_days_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("trial_days_count")), m_Trial_days_count));
    }
    if(m_Heartbeat_modeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("heartbeat_mode")), m_Heartbeat_mode));
    }
    if(m_Heartbeat_periodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("heartbeat_period")), m_Heartbeat_period));
    }
    if(m_Free_rideIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("free_ride")), m_Free_ride));
    }
    if(m_Client_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("client_type")), m_Client_type));
    }
    if(m_Activation_upon_license_creationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("activation_upon_license_creation")), m_Activation_upon_license_creation));
    }
    if(m_Token_ui_modeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("token_ui_mode")), m_Token_ui_mode));
    }
    if(m_FeaturesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("features")), m_Features));
    }
    if(m_LimitationsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("limitations")), m_Limitations));
    }
    if(m_VariablesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("variables")), m_Variables));
    }
    if(m_Constrained_variablesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("constrained_variables")), m_Constrained_variables));
    }
    if(m_Provisioning_modeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("provisioning_mode")), m_Provisioning_mode));
    }
    if(m_Session_periodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("session_period")), m_Session_period));
    }
    if(m_Max_floating_sessions_with_same_client_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("max_floating_sessions_with_same_client_id")), m_Max_floating_sessions_with_same_client_id));
    }
    if(m_Is_temporaryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_temporary")), m_Is_temporary));
    }
    if(m_Has_strict_heartbeatsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("has_strict_heartbeats")), m_Has_strict_heartbeats));
    }
    if(m_Created_date_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_date_utc")), m_Created_date_utc));
    }
    if(m_Modified_date_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("modified_date_utc")), m_Modified_date_utc));
    }
    if(m_Last_modified_byIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("last_modified_by")), m_Last_modified_by));
    }
    if(m_Software_release_limitationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("software_release_limitation")), m_Software_release_limitation));
    }
    if(m_Supports_license_user_groupsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("supports_license_user_groups")), m_Supports_license_user_groups));
    }
    if(m_Heartbeat_sampling_rateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("heartbeat_sampling_rate")), m_Heartbeat_sampling_rate));
    }
}

bool TemplateDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("product_id"))))
    {
        utility::string_t refVal_setProductId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("product_id"))), refVal_setProductId );
        setProductId(refVal_setProductId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("product_name"))))
    {
        utility::string_t refVal_setProductName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("product_name"))), refVal_setProductName );
        setProductName(refVal_setProductName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("short_description"))))
    {
        utility::string_t refVal_setShortDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("short_description"))), refVal_setShortDescription );
        setShortDescription(refVal_setShortDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_active"))))
    {
        bool refVal_setIsActive;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_active"))), refVal_setIsActive );
        setIsActive(refVal_setIsActive);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("token_limit"))))
    {
        int32_t refVal_setTokenLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("token_limit"))), refVal_setTokenLimit );
        setTokenLimit(refVal_setTokenLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("goodwill_token_limit"))))
    {
        int32_t refVal_setGoodwillTokenLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("goodwill_token_limit"))), refVal_setGoodwillTokenLimit );
        setGoodwillTokenLimit(refVal_setGoodwillTokenLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("floating_token_limit"))))
    {
        int32_t refVal_setFloatingTokenLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("floating_token_limit"))), refVal_setFloatingTokenLimit );
        setFloatingTokenLimit(refVal_setFloatingTokenLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("enforce_floating_limit"))))
    {
        bool refVal_setEnforceFloatingLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("enforce_floating_limit"))), refVal_setEnforceFloatingLimit );
        setEnforceFloatingLimit(refVal_setEnforceFloatingLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("user_limit"))))
    {
        int32_t refVal_setUserLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("user_limit"))), refVal_setUserLimit );
        setUserLimit(refVal_setUserLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("license_type_id"))))
    {
        utility::string_t refVal_setLicenseTypeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("license_type_id"))), refVal_setLicenseTypeId );
        setLicenseTypeId(refVal_setLicenseTypeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("license_type"))))
    {
        std::shared_ptr<LicenseTypeDto> refVal_setLicenseType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("license_type"))), refVal_setLicenseType );
        setLicenseType(refVal_setLicenseType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_software_release_limitation_adjustable"))))
    {
        bool refVal_setIsSoftwareReleaseLimitationAdjustable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_software_release_limitation_adjustable"))), refVal_setIsSoftwareReleaseLimitationAdjustable );
        setIsSoftwareReleaseLimitationAdjustable(refVal_setIsSoftwareReleaseLimitationAdjustable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("software_release_limitation_id"))))
    {
        utility::string_t refVal_setSoftwareReleaseLimitationId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("software_release_limitation_id"))), refVal_setSoftwareReleaseLimitationId );
        setSoftwareReleaseLimitationId(refVal_setSoftwareReleaseLimitationId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("allows_invalid_software_release"))))
    {
        bool refVal_setAllowsInvalidSoftwareRelease;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("allows_invalid_software_release"))), refVal_setAllowsInvalidSoftwareRelease );
        setAllowsInvalidSoftwareRelease(refVal_setAllowsInvalidSoftwareRelease);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_expiration_mode_adjustable"))))
    {
        bool refVal_setIsExpirationModeAdjustable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_expiration_mode_adjustable"))), refVal_setIsExpirationModeAdjustable );
        setIsExpirationModeAdjustable(refVal_setIsExpirationModeAdjustable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expiration_mode"))))
    {
        std::shared_ptr<ExpirationMode> refVal_setExpirationMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expiration_mode"))), refVal_setExpirationMode );
        setExpirationMode(refVal_setExpirationMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expiration_date_utc"))))
    {
        utility::datetime refVal_setExpirationDateUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expiration_date_utc"))), refVal_setExpirationDateUtc );
        setExpirationDateUtc(refVal_setExpirationDateUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("valid_days_count"))))
    {
        int32_t refVal_setValidDaysCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("valid_days_count"))), refVal_setValidDaysCount );
        setValidDaysCount(refVal_setValidDaysCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("trial_days_count"))))
    {
        int32_t refVal_setTrialDaysCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("trial_days_count"))), refVal_setTrialDaysCount );
        setTrialDaysCount(refVal_setTrialDaysCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("heartbeat_mode"))))
    {
        std::shared_ptr<HeartBeatMode> refVal_setHeartbeatMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("heartbeat_mode"))), refVal_setHeartbeatMode );
        setHeartbeatMode(refVal_setHeartbeatMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("heartbeat_period"))))
    {
        int32_t refVal_setHeartbeatPeriod;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("heartbeat_period"))), refVal_setHeartbeatPeriod );
        setHeartbeatPeriod(refVal_setHeartbeatPeriod);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("free_ride"))))
    {
        int32_t refVal_setFreeRide;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("free_ride"))), refVal_setFreeRide );
        setFreeRide(refVal_setFreeRide);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("client_type"))))
    {
        std::shared_ptr<ClientType> refVal_setClientType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("client_type"))), refVal_setClientType );
        setClientType(refVal_setClientType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("activation_upon_license_creation"))))
    {
        std::shared_ptr<ActivationUponLicenseCreation> refVal_setActivationUponLicenseCreation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("activation_upon_license_creation"))), refVal_setActivationUponLicenseCreation );
        setActivationUponLicenseCreation(refVal_setActivationUponLicenseCreation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("token_ui_mode"))))
    {
        std::shared_ptr<TokenUiMode> refVal_setTokenUiMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("token_ui_mode"))), refVal_setTokenUiMode );
        setTokenUiMode(refVal_setTokenUiMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("features"))))
    {
        std::vector<std::shared_ptr<TemplateFeatureDto>> refVal_setFeatures;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("features"))), refVal_setFeatures );
        setFeatures(refVal_setFeatures);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("limitations"))))
    {
        std::vector<std::shared_ptr<TemplateLimitationDto>> refVal_setLimitations;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("limitations"))), refVal_setLimitations );
        setLimitations(refVal_setLimitations);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("variables"))))
    {
        std::vector<std::shared_ptr<TemplateVariableDto>> refVal_setVariables;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("variables"))), refVal_setVariables );
        setVariables(refVal_setVariables);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("constrained_variables"))))
    {
        std::vector<std::shared_ptr<TemplateConstrainedVariableDto>> refVal_setConstrainedVariables;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("constrained_variables"))), refVal_setConstrainedVariables );
        setConstrainedVariables(refVal_setConstrainedVariables);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("provisioning_mode"))))
    {
        std::shared_ptr<ProvisioningMode> refVal_setProvisioningMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("provisioning_mode"))), refVal_setProvisioningMode );
        setProvisioningMode(refVal_setProvisioningMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("session_period"))))
    {
        int32_t refVal_setSessionPeriod;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("session_period"))), refVal_setSessionPeriod );
        setSessionPeriod(refVal_setSessionPeriod);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("max_floating_sessions_with_same_client_id"))))
    {
        int32_t refVal_setMaxFloatingSessionsWithSameClientId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("max_floating_sessions_with_same_client_id"))), refVal_setMaxFloatingSessionsWithSameClientId );
        setMaxFloatingSessionsWithSameClientId(refVal_setMaxFloatingSessionsWithSameClientId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_temporary"))))
    {
        bool refVal_setIsTemporary;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_temporary"))), refVal_setIsTemporary );
        setIsTemporary(refVal_setIsTemporary);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("has_strict_heartbeats"))))
    {
        bool refVal_setHasStrictHeartbeats;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("has_strict_heartbeats"))), refVal_setHasStrictHeartbeats );
        setHasStrictHeartbeats(refVal_setHasStrictHeartbeats);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_date_utc"))))
    {
        utility::datetime refVal_setCreatedDateUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_date_utc"))), refVal_setCreatedDateUtc );
        setCreatedDateUtc(refVal_setCreatedDateUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("modified_date_utc"))))
    {
        utility::datetime refVal_setModifiedDateUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("modified_date_utc"))), refVal_setModifiedDateUtc );
        setModifiedDateUtc(refVal_setModifiedDateUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("last_modified_by"))))
    {
        utility::string_t refVal_setLastModifiedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("last_modified_by"))), refVal_setLastModifiedBy );
        setLastModifiedBy(refVal_setLastModifiedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("software_release_limitation"))))
    {
        std::shared_ptr<SoftwareReleaseLimitationDto> refVal_setSoftwareReleaseLimitation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("software_release_limitation"))), refVal_setSoftwareReleaseLimitation );
        setSoftwareReleaseLimitation(refVal_setSoftwareReleaseLimitation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("supports_license_user_groups"))))
    {
        bool refVal_setSupportsLicenseUserGroups;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("supports_license_user_groups"))), refVal_setSupportsLicenseUserGroups );
        setSupportsLicenseUserGroups(refVal_setSupportsLicenseUserGroups);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("heartbeat_sampling_rate"))))
    {
        int32_t refVal_setHeartbeatSamplingRate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("heartbeat_sampling_rate"))), refVal_setHeartbeatSamplingRate );
        setHeartbeatSamplingRate(refVal_setHeartbeatSamplingRate);
    }
    return ok;
}

utility::string_t TemplateDto::getId() const
{
    return m_Id;
}

void TemplateDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool TemplateDto::idIsSet() const
{
    return m_IdIsSet;
}

void TemplateDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t TemplateDto::getProductId() const
{
    return m_Product_id;
}

void TemplateDto::setProductId(const utility::string_t& value)
{
    m_Product_id = value;
    m_Product_idIsSet = true;
}

bool TemplateDto::productIdIsSet() const
{
    return m_Product_idIsSet;
}

void TemplateDto::unsetProduct_id()
{
    m_Product_idIsSet = false;
}
utility::string_t TemplateDto::getProductName() const
{
    return m_Product_name;
}

void TemplateDto::setProductName(const utility::string_t& value)
{
    m_Product_name = value;
    m_Product_nameIsSet = true;
}

bool TemplateDto::productNameIsSet() const
{
    return m_Product_nameIsSet;
}

void TemplateDto::unsetProduct_name()
{
    m_Product_nameIsSet = false;
}
utility::string_t TemplateDto::getName() const
{
    return m_Name;
}

void TemplateDto::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool TemplateDto::nameIsSet() const
{
    return m_NameIsSet;
}

void TemplateDto::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t TemplateDto::getDescription() const
{
    return m_Description;
}

void TemplateDto::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool TemplateDto::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void TemplateDto::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t TemplateDto::getShortDescription() const
{
    return m_Short_description;
}

void TemplateDto::setShortDescription(const utility::string_t& value)
{
    m_Short_description = value;
    m_Short_descriptionIsSet = true;
}

bool TemplateDto::shortDescriptionIsSet() const
{
    return m_Short_descriptionIsSet;
}

void TemplateDto::unsetShort_description()
{
    m_Short_descriptionIsSet = false;
}
bool TemplateDto::isIsActive() const
{
    return m_Is_active;
}

void TemplateDto::setIsActive(bool value)
{
    m_Is_active = value;
    m_Is_activeIsSet = true;
}

bool TemplateDto::isActiveIsSet() const
{
    return m_Is_activeIsSet;
}

void TemplateDto::unsetIs_active()
{
    m_Is_activeIsSet = false;
}
int32_t TemplateDto::getTokenLimit() const
{
    return m_Token_limit;
}

void TemplateDto::setTokenLimit(int32_t value)
{
    m_Token_limit = value;
    m_Token_limitIsSet = true;
}

bool TemplateDto::tokenLimitIsSet() const
{
    return m_Token_limitIsSet;
}

void TemplateDto::unsetToken_limit()
{
    m_Token_limitIsSet = false;
}
int32_t TemplateDto::getGoodwillTokenLimit() const
{
    return m_Goodwill_token_limit;
}

void TemplateDto::setGoodwillTokenLimit(int32_t value)
{
    m_Goodwill_token_limit = value;
    m_Goodwill_token_limitIsSet = true;
}

bool TemplateDto::goodwillTokenLimitIsSet() const
{
    return m_Goodwill_token_limitIsSet;
}

void TemplateDto::unsetGoodwill_token_limit()
{
    m_Goodwill_token_limitIsSet = false;
}
int32_t TemplateDto::getFloatingTokenLimit() const
{
    return m_Floating_token_limit;
}

void TemplateDto::setFloatingTokenLimit(int32_t value)
{
    m_Floating_token_limit = value;
    m_Floating_token_limitIsSet = true;
}

bool TemplateDto::floatingTokenLimitIsSet() const
{
    return m_Floating_token_limitIsSet;
}

void TemplateDto::unsetFloating_token_limit()
{
    m_Floating_token_limitIsSet = false;
}
bool TemplateDto::isEnforceFloatingLimit() const
{
    return m_Enforce_floating_limit;
}

void TemplateDto::setEnforceFloatingLimit(bool value)
{
    m_Enforce_floating_limit = value;
    m_Enforce_floating_limitIsSet = true;
}

bool TemplateDto::enforceFloatingLimitIsSet() const
{
    return m_Enforce_floating_limitIsSet;
}

void TemplateDto::unsetEnforce_floating_limit()
{
    m_Enforce_floating_limitIsSet = false;
}
int32_t TemplateDto::getUserLimit() const
{
    return m_User_limit;
}

void TemplateDto::setUserLimit(int32_t value)
{
    m_User_limit = value;
    m_User_limitIsSet = true;
}

bool TemplateDto::userLimitIsSet() const
{
    return m_User_limitIsSet;
}

void TemplateDto::unsetUser_limit()
{
    m_User_limitIsSet = false;
}
utility::string_t TemplateDto::getLicenseTypeId() const
{
    return m_License_type_id;
}

void TemplateDto::setLicenseTypeId(const utility::string_t& value)
{
    m_License_type_id = value;
    m_License_type_idIsSet = true;
}

bool TemplateDto::licenseTypeIdIsSet() const
{
    return m_License_type_idIsSet;
}

void TemplateDto::unsetLicense_type_id()
{
    m_License_type_idIsSet = false;
}
std::shared_ptr<LicenseTypeDto> TemplateDto::getLicenseType() const
{
    return m_License_type;
}

void TemplateDto::setLicenseType(const std::shared_ptr<LicenseTypeDto>& value)
{
    m_License_type = value;
    m_License_typeIsSet = true;
}

bool TemplateDto::licenseTypeIsSet() const
{
    return m_License_typeIsSet;
}

void TemplateDto::unsetLicense_type()
{
    m_License_typeIsSet = false;
}
bool TemplateDto::isIsSoftwareReleaseLimitationAdjustable() const
{
    return m_Is_software_release_limitation_adjustable;
}

void TemplateDto::setIsSoftwareReleaseLimitationAdjustable(bool value)
{
    m_Is_software_release_limitation_adjustable = value;
    m_Is_software_release_limitation_adjustableIsSet = true;
}

bool TemplateDto::isSoftwareReleaseLimitationAdjustableIsSet() const
{
    return m_Is_software_release_limitation_adjustableIsSet;
}

void TemplateDto::unsetIs_software_release_limitation_adjustable()
{
    m_Is_software_release_limitation_adjustableIsSet = false;
}
utility::string_t TemplateDto::getSoftwareReleaseLimitationId() const
{
    return m_Software_release_limitation_id;
}

void TemplateDto::setSoftwareReleaseLimitationId(const utility::string_t& value)
{
    m_Software_release_limitation_id = value;
    m_Software_release_limitation_idIsSet = true;
}

bool TemplateDto::softwareReleaseLimitationIdIsSet() const
{
    return m_Software_release_limitation_idIsSet;
}

void TemplateDto::unsetSoftware_release_limitation_id()
{
    m_Software_release_limitation_idIsSet = false;
}
bool TemplateDto::isAllowsInvalidSoftwareRelease() const
{
    return m_Allows_invalid_software_release;
}

void TemplateDto::setAllowsInvalidSoftwareRelease(bool value)
{
    m_Allows_invalid_software_release = value;
    m_Allows_invalid_software_releaseIsSet = true;
}

bool TemplateDto::allowsInvalidSoftwareReleaseIsSet() const
{
    return m_Allows_invalid_software_releaseIsSet;
}

void TemplateDto::unsetAllows_invalid_software_release()
{
    m_Allows_invalid_software_releaseIsSet = false;
}
bool TemplateDto::isIsExpirationModeAdjustable() const
{
    return m_Is_expiration_mode_adjustable;
}

void TemplateDto::setIsExpirationModeAdjustable(bool value)
{
    m_Is_expiration_mode_adjustable = value;
    m_Is_expiration_mode_adjustableIsSet = true;
}

bool TemplateDto::isExpirationModeAdjustableIsSet() const
{
    return m_Is_expiration_mode_adjustableIsSet;
}

void TemplateDto::unsetIs_expiration_mode_adjustable()
{
    m_Is_expiration_mode_adjustableIsSet = false;
}
std::shared_ptr<ExpirationMode> TemplateDto::getExpirationMode() const
{
    return m_Expiration_mode;
}

void TemplateDto::setExpirationMode(const std::shared_ptr<ExpirationMode>& value)
{
    m_Expiration_mode = value;
    m_Expiration_modeIsSet = true;
}

bool TemplateDto::expirationModeIsSet() const
{
    return m_Expiration_modeIsSet;
}

void TemplateDto::unsetExpiration_mode()
{
    m_Expiration_modeIsSet = false;
}
utility::datetime TemplateDto::getExpirationDateUtc() const
{
    return m_Expiration_date_utc;
}

void TemplateDto::setExpirationDateUtc(const utility::datetime& value)
{
    m_Expiration_date_utc = value;
    m_Expiration_date_utcIsSet = true;
}

bool TemplateDto::expirationDateUtcIsSet() const
{
    return m_Expiration_date_utcIsSet;
}

void TemplateDto::unsetExpiration_date_utc()
{
    m_Expiration_date_utcIsSet = false;
}
int32_t TemplateDto::getValidDaysCount() const
{
    return m_Valid_days_count;
}

void TemplateDto::setValidDaysCount(int32_t value)
{
    m_Valid_days_count = value;
    m_Valid_days_countIsSet = true;
}

bool TemplateDto::validDaysCountIsSet() const
{
    return m_Valid_days_countIsSet;
}

void TemplateDto::unsetValid_days_count()
{
    m_Valid_days_countIsSet = false;
}
int32_t TemplateDto::getTrialDaysCount() const
{
    return m_Trial_days_count;
}

void TemplateDto::setTrialDaysCount(int32_t value)
{
    m_Trial_days_count = value;
    m_Trial_days_countIsSet = true;
}

bool TemplateDto::trialDaysCountIsSet() const
{
    return m_Trial_days_countIsSet;
}

void TemplateDto::unsetTrial_days_count()
{
    m_Trial_days_countIsSet = false;
}
std::shared_ptr<HeartBeatMode> TemplateDto::getHeartbeatMode() const
{
    return m_Heartbeat_mode;
}

void TemplateDto::setHeartbeatMode(const std::shared_ptr<HeartBeatMode>& value)
{
    m_Heartbeat_mode = value;
    m_Heartbeat_modeIsSet = true;
}

bool TemplateDto::heartbeatModeIsSet() const
{
    return m_Heartbeat_modeIsSet;
}

void TemplateDto::unsetHeartbeat_mode()
{
    m_Heartbeat_modeIsSet = false;
}
int32_t TemplateDto::getHeartbeatPeriod() const
{
    return m_Heartbeat_period;
}

void TemplateDto::setHeartbeatPeriod(int32_t value)
{
    m_Heartbeat_period = value;
    m_Heartbeat_periodIsSet = true;
}

bool TemplateDto::heartbeatPeriodIsSet() const
{
    return m_Heartbeat_periodIsSet;
}

void TemplateDto::unsetHeartbeat_period()
{
    m_Heartbeat_periodIsSet = false;
}
int32_t TemplateDto::getFreeRide() const
{
    return m_Free_ride;
}

void TemplateDto::setFreeRide(int32_t value)
{
    m_Free_ride = value;
    m_Free_rideIsSet = true;
}

bool TemplateDto::freeRideIsSet() const
{
    return m_Free_rideIsSet;
}

void TemplateDto::unsetFree_ride()
{
    m_Free_rideIsSet = false;
}
std::shared_ptr<ClientType> TemplateDto::getClientType() const
{
    return m_Client_type;
}

void TemplateDto::setClientType(const std::shared_ptr<ClientType>& value)
{
    m_Client_type = value;
    m_Client_typeIsSet = true;
}

bool TemplateDto::clientTypeIsSet() const
{
    return m_Client_typeIsSet;
}

void TemplateDto::unsetClient_type()
{
    m_Client_typeIsSet = false;
}
std::shared_ptr<ActivationUponLicenseCreation> TemplateDto::getActivationUponLicenseCreation() const
{
    return m_Activation_upon_license_creation;
}

void TemplateDto::setActivationUponLicenseCreation(const std::shared_ptr<ActivationUponLicenseCreation>& value)
{
    m_Activation_upon_license_creation = value;
    m_Activation_upon_license_creationIsSet = true;
}

bool TemplateDto::activationUponLicenseCreationIsSet() const
{
    return m_Activation_upon_license_creationIsSet;
}

void TemplateDto::unsetActivation_upon_license_creation()
{
    m_Activation_upon_license_creationIsSet = false;
}
std::shared_ptr<TokenUiMode> TemplateDto::getTokenUiMode() const
{
    return m_Token_ui_mode;
}

void TemplateDto::setTokenUiMode(const std::shared_ptr<TokenUiMode>& value)
{
    m_Token_ui_mode = value;
    m_Token_ui_modeIsSet = true;
}

bool TemplateDto::tokenUiModeIsSet() const
{
    return m_Token_ui_modeIsSet;
}

void TemplateDto::unsetToken_ui_mode()
{
    m_Token_ui_modeIsSet = false;
}
std::vector<std::shared_ptr<TemplateFeatureDto>>& TemplateDto::getFeatures()
{
    return m_Features;
}

void TemplateDto::setFeatures(const std::vector<std::shared_ptr<TemplateFeatureDto>>& value)
{
    m_Features = value;
    m_FeaturesIsSet = true;
}

bool TemplateDto::featuresIsSet() const
{
    return m_FeaturesIsSet;
}

void TemplateDto::unsetFeatures()
{
    m_FeaturesIsSet = false;
}
std::vector<std::shared_ptr<TemplateLimitationDto>>& TemplateDto::getLimitations()
{
    return m_Limitations;
}

void TemplateDto::setLimitations(const std::vector<std::shared_ptr<TemplateLimitationDto>>& value)
{
    m_Limitations = value;
    m_LimitationsIsSet = true;
}

bool TemplateDto::limitationsIsSet() const
{
    return m_LimitationsIsSet;
}

void TemplateDto::unsetLimitations()
{
    m_LimitationsIsSet = false;
}
std::vector<std::shared_ptr<TemplateVariableDto>>& TemplateDto::getVariables()
{
    return m_Variables;
}

void TemplateDto::setVariables(const std::vector<std::shared_ptr<TemplateVariableDto>>& value)
{
    m_Variables = value;
    m_VariablesIsSet = true;
}

bool TemplateDto::variablesIsSet() const
{
    return m_VariablesIsSet;
}

void TemplateDto::unsetVariables()
{
    m_VariablesIsSet = false;
}
std::vector<std::shared_ptr<TemplateConstrainedVariableDto>>& TemplateDto::getConstrainedVariables()
{
    return m_Constrained_variables;
}

void TemplateDto::setConstrainedVariables(const std::vector<std::shared_ptr<TemplateConstrainedVariableDto>>& value)
{
    m_Constrained_variables = value;
    m_Constrained_variablesIsSet = true;
}

bool TemplateDto::constrainedVariablesIsSet() const
{
    return m_Constrained_variablesIsSet;
}

void TemplateDto::unsetConstrained_variables()
{
    m_Constrained_variablesIsSet = false;
}
std::shared_ptr<ProvisioningMode> TemplateDto::getProvisioningMode() const
{
    return m_Provisioning_mode;
}

void TemplateDto::setProvisioningMode(const std::shared_ptr<ProvisioningMode>& value)
{
    m_Provisioning_mode = value;
    m_Provisioning_modeIsSet = true;
}

bool TemplateDto::provisioningModeIsSet() const
{
    return m_Provisioning_modeIsSet;
}

void TemplateDto::unsetProvisioning_mode()
{
    m_Provisioning_modeIsSet = false;
}
int32_t TemplateDto::getSessionPeriod() const
{
    return m_Session_period;
}

void TemplateDto::setSessionPeriod(int32_t value)
{
    m_Session_period = value;
    m_Session_periodIsSet = true;
}

bool TemplateDto::sessionPeriodIsSet() const
{
    return m_Session_periodIsSet;
}

void TemplateDto::unsetSession_period()
{
    m_Session_periodIsSet = false;
}
int32_t TemplateDto::getMaxFloatingSessionsWithSameClientId() const
{
    return m_Max_floating_sessions_with_same_client_id;
}

void TemplateDto::setMaxFloatingSessionsWithSameClientId(int32_t value)
{
    m_Max_floating_sessions_with_same_client_id = value;
    m_Max_floating_sessions_with_same_client_idIsSet = true;
}

bool TemplateDto::maxFloatingSessionsWithSameClientIdIsSet() const
{
    return m_Max_floating_sessions_with_same_client_idIsSet;
}

void TemplateDto::unsetMax_floating_sessions_with_same_client_id()
{
    m_Max_floating_sessions_with_same_client_idIsSet = false;
}
bool TemplateDto::isIsTemporary() const
{
    return m_Is_temporary;
}

void TemplateDto::setIsTemporary(bool value)
{
    m_Is_temporary = value;
    m_Is_temporaryIsSet = true;
}

bool TemplateDto::isTemporaryIsSet() const
{
    return m_Is_temporaryIsSet;
}

void TemplateDto::unsetIs_temporary()
{
    m_Is_temporaryIsSet = false;
}
bool TemplateDto::isHasStrictHeartbeats() const
{
    return m_Has_strict_heartbeats;
}

void TemplateDto::setHasStrictHeartbeats(bool value)
{
    m_Has_strict_heartbeats = value;
    m_Has_strict_heartbeatsIsSet = true;
}

bool TemplateDto::hasStrictHeartbeatsIsSet() const
{
    return m_Has_strict_heartbeatsIsSet;
}

void TemplateDto::unsetHas_strict_heartbeats()
{
    m_Has_strict_heartbeatsIsSet = false;
}
utility::datetime TemplateDto::getCreatedDateUtc() const
{
    return m_Created_date_utc;
}

void TemplateDto::setCreatedDateUtc(const utility::datetime& value)
{
    m_Created_date_utc = value;
    m_Created_date_utcIsSet = true;
}

bool TemplateDto::createdDateUtcIsSet() const
{
    return m_Created_date_utcIsSet;
}

void TemplateDto::unsetCreated_date_utc()
{
    m_Created_date_utcIsSet = false;
}
utility::datetime TemplateDto::getModifiedDateUtc() const
{
    return m_Modified_date_utc;
}

void TemplateDto::setModifiedDateUtc(const utility::datetime& value)
{
    m_Modified_date_utc = value;
    m_Modified_date_utcIsSet = true;
}

bool TemplateDto::modifiedDateUtcIsSet() const
{
    return m_Modified_date_utcIsSet;
}

void TemplateDto::unsetModified_date_utc()
{
    m_Modified_date_utcIsSet = false;
}
utility::string_t TemplateDto::getLastModifiedBy() const
{
    return m_Last_modified_by;
}

void TemplateDto::setLastModifiedBy(const utility::string_t& value)
{
    m_Last_modified_by = value;
    m_Last_modified_byIsSet = true;
}

bool TemplateDto::lastModifiedByIsSet() const
{
    return m_Last_modified_byIsSet;
}

void TemplateDto::unsetLast_modified_by()
{
    m_Last_modified_byIsSet = false;
}
std::shared_ptr<SoftwareReleaseLimitationDto> TemplateDto::getSoftwareReleaseLimitation() const
{
    return m_Software_release_limitation;
}

void TemplateDto::setSoftwareReleaseLimitation(const std::shared_ptr<SoftwareReleaseLimitationDto>& value)
{
    m_Software_release_limitation = value;
    m_Software_release_limitationIsSet = true;
}

bool TemplateDto::softwareReleaseLimitationIsSet() const
{
    return m_Software_release_limitationIsSet;
}

void TemplateDto::unsetSoftware_release_limitation()
{
    m_Software_release_limitationIsSet = false;
}
bool TemplateDto::isSupportsLicenseUserGroups() const
{
    return m_Supports_license_user_groups;
}

void TemplateDto::setSupportsLicenseUserGroups(bool value)
{
    m_Supports_license_user_groups = value;
    m_Supports_license_user_groupsIsSet = true;
}

bool TemplateDto::supportsLicenseUserGroupsIsSet() const
{
    return m_Supports_license_user_groupsIsSet;
}

void TemplateDto::unsetSupports_license_user_groups()
{
    m_Supports_license_user_groupsIsSet = false;
}
int32_t TemplateDto::getHeartbeatSamplingRate() const
{
    return m_Heartbeat_sampling_rate;
}

void TemplateDto::setHeartbeatSamplingRate(int32_t value)
{
    m_Heartbeat_sampling_rate = value;
    m_Heartbeat_sampling_rateIsSet = true;
}

bool TemplateDto::heartbeatSamplingRateIsSet() const
{
    return m_Heartbeat_sampling_rateIsSet;
}

void TemplateDto::unsetHeartbeat_sampling_rate()
{
    m_Heartbeat_sampling_rateIsSet = false;
}
}
}
}
}


