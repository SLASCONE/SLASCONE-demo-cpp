/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/LicenseSubscriptionPlanDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



LicenseSubscriptionPlanDto::LicenseSubscriptionPlanDto()
{
    m_Expiration_date_utc = utility::datetime();
    m_Expiration_date_utcIsSet = false;
    m_Expiration_modeIsSet = false;
    m_Valid_days_count = 0;
    m_Valid_days_countIsSet = false;
    m_Trial_days_count = 0;
    m_Trial_days_countIsSet = false;
    m_Is_active = false;
    m_Is_activeIsSet = false;
    m_Is_expired = false;
    m_Is_expiredIsSet = false;
    m_Is_valid = false;
    m_Is_validIsSet = false;
    m_Is_software_release_valid = false;
    m_Is_software_release_validIsSet = false;
    m_Is_group_valid = false;
    m_Is_group_validIsSet = false;
    m_Group_count = 0;
    m_Group_countIsSet = false;
    m_Date_of_issue_utc = utility::datetime();
    m_Date_of_issue_utcIsSet = false;
}

LicenseSubscriptionPlanDto::~LicenseSubscriptionPlanDto()
{
}

void LicenseSubscriptionPlanDto::validate()
{
    // TODO: implement validation
}

web::json::value LicenseSubscriptionPlanDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Expiration_date_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("expiration_date_utc"))] = ModelBase::toJson(m_Expiration_date_utc);
    }
    if(m_Expiration_modeIsSet)
    {
        val[utility::conversions::to_string_t(U("expiration_mode"))] = ModelBase::toJson(m_Expiration_mode);
    }
    if(m_Valid_days_countIsSet)
    {
        val[utility::conversions::to_string_t(U("valid_days_count"))] = ModelBase::toJson(m_Valid_days_count);
    }
    if(m_Trial_days_countIsSet)
    {
        val[utility::conversions::to_string_t(U("trial_days_count"))] = ModelBase::toJson(m_Trial_days_count);
    }
    if(m_Is_activeIsSet)
    {
        val[utility::conversions::to_string_t(U("is_active"))] = ModelBase::toJson(m_Is_active);
    }
    if(m_Is_expiredIsSet)
    {
        val[utility::conversions::to_string_t(U("is_expired"))] = ModelBase::toJson(m_Is_expired);
    }
    if(m_Is_validIsSet)
    {
        val[utility::conversions::to_string_t(U("is_valid"))] = ModelBase::toJson(m_Is_valid);
    }
    if(m_Is_software_release_validIsSet)
    {
        val[utility::conversions::to_string_t(U("is_software_release_valid"))] = ModelBase::toJson(m_Is_software_release_valid);
    }
    if(m_Is_group_validIsSet)
    {
        val[utility::conversions::to_string_t(U("is_group_valid"))] = ModelBase::toJson(m_Is_group_valid);
    }
    if(m_Group_countIsSet)
    {
        val[utility::conversions::to_string_t(U("group_count"))] = ModelBase::toJson(m_Group_count);
    }
    if(m_Date_of_issue_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("date_of_issue_utc"))] = ModelBase::toJson(m_Date_of_issue_utc);
    }

    return val;
}

bool LicenseSubscriptionPlanDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("expiration_date_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expiration_date_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setExpirationDateUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExpirationDateUtc);
            setExpirationDateUtc(refVal_setExpirationDateUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expiration_mode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expiration_mode")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ExpirationMode> refVal_setExpirationMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExpirationMode);
            setExpirationMode(refVal_setExpirationMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("valid_days_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("valid_days_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setValidDaysCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValidDaysCount);
            setValidDaysCount(refVal_setValidDaysCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("trial_days_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("trial_days_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTrialDaysCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTrialDaysCount);
            setTrialDaysCount(refVal_setTrialDaysCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_active"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_active")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsActive;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsActive);
            setIsActive(refVal_setIsActive);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_expired"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_expired")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsExpired;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsExpired);
            setIsExpired(refVal_setIsExpired);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_valid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_valid")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsValid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsValid);
            setIsValid(refVal_setIsValid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_software_release_valid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_software_release_valid")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsSoftwareReleaseValid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsSoftwareReleaseValid);
            setIsSoftwareReleaseValid(refVal_setIsSoftwareReleaseValid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_group_valid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_group_valid")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsGroupValid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsGroupValid);
            setIsGroupValid(refVal_setIsGroupValid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("group_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("group_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setGroupCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGroupCount);
            setGroupCount(refVal_setGroupCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("date_of_issue_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("date_of_issue_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDateOfIssueUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateOfIssueUtc);
            setDateOfIssueUtc(refVal_setDateOfIssueUtc);
        }
    }
    return ok;
}

void LicenseSubscriptionPlanDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Expiration_date_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expiration_date_utc")), m_Expiration_date_utc));
    }
    if(m_Expiration_modeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expiration_mode")), m_Expiration_mode));
    }
    if(m_Valid_days_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("valid_days_count")), m_Valid_days_count));
    }
    if(m_Trial_days_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("trial_days_count")), m_Trial_days_count));
    }
    if(m_Is_activeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_active")), m_Is_active));
    }
    if(m_Is_expiredIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_expired")), m_Is_expired));
    }
    if(m_Is_validIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_valid")), m_Is_valid));
    }
    if(m_Is_software_release_validIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_software_release_valid")), m_Is_software_release_valid));
    }
    if(m_Is_group_validIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_group_valid")), m_Is_group_valid));
    }
    if(m_Group_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("group_count")), m_Group_count));
    }
    if(m_Date_of_issue_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("date_of_issue_utc")), m_Date_of_issue_utc));
    }
}

bool LicenseSubscriptionPlanDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("expiration_date_utc"))))
    {
        utility::datetime refVal_setExpirationDateUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expiration_date_utc"))), refVal_setExpirationDateUtc );
        setExpirationDateUtc(refVal_setExpirationDateUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expiration_mode"))))
    {
        std::shared_ptr<ExpirationMode> refVal_setExpirationMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expiration_mode"))), refVal_setExpirationMode );
        setExpirationMode(refVal_setExpirationMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("valid_days_count"))))
    {
        int32_t refVal_setValidDaysCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("valid_days_count"))), refVal_setValidDaysCount );
        setValidDaysCount(refVal_setValidDaysCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("trial_days_count"))))
    {
        int32_t refVal_setTrialDaysCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("trial_days_count"))), refVal_setTrialDaysCount );
        setTrialDaysCount(refVal_setTrialDaysCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_active"))))
    {
        bool refVal_setIsActive;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_active"))), refVal_setIsActive );
        setIsActive(refVal_setIsActive);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_expired"))))
    {
        bool refVal_setIsExpired;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_expired"))), refVal_setIsExpired );
        setIsExpired(refVal_setIsExpired);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_valid"))))
    {
        bool refVal_setIsValid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_valid"))), refVal_setIsValid );
        setIsValid(refVal_setIsValid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_software_release_valid"))))
    {
        bool refVal_setIsSoftwareReleaseValid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_software_release_valid"))), refVal_setIsSoftwareReleaseValid );
        setIsSoftwareReleaseValid(refVal_setIsSoftwareReleaseValid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_group_valid"))))
    {
        bool refVal_setIsGroupValid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_group_valid"))), refVal_setIsGroupValid );
        setIsGroupValid(refVal_setIsGroupValid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("group_count"))))
    {
        int32_t refVal_setGroupCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("group_count"))), refVal_setGroupCount );
        setGroupCount(refVal_setGroupCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("date_of_issue_utc"))))
    {
        utility::datetime refVal_setDateOfIssueUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("date_of_issue_utc"))), refVal_setDateOfIssueUtc );
        setDateOfIssueUtc(refVal_setDateOfIssueUtc);
    }
    return ok;
}

utility::datetime LicenseSubscriptionPlanDto::getExpirationDateUtc() const
{
    return m_Expiration_date_utc;
}

void LicenseSubscriptionPlanDto::setExpirationDateUtc(const utility::datetime& value)
{
    m_Expiration_date_utc = value;
    m_Expiration_date_utcIsSet = true;
}

bool LicenseSubscriptionPlanDto::expirationDateUtcIsSet() const
{
    return m_Expiration_date_utcIsSet;
}

void LicenseSubscriptionPlanDto::unsetExpiration_date_utc()
{
    m_Expiration_date_utcIsSet = false;
}
std::shared_ptr<ExpirationMode> LicenseSubscriptionPlanDto::getExpirationMode() const
{
    return m_Expiration_mode;
}

void LicenseSubscriptionPlanDto::setExpirationMode(const std::shared_ptr<ExpirationMode>& value)
{
    m_Expiration_mode = value;
    m_Expiration_modeIsSet = true;
}

bool LicenseSubscriptionPlanDto::expirationModeIsSet() const
{
    return m_Expiration_modeIsSet;
}

void LicenseSubscriptionPlanDto::unsetExpiration_mode()
{
    m_Expiration_modeIsSet = false;
}
int32_t LicenseSubscriptionPlanDto::getValidDaysCount() const
{
    return m_Valid_days_count;
}

void LicenseSubscriptionPlanDto::setValidDaysCount(int32_t value)
{
    m_Valid_days_count = value;
    m_Valid_days_countIsSet = true;
}

bool LicenseSubscriptionPlanDto::validDaysCountIsSet() const
{
    return m_Valid_days_countIsSet;
}

void LicenseSubscriptionPlanDto::unsetValid_days_count()
{
    m_Valid_days_countIsSet = false;
}
int32_t LicenseSubscriptionPlanDto::getTrialDaysCount() const
{
    return m_Trial_days_count;
}

void LicenseSubscriptionPlanDto::setTrialDaysCount(int32_t value)
{
    m_Trial_days_count = value;
    m_Trial_days_countIsSet = true;
}

bool LicenseSubscriptionPlanDto::trialDaysCountIsSet() const
{
    return m_Trial_days_countIsSet;
}

void LicenseSubscriptionPlanDto::unsetTrial_days_count()
{
    m_Trial_days_countIsSet = false;
}
bool LicenseSubscriptionPlanDto::isIsActive() const
{
    return m_Is_active;
}

void LicenseSubscriptionPlanDto::setIsActive(bool value)
{
    m_Is_active = value;
    m_Is_activeIsSet = true;
}

bool LicenseSubscriptionPlanDto::isActiveIsSet() const
{
    return m_Is_activeIsSet;
}

void LicenseSubscriptionPlanDto::unsetIs_active()
{
    m_Is_activeIsSet = false;
}
bool LicenseSubscriptionPlanDto::isIsExpired() const
{
    return m_Is_expired;
}

void LicenseSubscriptionPlanDto::setIsExpired(bool value)
{
    m_Is_expired = value;
    m_Is_expiredIsSet = true;
}

bool LicenseSubscriptionPlanDto::isExpiredIsSet() const
{
    return m_Is_expiredIsSet;
}

void LicenseSubscriptionPlanDto::unsetIs_expired()
{
    m_Is_expiredIsSet = false;
}
bool LicenseSubscriptionPlanDto::isIsValid() const
{
    return m_Is_valid;
}

void LicenseSubscriptionPlanDto::setIsValid(bool value)
{
    m_Is_valid = value;
    m_Is_validIsSet = true;
}

bool LicenseSubscriptionPlanDto::isValidIsSet() const
{
    return m_Is_validIsSet;
}

void LicenseSubscriptionPlanDto::unsetIs_valid()
{
    m_Is_validIsSet = false;
}
bool LicenseSubscriptionPlanDto::isIsSoftwareReleaseValid() const
{
    return m_Is_software_release_valid;
}

void LicenseSubscriptionPlanDto::setIsSoftwareReleaseValid(bool value)
{
    m_Is_software_release_valid = value;
    m_Is_software_release_validIsSet = true;
}

bool LicenseSubscriptionPlanDto::isSoftwareReleaseValidIsSet() const
{
    return m_Is_software_release_validIsSet;
}

void LicenseSubscriptionPlanDto::unsetIs_software_release_valid()
{
    m_Is_software_release_validIsSet = false;
}
bool LicenseSubscriptionPlanDto::isIsGroupValid() const
{
    return m_Is_group_valid;
}

void LicenseSubscriptionPlanDto::setIsGroupValid(bool value)
{
    m_Is_group_valid = value;
    m_Is_group_validIsSet = true;
}

bool LicenseSubscriptionPlanDto::isGroupValidIsSet() const
{
    return m_Is_group_validIsSet;
}

void LicenseSubscriptionPlanDto::unsetIs_group_valid()
{
    m_Is_group_validIsSet = false;
}
int32_t LicenseSubscriptionPlanDto::getGroupCount() const
{
    return m_Group_count;
}

void LicenseSubscriptionPlanDto::setGroupCount(int32_t value)
{
    m_Group_count = value;
    m_Group_countIsSet = true;
}

bool LicenseSubscriptionPlanDto::groupCountIsSet() const
{
    return m_Group_countIsSet;
}

void LicenseSubscriptionPlanDto::unsetGroup_count()
{
    m_Group_countIsSet = false;
}
utility::datetime LicenseSubscriptionPlanDto::getDateOfIssueUtc() const
{
    return m_Date_of_issue_utc;
}

void LicenseSubscriptionPlanDto::setDateOfIssueUtc(const utility::datetime& value)
{
    m_Date_of_issue_utc = value;
    m_Date_of_issue_utcIsSet = true;
}

bool LicenseSubscriptionPlanDto::dateOfIssueUtcIsSet() const
{
    return m_Date_of_issue_utcIsSet;
}

void LicenseSubscriptionPlanDto::unsetDate_of_issue_utc()
{
    m_Date_of_issue_utcIsSet = false;
}
}
}
}
}


