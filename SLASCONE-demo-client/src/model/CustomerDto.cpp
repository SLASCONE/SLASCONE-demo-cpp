/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/CustomerDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CustomerDto::CustomerDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Company_name = utility::conversions::to_string_t("");
    m_Company_nameIsSet = false;
    m_Customer_number = utility::conversions::to_string_t("");
    m_Customer_numberIsSet = false;
    m_Customer_typeIsSet = false;
    m_Email = utility::conversions::to_string_t("");
    m_EmailIsSet = false;
    m_Street = utility::conversions::to_string_t("");
    m_StreetIsSet = false;
    m_City = utility::conversions::to_string_t("");
    m_CityIsSet = false;
    m_Postalcode = utility::conversions::to_string_t("");
    m_PostalcodeIsSet = false;
    m_Country = utility::conversions::to_string_t("");
    m_CountryIsSet = false;
    m_Phone = utility::conversions::to_string_t("");
    m_PhoneIsSet = false;
    m_Prospect_number = utility::conversions::to_string_t("");
    m_Prospect_numberIsSet = false;
    m_Longitude = 0.0;
    m_LongitudeIsSet = false;
    m_Latitude = 0.0;
    m_LatitudeIsSet = false;
    m_Created_date_utc = utility::datetime();
    m_Created_date_utcIsSet = false;
    m_Modified_date_utc = utility::datetime();
    m_Modified_date_utcIsSet = false;
    m_Last_modified_by = utility::conversions::to_string_t("");
    m_Last_modified_byIsSet = false;
    m_Tag_assignmentsIsSet = false;
    m_LogoIsSet = false;
    m_Reseller_id = utility::conversions::to_string_t("");
    m_Reseller_idIsSet = false;
}

CustomerDto::~CustomerDto()
{
}

void CustomerDto::validate()
{
    // TODO: implement validation
}

web::json::value CustomerDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_Company_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("company_name"))] = ModelBase::toJson(m_Company_name);
    }
    if(m_Customer_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("customer_number"))] = ModelBase::toJson(m_Customer_number);
    }
    if(m_Customer_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("customer_type"))] = ModelBase::toJson(m_Customer_type);
    }
    if(m_EmailIsSet)
    {
        val[utility::conversions::to_string_t(U("email"))] = ModelBase::toJson(m_Email);
    }
    if(m_StreetIsSet)
    {
        val[utility::conversions::to_string_t(U("street"))] = ModelBase::toJson(m_Street);
    }
    if(m_CityIsSet)
    {
        val[utility::conversions::to_string_t(U("city"))] = ModelBase::toJson(m_City);
    }
    if(m_PostalcodeIsSet)
    {
        val[utility::conversions::to_string_t(U("postalcode"))] = ModelBase::toJson(m_Postalcode);
    }
    if(m_CountryIsSet)
    {
        val[utility::conversions::to_string_t(U("country"))] = ModelBase::toJson(m_Country);
    }
    if(m_PhoneIsSet)
    {
        val[utility::conversions::to_string_t(U("phone"))] = ModelBase::toJson(m_Phone);
    }
    if(m_Prospect_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("prospect_number"))] = ModelBase::toJson(m_Prospect_number);
    }
    if(m_LongitudeIsSet)
    {
        val[utility::conversions::to_string_t(U("longitude"))] = ModelBase::toJson(m_Longitude);
    }
    if(m_LatitudeIsSet)
    {
        val[utility::conversions::to_string_t(U("latitude"))] = ModelBase::toJson(m_Latitude);
    }
    if(m_Created_date_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("created_date_utc"))] = ModelBase::toJson(m_Created_date_utc);
    }
    if(m_Modified_date_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("modified_date_utc"))] = ModelBase::toJson(m_Modified_date_utc);
    }
    if(m_Last_modified_byIsSet)
    {
        val[utility::conversions::to_string_t(U("last_modified_by"))] = ModelBase::toJson(m_Last_modified_by);
    }
    if(m_Tag_assignmentsIsSet)
    {
        val[utility::conversions::to_string_t(U("tag_assignments"))] = ModelBase::toJson(m_Tag_assignments);
    }
    if(m_LogoIsSet)
    {
        val[utility::conversions::to_string_t(U("logo"))] = ModelBase::toJson(m_Logo);
    }
    if(m_Reseller_idIsSet)
    {
        val[utility::conversions::to_string_t(U("reseller_id"))] = ModelBase::toJson(m_Reseller_id);
    }

    return val;
}

bool CustomerDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("company_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("company_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCompanyName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCompanyName);
            setCompanyName(refVal_setCompanyName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("customer_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("customer_number")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCustomerNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomerNumber);
            setCustomerNumber(refVal_setCustomerNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("customer_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("customer_type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CustomerTypeDto> refVal_setCustomerType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomerType);
            setCustomerType(refVal_setCustomerType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("email"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("email")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEmail;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEmail);
            setEmail(refVal_setEmail);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("street"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("street")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStreet;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStreet);
            setStreet(refVal_setStreet);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("city"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("city")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCity);
            setCity(refVal_setCity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("postalcode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("postalcode")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPostalcode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPostalcode);
            setPostalcode(refVal_setPostalcode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("country"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("country")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCountry;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCountry);
            setCountry(refVal_setCountry);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("phone"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("phone")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPhone;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPhone);
            setPhone(refVal_setPhone);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("prospect_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("prospect_number")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProspectNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProspectNumber);
            setProspectNumber(refVal_setProspectNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("longitude"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("longitude")));
        if(!fieldValue.is_null())
        {
            double refVal_setLongitude;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLongitude);
            setLongitude(refVal_setLongitude);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("latitude"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("latitude")));
        if(!fieldValue.is_null())
        {
            double refVal_setLatitude;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLatitude);
            setLatitude(refVal_setLatitude);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_date_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_date_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedDateUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedDateUtc);
            setCreatedDateUtc(refVal_setCreatedDateUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("modified_date_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("modified_date_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setModifiedDateUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModifiedDateUtc);
            setModifiedDateUtc(refVal_setModifiedDateUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("last_modified_by"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("last_modified_by")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLastModifiedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastModifiedBy);
            setLastModifiedBy(refVal_setLastModifiedBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tag_assignments"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tag_assignments")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<TagAssignmentDto>> refVal_setTagAssignments;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTagAssignments);
            setTagAssignments(refVal_setTagAssignments);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("logo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("logo")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ResourceDto> refVal_setLogo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLogo);
            setLogo(refVal_setLogo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reseller_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reseller_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setResellerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResellerId);
            setResellerId(refVal_setResellerId);
        }
    }
    return ok;
}

void CustomerDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_Company_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("company_name")), m_Company_name));
    }
    if(m_Customer_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("customer_number")), m_Customer_number));
    }
    if(m_Customer_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("customer_type")), m_Customer_type));
    }
    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("email")), m_Email));
    }
    if(m_StreetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("street")), m_Street));
    }
    if(m_CityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("city")), m_City));
    }
    if(m_PostalcodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("postalcode")), m_Postalcode));
    }
    if(m_CountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("country")), m_Country));
    }
    if(m_PhoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("phone")), m_Phone));
    }
    if(m_Prospect_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("prospect_number")), m_Prospect_number));
    }
    if(m_LongitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("longitude")), m_Longitude));
    }
    if(m_LatitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("latitude")), m_Latitude));
    }
    if(m_Created_date_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_date_utc")), m_Created_date_utc));
    }
    if(m_Modified_date_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("modified_date_utc")), m_Modified_date_utc));
    }
    if(m_Last_modified_byIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("last_modified_by")), m_Last_modified_by));
    }
    if(m_Tag_assignmentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tag_assignments")), m_Tag_assignments));
    }
    if(m_LogoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("logo")), m_Logo));
    }
    if(m_Reseller_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reseller_id")), m_Reseller_id));
    }
}

bool CustomerDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("company_name"))))
    {
        utility::string_t refVal_setCompanyName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("company_name"))), refVal_setCompanyName );
        setCompanyName(refVal_setCompanyName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("customer_number"))))
    {
        utility::string_t refVal_setCustomerNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("customer_number"))), refVal_setCustomerNumber );
        setCustomerNumber(refVal_setCustomerNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("customer_type"))))
    {
        std::shared_ptr<CustomerTypeDto> refVal_setCustomerType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("customer_type"))), refVal_setCustomerType );
        setCustomerType(refVal_setCustomerType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("email"))))
    {
        utility::string_t refVal_setEmail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("email"))), refVal_setEmail );
        setEmail(refVal_setEmail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("street"))))
    {
        utility::string_t refVal_setStreet;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("street"))), refVal_setStreet );
        setStreet(refVal_setStreet);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("city"))))
    {
        utility::string_t refVal_setCity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("city"))), refVal_setCity );
        setCity(refVal_setCity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("postalcode"))))
    {
        utility::string_t refVal_setPostalcode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("postalcode"))), refVal_setPostalcode );
        setPostalcode(refVal_setPostalcode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("country"))))
    {
        utility::string_t refVal_setCountry;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("country"))), refVal_setCountry );
        setCountry(refVal_setCountry);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("phone"))))
    {
        utility::string_t refVal_setPhone;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("phone"))), refVal_setPhone );
        setPhone(refVal_setPhone);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("prospect_number"))))
    {
        utility::string_t refVal_setProspectNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("prospect_number"))), refVal_setProspectNumber );
        setProspectNumber(refVal_setProspectNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("longitude"))))
    {
        double refVal_setLongitude;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("longitude"))), refVal_setLongitude );
        setLongitude(refVal_setLongitude);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("latitude"))))
    {
        double refVal_setLatitude;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("latitude"))), refVal_setLatitude );
        setLatitude(refVal_setLatitude);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_date_utc"))))
    {
        utility::datetime refVal_setCreatedDateUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_date_utc"))), refVal_setCreatedDateUtc );
        setCreatedDateUtc(refVal_setCreatedDateUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("modified_date_utc"))))
    {
        utility::datetime refVal_setModifiedDateUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("modified_date_utc"))), refVal_setModifiedDateUtc );
        setModifiedDateUtc(refVal_setModifiedDateUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("last_modified_by"))))
    {
        utility::string_t refVal_setLastModifiedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("last_modified_by"))), refVal_setLastModifiedBy );
        setLastModifiedBy(refVal_setLastModifiedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tag_assignments"))))
    {
        std::vector<std::shared_ptr<TagAssignmentDto>> refVal_setTagAssignments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tag_assignments"))), refVal_setTagAssignments );
        setTagAssignments(refVal_setTagAssignments);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("logo"))))
    {
        std::shared_ptr<ResourceDto> refVal_setLogo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("logo"))), refVal_setLogo );
        setLogo(refVal_setLogo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reseller_id"))))
    {
        utility::string_t refVal_setResellerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reseller_id"))), refVal_setResellerId );
        setResellerId(refVal_setResellerId);
    }
    return ok;
}

utility::string_t CustomerDto::getId() const
{
    return m_Id;
}

void CustomerDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool CustomerDto::idIsSet() const
{
    return m_IdIsSet;
}

void CustomerDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t CustomerDto::getCompanyName() const
{
    return m_Company_name;
}

void CustomerDto::setCompanyName(const utility::string_t& value)
{
    m_Company_name = value;
    m_Company_nameIsSet = true;
}

bool CustomerDto::companyNameIsSet() const
{
    return m_Company_nameIsSet;
}

void CustomerDto::unsetCompany_name()
{
    m_Company_nameIsSet = false;
}
utility::string_t CustomerDto::getCustomerNumber() const
{
    return m_Customer_number;
}

void CustomerDto::setCustomerNumber(const utility::string_t& value)
{
    m_Customer_number = value;
    m_Customer_numberIsSet = true;
}

bool CustomerDto::customerNumberIsSet() const
{
    return m_Customer_numberIsSet;
}

void CustomerDto::unsetCustomer_number()
{
    m_Customer_numberIsSet = false;
}
std::shared_ptr<CustomerTypeDto> CustomerDto::getCustomerType() const
{
    return m_Customer_type;
}

void CustomerDto::setCustomerType(const std::shared_ptr<CustomerTypeDto>& value)
{
    m_Customer_type = value;
    m_Customer_typeIsSet = true;
}

bool CustomerDto::customerTypeIsSet() const
{
    return m_Customer_typeIsSet;
}

void CustomerDto::unsetCustomer_type()
{
    m_Customer_typeIsSet = false;
}
utility::string_t CustomerDto::getEmail() const
{
    return m_Email;
}

void CustomerDto::setEmail(const utility::string_t& value)
{
    m_Email = value;
    m_EmailIsSet = true;
}

bool CustomerDto::emailIsSet() const
{
    return m_EmailIsSet;
}

void CustomerDto::unsetEmail()
{
    m_EmailIsSet = false;
}
utility::string_t CustomerDto::getStreet() const
{
    return m_Street;
}

void CustomerDto::setStreet(const utility::string_t& value)
{
    m_Street = value;
    m_StreetIsSet = true;
}

bool CustomerDto::streetIsSet() const
{
    return m_StreetIsSet;
}

void CustomerDto::unsetStreet()
{
    m_StreetIsSet = false;
}
utility::string_t CustomerDto::getCity() const
{
    return m_City;
}

void CustomerDto::setCity(const utility::string_t& value)
{
    m_City = value;
    m_CityIsSet = true;
}

bool CustomerDto::cityIsSet() const
{
    return m_CityIsSet;
}

void CustomerDto::unsetCity()
{
    m_CityIsSet = false;
}
utility::string_t CustomerDto::getPostalcode() const
{
    return m_Postalcode;
}

void CustomerDto::setPostalcode(const utility::string_t& value)
{
    m_Postalcode = value;
    m_PostalcodeIsSet = true;
}

bool CustomerDto::postalcodeIsSet() const
{
    return m_PostalcodeIsSet;
}

void CustomerDto::unsetPostalcode()
{
    m_PostalcodeIsSet = false;
}
utility::string_t CustomerDto::getCountry() const
{
    return m_Country;
}

void CustomerDto::setCountry(const utility::string_t& value)
{
    m_Country = value;
    m_CountryIsSet = true;
}

bool CustomerDto::countryIsSet() const
{
    return m_CountryIsSet;
}

void CustomerDto::unsetCountry()
{
    m_CountryIsSet = false;
}
utility::string_t CustomerDto::getPhone() const
{
    return m_Phone;
}

void CustomerDto::setPhone(const utility::string_t& value)
{
    m_Phone = value;
    m_PhoneIsSet = true;
}

bool CustomerDto::phoneIsSet() const
{
    return m_PhoneIsSet;
}

void CustomerDto::unsetPhone()
{
    m_PhoneIsSet = false;
}
utility::string_t CustomerDto::getProspectNumber() const
{
    return m_Prospect_number;
}

void CustomerDto::setProspectNumber(const utility::string_t& value)
{
    m_Prospect_number = value;
    m_Prospect_numberIsSet = true;
}

bool CustomerDto::prospectNumberIsSet() const
{
    return m_Prospect_numberIsSet;
}

void CustomerDto::unsetProspect_number()
{
    m_Prospect_numberIsSet = false;
}
double CustomerDto::getLongitude() const
{
    return m_Longitude;
}

void CustomerDto::setLongitude(double value)
{
    m_Longitude = value;
    m_LongitudeIsSet = true;
}

bool CustomerDto::longitudeIsSet() const
{
    return m_LongitudeIsSet;
}

void CustomerDto::unsetLongitude()
{
    m_LongitudeIsSet = false;
}
double CustomerDto::getLatitude() const
{
    return m_Latitude;
}

void CustomerDto::setLatitude(double value)
{
    m_Latitude = value;
    m_LatitudeIsSet = true;
}

bool CustomerDto::latitudeIsSet() const
{
    return m_LatitudeIsSet;
}

void CustomerDto::unsetLatitude()
{
    m_LatitudeIsSet = false;
}
utility::datetime CustomerDto::getCreatedDateUtc() const
{
    return m_Created_date_utc;
}

void CustomerDto::setCreatedDateUtc(const utility::datetime& value)
{
    m_Created_date_utc = value;
    m_Created_date_utcIsSet = true;
}

bool CustomerDto::createdDateUtcIsSet() const
{
    return m_Created_date_utcIsSet;
}

void CustomerDto::unsetCreated_date_utc()
{
    m_Created_date_utcIsSet = false;
}
utility::datetime CustomerDto::getModifiedDateUtc() const
{
    return m_Modified_date_utc;
}

void CustomerDto::setModifiedDateUtc(const utility::datetime& value)
{
    m_Modified_date_utc = value;
    m_Modified_date_utcIsSet = true;
}

bool CustomerDto::modifiedDateUtcIsSet() const
{
    return m_Modified_date_utcIsSet;
}

void CustomerDto::unsetModified_date_utc()
{
    m_Modified_date_utcIsSet = false;
}
utility::string_t CustomerDto::getLastModifiedBy() const
{
    return m_Last_modified_by;
}

void CustomerDto::setLastModifiedBy(const utility::string_t& value)
{
    m_Last_modified_by = value;
    m_Last_modified_byIsSet = true;
}

bool CustomerDto::lastModifiedByIsSet() const
{
    return m_Last_modified_byIsSet;
}

void CustomerDto::unsetLast_modified_by()
{
    m_Last_modified_byIsSet = false;
}
std::vector<std::shared_ptr<TagAssignmentDto>>& CustomerDto::getTagAssignments()
{
    return m_Tag_assignments;
}

void CustomerDto::setTagAssignments(const std::vector<std::shared_ptr<TagAssignmentDto>>& value)
{
    m_Tag_assignments = value;
    m_Tag_assignmentsIsSet = true;
}

bool CustomerDto::tagAssignmentsIsSet() const
{
    return m_Tag_assignmentsIsSet;
}

void CustomerDto::unsetTag_assignments()
{
    m_Tag_assignmentsIsSet = false;
}
std::shared_ptr<ResourceDto> CustomerDto::getLogo() const
{
    return m_Logo;
}

void CustomerDto::setLogo(const std::shared_ptr<ResourceDto>& value)
{
    m_Logo = value;
    m_LogoIsSet = true;
}

bool CustomerDto::logoIsSet() const
{
    return m_LogoIsSet;
}

void CustomerDto::unsetLogo()
{
    m_LogoIsSet = false;
}
utility::string_t CustomerDto::getResellerId() const
{
    return m_Reseller_id;
}

void CustomerDto::setResellerId(const utility::string_t& value)
{
    m_Reseller_id = value;
    m_Reseller_idIsSet = true;
}

bool CustomerDto::resellerIdIsSet() const
{
    return m_Reseller_idIsSet;
}

void CustomerDto::unsetReseller_id()
{
    m_Reseller_idIsSet = false;
}
}
}
}
}


