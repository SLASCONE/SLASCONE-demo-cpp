/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/ConsumptionHeartbeatLazyLoadDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ConsumptionHeartbeatLazyLoadDto::ConsumptionHeartbeatLazyLoadDto()
{
    m_Consumption_heartbeatsIsSet = false;
    m_Max_count = 0;
    m_Max_countIsSet = false;
    m_Aggregate_value = 0.0;
    m_Aggregate_valueIsSet = false;
}

ConsumptionHeartbeatLazyLoadDto::~ConsumptionHeartbeatLazyLoadDto()
{
}

void ConsumptionHeartbeatLazyLoadDto::validate()
{
    // TODO: implement validation
}

web::json::value ConsumptionHeartbeatLazyLoadDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Consumption_heartbeatsIsSet)
    {
        val[utility::conversions::to_string_t(U("consumption_heartbeats"))] = ModelBase::toJson(m_Consumption_heartbeats);
    }
    if(m_Max_countIsSet)
    {
        val[utility::conversions::to_string_t(U("max_count"))] = ModelBase::toJson(m_Max_count);
    }
    if(m_Aggregate_valueIsSet)
    {
        val[utility::conversions::to_string_t(U("aggregate_value"))] = ModelBase::toJson(m_Aggregate_value);
    }

    return val;
}

bool ConsumptionHeartbeatLazyLoadDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("consumption_heartbeats"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("consumption_heartbeats")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ConsumptionHeartbeatDto>> refVal_setConsumptionHeartbeats;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConsumptionHeartbeats);
            setConsumptionHeartbeats(refVal_setConsumptionHeartbeats);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("max_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("max_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMaxCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaxCount);
            setMaxCount(refVal_setMaxCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("aggregate_value"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("aggregate_value")));
        if(!fieldValue.is_null())
        {
            double refVal_setAggregateValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAggregateValue);
            setAggregateValue(refVal_setAggregateValue);
        }
    }
    return ok;
}

void ConsumptionHeartbeatLazyLoadDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Consumption_heartbeatsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("consumption_heartbeats")), m_Consumption_heartbeats));
    }
    if(m_Max_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("max_count")), m_Max_count));
    }
    if(m_Aggregate_valueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("aggregate_value")), m_Aggregate_value));
    }
}

bool ConsumptionHeartbeatLazyLoadDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("consumption_heartbeats"))))
    {
        std::vector<std::shared_ptr<ConsumptionHeartbeatDto>> refVal_setConsumptionHeartbeats;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("consumption_heartbeats"))), refVal_setConsumptionHeartbeats );
        setConsumptionHeartbeats(refVal_setConsumptionHeartbeats);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("max_count"))))
    {
        int32_t refVal_setMaxCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("max_count"))), refVal_setMaxCount );
        setMaxCount(refVal_setMaxCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("aggregate_value"))))
    {
        double refVal_setAggregateValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("aggregate_value"))), refVal_setAggregateValue );
        setAggregateValue(refVal_setAggregateValue);
    }
    return ok;
}

std::vector<std::shared_ptr<ConsumptionHeartbeatDto>>& ConsumptionHeartbeatLazyLoadDto::getConsumptionHeartbeats()
{
    return m_Consumption_heartbeats;
}

void ConsumptionHeartbeatLazyLoadDto::setConsumptionHeartbeats(const std::vector<std::shared_ptr<ConsumptionHeartbeatDto>>& value)
{
    m_Consumption_heartbeats = value;
    m_Consumption_heartbeatsIsSet = true;
}

bool ConsumptionHeartbeatLazyLoadDto::consumptionHeartbeatsIsSet() const
{
    return m_Consumption_heartbeatsIsSet;
}

void ConsumptionHeartbeatLazyLoadDto::unsetConsumption_heartbeats()
{
    m_Consumption_heartbeatsIsSet = false;
}
int32_t ConsumptionHeartbeatLazyLoadDto::getMaxCount() const
{
    return m_Max_count;
}

void ConsumptionHeartbeatLazyLoadDto::setMaxCount(int32_t value)
{
    m_Max_count = value;
    m_Max_countIsSet = true;
}

bool ConsumptionHeartbeatLazyLoadDto::maxCountIsSet() const
{
    return m_Max_countIsSet;
}

void ConsumptionHeartbeatLazyLoadDto::unsetMax_count()
{
    m_Max_countIsSet = false;
}
double ConsumptionHeartbeatLazyLoadDto::getAggregateValue() const
{
    return m_Aggregate_value;
}

void ConsumptionHeartbeatLazyLoadDto::setAggregateValue(double value)
{
    m_Aggregate_value = value;
    m_Aggregate_valueIsSet = true;
}

bool ConsumptionHeartbeatLazyLoadDto::aggregateValueIsSet() const
{
    return m_Aggregate_valueIsSet;
}

void ConsumptionHeartbeatLazyLoadDto::unsetAggregate_value()
{
    m_Aggregate_valueIsSet = false;
}
}
}
}
}


