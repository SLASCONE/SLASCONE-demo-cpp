/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/IsvUserRolesDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



IsvUserRolesDto::IsvUserRolesDto()
{
    m_IsvId = utility::conversions::to_string_t("");
    m_IsvIdIsSet = false;
    m_IsvName = utility::conversions::to_string_t("");
    m_IsvNameIsSet = false;
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
    m_VendorRoleId = utility::conversions::to_string_t("");
    m_VendorRoleIdIsSet = false;
    m_ResellerPortalRolesIsSet = false;
    m_CustomerPortalRolesIsSet = false;
}

IsvUserRolesDto::~IsvUserRolesDto()
{
}

void IsvUserRolesDto::validate()
{
    // TODO: implement validation
}

web::json::value IsvUserRolesDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IsvIdIsSet)
    {
        val[utility::conversions::to_string_t(U("isvId"))] = ModelBase::toJson(m_IsvId);
    }
    if(m_IsvNameIsSet)
    {
        val[utility::conversions::to_string_t(U("isvName"))] = ModelBase::toJson(m_IsvName);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t(U("userId"))] = ModelBase::toJson(m_UserId);
    }
    if(m_VendorRoleIdIsSet)
    {
        val[utility::conversions::to_string_t(U("vendorRoleId"))] = ModelBase::toJson(m_VendorRoleId);
    }
    if(m_ResellerPortalRolesIsSet)
    {
        val[utility::conversions::to_string_t(U("resellerPortalRoles"))] = ModelBase::toJson(m_ResellerPortalRoles);
    }
    if(m_CustomerPortalRolesIsSet)
    {
        val[utility::conversions::to_string_t(U("customerPortalRoles"))] = ModelBase::toJson(m_CustomerPortalRoles);
    }

    return val;
}

bool IsvUserRolesDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("isvId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isvId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIsvId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsvId);
            setIsvId(refVal_setIsvId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isvName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isvName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIsvName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsvName);
            setIsvName(refVal_setIsvName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("userId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("userId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserId);
            setUserId(refVal_setUserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vendorRoleId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vendorRoleId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVendorRoleId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVendorRoleId);
            setVendorRoleId(refVal_setVendorRoleId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("resellerPortalRoles"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("resellerPortalRoles")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ResellerPortalRoleDto>> refVal_setResellerPortalRoles;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResellerPortalRoles);
            setResellerPortalRoles(refVal_setResellerPortalRoles);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("customerPortalRoles"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("customerPortalRoles")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<CustomerPortalRoleDto>> refVal_setCustomerPortalRoles;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomerPortalRoles);
            setCustomerPortalRoles(refVal_setCustomerPortalRoles);
        }
    }
    return ok;
}

void IsvUserRolesDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IsvIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isvId")), m_IsvId));
    }
    if(m_IsvNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isvName")), m_IsvName));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("userId")), m_UserId));
    }
    if(m_VendorRoleIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vendorRoleId")), m_VendorRoleId));
    }
    if(m_ResellerPortalRolesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("resellerPortalRoles")), m_ResellerPortalRoles));
    }
    if(m_CustomerPortalRolesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("customerPortalRoles")), m_CustomerPortalRoles));
    }
}

bool IsvUserRolesDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("isvId"))))
    {
        utility::string_t refVal_setIsvId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isvId"))), refVal_setIsvId );
        setIsvId(refVal_setIsvId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isvName"))))
    {
        utility::string_t refVal_setIsvName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isvName"))), refVal_setIsvName );
        setIsvName(refVal_setIsvName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("userId"))))
    {
        utility::string_t refVal_setUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("userId"))), refVal_setUserId );
        setUserId(refVal_setUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vendorRoleId"))))
    {
        utility::string_t refVal_setVendorRoleId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vendorRoleId"))), refVal_setVendorRoleId );
        setVendorRoleId(refVal_setVendorRoleId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("resellerPortalRoles"))))
    {
        std::vector<std::shared_ptr<ResellerPortalRoleDto>> refVal_setResellerPortalRoles;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("resellerPortalRoles"))), refVal_setResellerPortalRoles );
        setResellerPortalRoles(refVal_setResellerPortalRoles);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("customerPortalRoles"))))
    {
        std::vector<std::shared_ptr<CustomerPortalRoleDto>> refVal_setCustomerPortalRoles;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("customerPortalRoles"))), refVal_setCustomerPortalRoles );
        setCustomerPortalRoles(refVal_setCustomerPortalRoles);
    }
    return ok;
}

utility::string_t IsvUserRolesDto::getIsvId() const
{
    return m_IsvId;
}

void IsvUserRolesDto::setIsvId(const utility::string_t& value)
{
    m_IsvId = value;
    m_IsvIdIsSet = true;
}

bool IsvUserRolesDto::isvIdIsSet() const
{
    return m_IsvIdIsSet;
}

void IsvUserRolesDto::unsetIsvId()
{
    m_IsvIdIsSet = false;
}
utility::string_t IsvUserRolesDto::getIsvName() const
{
    return m_IsvName;
}

void IsvUserRolesDto::setIsvName(const utility::string_t& value)
{
    m_IsvName = value;
    m_IsvNameIsSet = true;
}

bool IsvUserRolesDto::isvNameIsSet() const
{
    return m_IsvNameIsSet;
}

void IsvUserRolesDto::unsetIsvName()
{
    m_IsvNameIsSet = false;
}
utility::string_t IsvUserRolesDto::getUserId() const
{
    return m_UserId;
}

void IsvUserRolesDto::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool IsvUserRolesDto::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void IsvUserRolesDto::unsetUserId()
{
    m_UserIdIsSet = false;
}
utility::string_t IsvUserRolesDto::getVendorRoleId() const
{
    return m_VendorRoleId;
}

void IsvUserRolesDto::setVendorRoleId(const utility::string_t& value)
{
    m_VendorRoleId = value;
    m_VendorRoleIdIsSet = true;
}

bool IsvUserRolesDto::vendorRoleIdIsSet() const
{
    return m_VendorRoleIdIsSet;
}

void IsvUserRolesDto::unsetVendorRoleId()
{
    m_VendorRoleIdIsSet = false;
}
std::vector<std::shared_ptr<ResellerPortalRoleDto>>& IsvUserRolesDto::getResellerPortalRoles()
{
    return m_ResellerPortalRoles;
}

void IsvUserRolesDto::setResellerPortalRoles(const std::vector<std::shared_ptr<ResellerPortalRoleDto>>& value)
{
    m_ResellerPortalRoles = value;
    m_ResellerPortalRolesIsSet = true;
}

bool IsvUserRolesDto::resellerPortalRolesIsSet() const
{
    return m_ResellerPortalRolesIsSet;
}

void IsvUserRolesDto::unsetResellerPortalRoles()
{
    m_ResellerPortalRolesIsSet = false;
}
std::vector<std::shared_ptr<CustomerPortalRoleDto>>& IsvUserRolesDto::getCustomerPortalRoles()
{
    return m_CustomerPortalRoles;
}

void IsvUserRolesDto::setCustomerPortalRoles(const std::vector<std::shared_ptr<CustomerPortalRoleDto>>& value)
{
    m_CustomerPortalRoles = value;
    m_CustomerPortalRolesIsSet = true;
}

bool IsvUserRolesDto::customerPortalRolesIsSet() const
{
    return m_CustomerPortalRolesIsSet;
}

void IsvUserRolesDto::unsetCustomerPortalRoles()
{
    m_CustomerPortalRolesIsSet = false;
}
}
}
}
}


