/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/AlertDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



AlertDto::AlertDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Is_active = false;
    m_Is_activeIsSet = false;
    m_Alert_days = 0;
    m_Alert_daysIsSet = false;
    m_ModeIsSet = false;
    m_Template_id = utility::conversions::to_string_t("");
    m_Template_idIsSet = false;
    m_r_templateIsSet = false;
    m_Email_template_id = utility::conversions::to_string_t("");
    m_Email_template_idIsSet = false;
    m_Email_templateIsSet = false;
    m_Created_date_utc = utility::datetime();
    m_Created_date_utcIsSet = false;
}

AlertDto::~AlertDto()
{
}

void AlertDto::validate()
{
    // TODO: implement validation
}

web::json::value AlertDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_Is_activeIsSet)
    {
        val[utility::conversions::to_string_t(U("is_active"))] = ModelBase::toJson(m_Is_active);
    }
    if(m_Alert_daysIsSet)
    {
        val[utility::conversions::to_string_t(U("alert_days"))] = ModelBase::toJson(m_Alert_days);
    }
    if(m_ModeIsSet)
    {
        val[utility::conversions::to_string_t(U("mode"))] = ModelBase::toJson(m_Mode);
    }
    if(m_Template_idIsSet)
    {
        val[utility::conversions::to_string_t(U("template_id"))] = ModelBase::toJson(m_Template_id);
    }
    if(m_r_templateIsSet)
    {
        val[utility::conversions::to_string_t(U("template"))] = ModelBase::toJson(m_r_template);
    }
    if(m_Email_template_idIsSet)
    {
        val[utility::conversions::to_string_t(U("email_template_id"))] = ModelBase::toJson(m_Email_template_id);
    }
    if(m_Email_templateIsSet)
    {
        val[utility::conversions::to_string_t(U("email_template"))] = ModelBase::toJson(m_Email_template);
    }
    if(m_Created_date_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("created_date_utc"))] = ModelBase::toJson(m_Created_date_utc);
    }

    return val;
}

bool AlertDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_active"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_active")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsActive;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsActive);
            setIsActive(refVal_setIsActive);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("alert_days"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("alert_days")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setAlertDays;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAlertDays);
            setAlertDays(refVal_setAlertDays);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mode")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AlertMode> refVal_setMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMode);
            setMode(refVal_setMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("template_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("template_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTemplateId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTemplateId);
            setTemplateId(refVal_setTemplateId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("template"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("template")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TemplateDto> refVal_setRTemplate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRTemplate);
            setRTemplate(refVal_setRTemplate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("email_template_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("email_template_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEmailTemplateId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEmailTemplateId);
            setEmailTemplateId(refVal_setEmailTemplateId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("email_template"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("email_template")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<EmailTemplateDto> refVal_setEmailTemplate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEmailTemplate);
            setEmailTemplate(refVal_setEmailTemplate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_date_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_date_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedDateUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedDateUtc);
            setCreatedDateUtc(refVal_setCreatedDateUtc);
        }
    }
    return ok;
}

void AlertDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_Is_activeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_active")), m_Is_active));
    }
    if(m_Alert_daysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("alert_days")), m_Alert_days));
    }
    if(m_ModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mode")), m_Mode));
    }
    if(m_Template_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("template_id")), m_Template_id));
    }
    if(m_r_templateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("template")), m_r_template));
    }
    if(m_Email_template_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("email_template_id")), m_Email_template_id));
    }
    if(m_Email_templateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("email_template")), m_Email_template));
    }
    if(m_Created_date_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_date_utc")), m_Created_date_utc));
    }
}

bool AlertDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_active"))))
    {
        bool refVal_setIsActive;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_active"))), refVal_setIsActive );
        setIsActive(refVal_setIsActive);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("alert_days"))))
    {
        int32_t refVal_setAlertDays;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("alert_days"))), refVal_setAlertDays );
        setAlertDays(refVal_setAlertDays);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mode"))))
    {
        std::shared_ptr<AlertMode> refVal_setMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mode"))), refVal_setMode );
        setMode(refVal_setMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("template_id"))))
    {
        utility::string_t refVal_setTemplateId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("template_id"))), refVal_setTemplateId );
        setTemplateId(refVal_setTemplateId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("template"))))
    {
        std::shared_ptr<TemplateDto> refVal_setRTemplate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("template"))), refVal_setRTemplate );
        setRTemplate(refVal_setRTemplate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("email_template_id"))))
    {
        utility::string_t refVal_setEmailTemplateId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("email_template_id"))), refVal_setEmailTemplateId );
        setEmailTemplateId(refVal_setEmailTemplateId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("email_template"))))
    {
        std::shared_ptr<EmailTemplateDto> refVal_setEmailTemplate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("email_template"))), refVal_setEmailTemplate );
        setEmailTemplate(refVal_setEmailTemplate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_date_utc"))))
    {
        utility::datetime refVal_setCreatedDateUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_date_utc"))), refVal_setCreatedDateUtc );
        setCreatedDateUtc(refVal_setCreatedDateUtc);
    }
    return ok;
}

utility::string_t AlertDto::getId() const
{
    return m_Id;
}

void AlertDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool AlertDto::idIsSet() const
{
    return m_IdIsSet;
}

void AlertDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t AlertDto::getName() const
{
    return m_Name;
}

void AlertDto::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool AlertDto::nameIsSet() const
{
    return m_NameIsSet;
}

void AlertDto::unsetName()
{
    m_NameIsSet = false;
}
bool AlertDto::isIsActive() const
{
    return m_Is_active;
}

void AlertDto::setIsActive(bool value)
{
    m_Is_active = value;
    m_Is_activeIsSet = true;
}

bool AlertDto::isActiveIsSet() const
{
    return m_Is_activeIsSet;
}

void AlertDto::unsetIs_active()
{
    m_Is_activeIsSet = false;
}
int32_t AlertDto::getAlertDays() const
{
    return m_Alert_days;
}

void AlertDto::setAlertDays(int32_t value)
{
    m_Alert_days = value;
    m_Alert_daysIsSet = true;
}

bool AlertDto::alertDaysIsSet() const
{
    return m_Alert_daysIsSet;
}

void AlertDto::unsetAlert_days()
{
    m_Alert_daysIsSet = false;
}
std::shared_ptr<AlertMode> AlertDto::getMode() const
{
    return m_Mode;
}

void AlertDto::setMode(const std::shared_ptr<AlertMode>& value)
{
    m_Mode = value;
    m_ModeIsSet = true;
}

bool AlertDto::modeIsSet() const
{
    return m_ModeIsSet;
}

void AlertDto::unsetMode()
{
    m_ModeIsSet = false;
}
utility::string_t AlertDto::getTemplateId() const
{
    return m_Template_id;
}

void AlertDto::setTemplateId(const utility::string_t& value)
{
    m_Template_id = value;
    m_Template_idIsSet = true;
}

bool AlertDto::templateIdIsSet() const
{
    return m_Template_idIsSet;
}

void AlertDto::unsetTemplate_id()
{
    m_Template_idIsSet = false;
}
std::shared_ptr<TemplateDto> AlertDto::getRTemplate() const
{
    return m_r_template;
}

void AlertDto::setRTemplate(const std::shared_ptr<TemplateDto>& value)
{
    m_r_template = value;
    m_r_templateIsSet = true;
}

bool AlertDto::rTemplateIsSet() const
{
    return m_r_templateIsSet;
}

void AlertDto::unsetr_template()
{
    m_r_templateIsSet = false;
}
utility::string_t AlertDto::getEmailTemplateId() const
{
    return m_Email_template_id;
}

void AlertDto::setEmailTemplateId(const utility::string_t& value)
{
    m_Email_template_id = value;
    m_Email_template_idIsSet = true;
}

bool AlertDto::emailTemplateIdIsSet() const
{
    return m_Email_template_idIsSet;
}

void AlertDto::unsetEmail_template_id()
{
    m_Email_template_idIsSet = false;
}
std::shared_ptr<EmailTemplateDto> AlertDto::getEmailTemplate() const
{
    return m_Email_template;
}

void AlertDto::setEmailTemplate(const std::shared_ptr<EmailTemplateDto>& value)
{
    m_Email_template = value;
    m_Email_templateIsSet = true;
}

bool AlertDto::emailTemplateIsSet() const
{
    return m_Email_templateIsSet;
}

void AlertDto::unsetEmail_template()
{
    m_Email_templateIsSet = false;
}
utility::datetime AlertDto::getCreatedDateUtc() const
{
    return m_Created_date_utc;
}

void AlertDto::setCreatedDateUtc(const utility::datetime& value)
{
    m_Created_date_utc = value;
    m_Created_date_utcIsSet = true;
}

bool AlertDto::createdDateUtcIsSet() const
{
    return m_Created_date_utcIsSet;
}

void AlertDto::unsetCreated_date_utc()
{
    m_Created_date_utcIsSet = false;
}
}
}
}
}


