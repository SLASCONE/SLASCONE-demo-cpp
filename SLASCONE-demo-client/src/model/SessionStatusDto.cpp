/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/SessionStatusDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



SessionStatusDto::SessionStatusDto()
{
    m_Is_session_valid = false;
    m_Is_session_validIsSet = false;
    m_Session_valid_until = utility::datetime();
    m_Session_valid_untilIsSet = false;
    m_Session_created_date = utility::datetime();
    m_Session_created_dateIsSet = false;
    m_Session_modified_date = utility::datetime();
    m_Session_modified_dateIsSet = false;
    m_Max_open_session_count = 0;
    m_Max_open_session_countIsSet = false;
    m_Max_active_client_count = 0;
    m_Max_active_client_countIsSet = false;
}

SessionStatusDto::~SessionStatusDto()
{
}

void SessionStatusDto::validate()
{
    // TODO: implement validation
}

web::json::value SessionStatusDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Is_session_validIsSet)
    {
        val[utility::conversions::to_string_t(U("is_session_valid"))] = ModelBase::toJson(m_Is_session_valid);
    }
    if(m_Session_valid_untilIsSet)
    {
        val[utility::conversions::to_string_t(U("session_valid_until"))] = ModelBase::toJson(m_Session_valid_until);
    }
    if(m_Session_created_dateIsSet)
    {
        val[utility::conversions::to_string_t(U("session_created_date"))] = ModelBase::toJson(m_Session_created_date);
    }
    if(m_Session_modified_dateIsSet)
    {
        val[utility::conversions::to_string_t(U("session_modified_date"))] = ModelBase::toJson(m_Session_modified_date);
    }
    if(m_Max_open_session_countIsSet)
    {
        val[utility::conversions::to_string_t(U("max_open_session_count"))] = ModelBase::toJson(m_Max_open_session_count);
    }
    if(m_Max_active_client_countIsSet)
    {
        val[utility::conversions::to_string_t(U("max_active_client_count"))] = ModelBase::toJson(m_Max_active_client_count);
    }

    return val;
}

bool SessionStatusDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("is_session_valid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_session_valid")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsSessionValid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsSessionValid);
            setIsSessionValid(refVal_setIsSessionValid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("session_valid_until"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("session_valid_until")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setSessionValidUntil;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSessionValidUntil);
            setSessionValidUntil(refVal_setSessionValidUntil);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("session_created_date"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("session_created_date")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setSessionCreatedDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSessionCreatedDate);
            setSessionCreatedDate(refVal_setSessionCreatedDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("session_modified_date"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("session_modified_date")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setSessionModifiedDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSessionModifiedDate);
            setSessionModifiedDate(refVal_setSessionModifiedDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("max_open_session_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("max_open_session_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMaxOpenSessionCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaxOpenSessionCount);
            setMaxOpenSessionCount(refVal_setMaxOpenSessionCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("max_active_client_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("max_active_client_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMaxActiveClientCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaxActiveClientCount);
            setMaxActiveClientCount(refVal_setMaxActiveClientCount);
        }
    }
    return ok;
}

void SessionStatusDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Is_session_validIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_session_valid")), m_Is_session_valid));
    }
    if(m_Session_valid_untilIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("session_valid_until")), m_Session_valid_until));
    }
    if(m_Session_created_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("session_created_date")), m_Session_created_date));
    }
    if(m_Session_modified_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("session_modified_date")), m_Session_modified_date));
    }
    if(m_Max_open_session_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("max_open_session_count")), m_Max_open_session_count));
    }
    if(m_Max_active_client_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("max_active_client_count")), m_Max_active_client_count));
    }
}

bool SessionStatusDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("is_session_valid"))))
    {
        bool refVal_setIsSessionValid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_session_valid"))), refVal_setIsSessionValid );
        setIsSessionValid(refVal_setIsSessionValid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("session_valid_until"))))
    {
        utility::datetime refVal_setSessionValidUntil;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("session_valid_until"))), refVal_setSessionValidUntil );
        setSessionValidUntil(refVal_setSessionValidUntil);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("session_created_date"))))
    {
        utility::datetime refVal_setSessionCreatedDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("session_created_date"))), refVal_setSessionCreatedDate );
        setSessionCreatedDate(refVal_setSessionCreatedDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("session_modified_date"))))
    {
        utility::datetime refVal_setSessionModifiedDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("session_modified_date"))), refVal_setSessionModifiedDate );
        setSessionModifiedDate(refVal_setSessionModifiedDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("max_open_session_count"))))
    {
        int32_t refVal_setMaxOpenSessionCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("max_open_session_count"))), refVal_setMaxOpenSessionCount );
        setMaxOpenSessionCount(refVal_setMaxOpenSessionCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("max_active_client_count"))))
    {
        int32_t refVal_setMaxActiveClientCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("max_active_client_count"))), refVal_setMaxActiveClientCount );
        setMaxActiveClientCount(refVal_setMaxActiveClientCount);
    }
    return ok;
}

bool SessionStatusDto::isIsSessionValid() const
{
    return m_Is_session_valid;
}

void SessionStatusDto::setIsSessionValid(bool value)
{
    m_Is_session_valid = value;
    m_Is_session_validIsSet = true;
}

bool SessionStatusDto::isSessionValidIsSet() const
{
    return m_Is_session_validIsSet;
}

void SessionStatusDto::unsetIs_session_valid()
{
    m_Is_session_validIsSet = false;
}
utility::datetime SessionStatusDto::getSessionValidUntil() const
{
    return m_Session_valid_until;
}

void SessionStatusDto::setSessionValidUntil(const utility::datetime& value)
{
    m_Session_valid_until = value;
    m_Session_valid_untilIsSet = true;
}

bool SessionStatusDto::sessionValidUntilIsSet() const
{
    return m_Session_valid_untilIsSet;
}

void SessionStatusDto::unsetSession_valid_until()
{
    m_Session_valid_untilIsSet = false;
}
utility::datetime SessionStatusDto::getSessionCreatedDate() const
{
    return m_Session_created_date;
}

void SessionStatusDto::setSessionCreatedDate(const utility::datetime& value)
{
    m_Session_created_date = value;
    m_Session_created_dateIsSet = true;
}

bool SessionStatusDto::sessionCreatedDateIsSet() const
{
    return m_Session_created_dateIsSet;
}

void SessionStatusDto::unsetSession_created_date()
{
    m_Session_created_dateIsSet = false;
}
utility::datetime SessionStatusDto::getSessionModifiedDate() const
{
    return m_Session_modified_date;
}

void SessionStatusDto::setSessionModifiedDate(const utility::datetime& value)
{
    m_Session_modified_date = value;
    m_Session_modified_dateIsSet = true;
}

bool SessionStatusDto::sessionModifiedDateIsSet() const
{
    return m_Session_modified_dateIsSet;
}

void SessionStatusDto::unsetSession_modified_date()
{
    m_Session_modified_dateIsSet = false;
}
int32_t SessionStatusDto::getMaxOpenSessionCount() const
{
    return m_Max_open_session_count;
}

void SessionStatusDto::setMaxOpenSessionCount(int32_t value)
{
    m_Max_open_session_count = value;
    m_Max_open_session_countIsSet = true;
}

bool SessionStatusDto::maxOpenSessionCountIsSet() const
{
    return m_Max_open_session_countIsSet;
}

void SessionStatusDto::unsetMax_open_session_count()
{
    m_Max_open_session_countIsSet = false;
}
int32_t SessionStatusDto::getMaxActiveClientCount() const
{
    return m_Max_active_client_count;
}

void SessionStatusDto::setMaxActiveClientCount(int32_t value)
{
    m_Max_active_client_count = value;
    m_Max_active_client_countIsSet = true;
}

bool SessionStatusDto::maxActiveClientCountIsSet() const
{
    return m_Max_active_client_countIsSet;
}

void SessionStatusDto::unsetMax_active_client_count()
{
    m_Max_active_client_countIsSet = false;
}
}
}
}
}


