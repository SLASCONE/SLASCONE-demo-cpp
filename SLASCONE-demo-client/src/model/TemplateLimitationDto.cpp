/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/TemplateLimitationDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



TemplateLimitationDto::TemplateLimitationDto()
{
    m_Template_id = utility::conversions::to_string_t("");
    m_Template_idIsSet = false;
    m_Limitation_id = utility::conversions::to_string_t("");
    m_Limitation_idIsSet = false;
    m_Limitation_name = utility::conversions::to_string_t("");
    m_Limitation_nameIsSet = false;
    m_Is_adjustable = false;
    m_Is_adjustableIsSet = false;
    m_Limit = 0;
    m_LimitIsSet = false;
    m_Consumption_reset_modeIsSet = false;
    m_Consumption_reset_period_days = 0;
    m_Consumption_reset_period_daysIsSet = false;
    m_Goodwill = 0.0;
    m_GoodwillIsSet = false;
    m_Enforce_limit = false;
    m_Enforce_limitIsSet = false;
    m_User_provisioning = false;
    m_User_provisioningIsSet = false;
    m_Consumption_balance_modeIsSet = false;
    m_AlertsIsSet = false;
}

TemplateLimitationDto::~TemplateLimitationDto()
{
}

void TemplateLimitationDto::validate()
{
    // TODO: implement validation
}

web::json::value TemplateLimitationDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Template_idIsSet)
    {
        val[utility::conversions::to_string_t(U("template_id"))] = ModelBase::toJson(m_Template_id);
    }
    if(m_Limitation_idIsSet)
    {
        val[utility::conversions::to_string_t(U("limitation_id"))] = ModelBase::toJson(m_Limitation_id);
    }
    if(m_Limitation_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("limitation_name"))] = ModelBase::toJson(m_Limitation_name);
    }
    if(m_Is_adjustableIsSet)
    {
        val[utility::conversions::to_string_t(U("is_adjustable"))] = ModelBase::toJson(m_Is_adjustable);
    }
    if(m_LimitIsSet)
    {
        val[utility::conversions::to_string_t(U("limit"))] = ModelBase::toJson(m_Limit);
    }
    if(m_Consumption_reset_modeIsSet)
    {
        val[utility::conversions::to_string_t(U("consumption_reset_mode"))] = ModelBase::toJson(m_Consumption_reset_mode);
    }
    if(m_Consumption_reset_period_daysIsSet)
    {
        val[utility::conversions::to_string_t(U("consumption_reset_period_days"))] = ModelBase::toJson(m_Consumption_reset_period_days);
    }
    if(m_GoodwillIsSet)
    {
        val[utility::conversions::to_string_t(U("goodwill"))] = ModelBase::toJson(m_Goodwill);
    }
    if(m_Enforce_limitIsSet)
    {
        val[utility::conversions::to_string_t(U("enforce_limit"))] = ModelBase::toJson(m_Enforce_limit);
    }
    if(m_User_provisioningIsSet)
    {
        val[utility::conversions::to_string_t(U("user_provisioning"))] = ModelBase::toJson(m_User_provisioning);
    }
    if(m_Consumption_balance_modeIsSet)
    {
        val[utility::conversions::to_string_t(U("consumption_balance_mode"))] = ModelBase::toJson(m_Consumption_balance_mode);
    }
    if(m_AlertsIsSet)
    {
        val[utility::conversions::to_string_t(U("alerts"))] = ModelBase::toJson(m_Alerts);
    }

    return val;
}

bool TemplateLimitationDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("template_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("template_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTemplateId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTemplateId);
            setTemplateId(refVal_setTemplateId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("limitation_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("limitation_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLimitationId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLimitationId);
            setLimitationId(refVal_setLimitationId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("limitation_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("limitation_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLimitationName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLimitationName);
            setLimitationName(refVal_setLimitationName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_adjustable"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_adjustable")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsAdjustable;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsAdjustable);
            setIsAdjustable(refVal_setIsAdjustable);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("limit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("limit")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLimit);
            setLimit(refVal_setLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("consumption_reset_mode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("consumption_reset_mode")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ConsumptionResetPeriod> refVal_setConsumptionResetMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConsumptionResetMode);
            setConsumptionResetMode(refVal_setConsumptionResetMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("consumption_reset_period_days"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("consumption_reset_period_days")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setConsumptionResetPeriodDays;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConsumptionResetPeriodDays);
            setConsumptionResetPeriodDays(refVal_setConsumptionResetPeriodDays);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("goodwill"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("goodwill")));
        if(!fieldValue.is_null())
        {
            double refVal_setGoodwill;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGoodwill);
            setGoodwill(refVal_setGoodwill);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("enforce_limit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("enforce_limit")));
        if(!fieldValue.is_null())
        {
            bool refVal_setEnforceLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEnforceLimit);
            setEnforceLimit(refVal_setEnforceLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("user_provisioning"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("user_provisioning")));
        if(!fieldValue.is_null())
        {
            bool refVal_setUserProvisioning;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserProvisioning);
            setUserProvisioning(refVal_setUserProvisioning);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("consumption_balance_mode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("consumption_balance_mode")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ConsumptionBalanceMode> refVal_setConsumptionBalanceMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConsumptionBalanceMode);
            setConsumptionBalanceMode(refVal_setConsumptionBalanceMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("alerts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("alerts")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<TemplateLimitationAlertDto>> refVal_setAlerts;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAlerts);
            setAlerts(refVal_setAlerts);
        }
    }
    return ok;
}

void TemplateLimitationDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Template_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("template_id")), m_Template_id));
    }
    if(m_Limitation_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("limitation_id")), m_Limitation_id));
    }
    if(m_Limitation_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("limitation_name")), m_Limitation_name));
    }
    if(m_Is_adjustableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_adjustable")), m_Is_adjustable));
    }
    if(m_LimitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("limit")), m_Limit));
    }
    if(m_Consumption_reset_modeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("consumption_reset_mode")), m_Consumption_reset_mode));
    }
    if(m_Consumption_reset_period_daysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("consumption_reset_period_days")), m_Consumption_reset_period_days));
    }
    if(m_GoodwillIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("goodwill")), m_Goodwill));
    }
    if(m_Enforce_limitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("enforce_limit")), m_Enforce_limit));
    }
    if(m_User_provisioningIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("user_provisioning")), m_User_provisioning));
    }
    if(m_Consumption_balance_modeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("consumption_balance_mode")), m_Consumption_balance_mode));
    }
    if(m_AlertsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("alerts")), m_Alerts));
    }
}

bool TemplateLimitationDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("template_id"))))
    {
        utility::string_t refVal_setTemplateId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("template_id"))), refVal_setTemplateId );
        setTemplateId(refVal_setTemplateId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("limitation_id"))))
    {
        utility::string_t refVal_setLimitationId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("limitation_id"))), refVal_setLimitationId );
        setLimitationId(refVal_setLimitationId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("limitation_name"))))
    {
        utility::string_t refVal_setLimitationName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("limitation_name"))), refVal_setLimitationName );
        setLimitationName(refVal_setLimitationName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_adjustable"))))
    {
        bool refVal_setIsAdjustable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_adjustable"))), refVal_setIsAdjustable );
        setIsAdjustable(refVal_setIsAdjustable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("limit"))))
    {
        int32_t refVal_setLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("limit"))), refVal_setLimit );
        setLimit(refVal_setLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("consumption_reset_mode"))))
    {
        std::shared_ptr<ConsumptionResetPeriod> refVal_setConsumptionResetMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("consumption_reset_mode"))), refVal_setConsumptionResetMode );
        setConsumptionResetMode(refVal_setConsumptionResetMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("consumption_reset_period_days"))))
    {
        int32_t refVal_setConsumptionResetPeriodDays;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("consumption_reset_period_days"))), refVal_setConsumptionResetPeriodDays );
        setConsumptionResetPeriodDays(refVal_setConsumptionResetPeriodDays);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("goodwill"))))
    {
        double refVal_setGoodwill;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("goodwill"))), refVal_setGoodwill );
        setGoodwill(refVal_setGoodwill);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("enforce_limit"))))
    {
        bool refVal_setEnforceLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("enforce_limit"))), refVal_setEnforceLimit );
        setEnforceLimit(refVal_setEnforceLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("user_provisioning"))))
    {
        bool refVal_setUserProvisioning;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("user_provisioning"))), refVal_setUserProvisioning );
        setUserProvisioning(refVal_setUserProvisioning);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("consumption_balance_mode"))))
    {
        std::shared_ptr<ConsumptionBalanceMode> refVal_setConsumptionBalanceMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("consumption_balance_mode"))), refVal_setConsumptionBalanceMode );
        setConsumptionBalanceMode(refVal_setConsumptionBalanceMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("alerts"))))
    {
        std::vector<std::shared_ptr<TemplateLimitationAlertDto>> refVal_setAlerts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("alerts"))), refVal_setAlerts );
        setAlerts(refVal_setAlerts);
    }
    return ok;
}

utility::string_t TemplateLimitationDto::getTemplateId() const
{
    return m_Template_id;
}

void TemplateLimitationDto::setTemplateId(const utility::string_t& value)
{
    m_Template_id = value;
    m_Template_idIsSet = true;
}

bool TemplateLimitationDto::templateIdIsSet() const
{
    return m_Template_idIsSet;
}

void TemplateLimitationDto::unsetTemplate_id()
{
    m_Template_idIsSet = false;
}
utility::string_t TemplateLimitationDto::getLimitationId() const
{
    return m_Limitation_id;
}

void TemplateLimitationDto::setLimitationId(const utility::string_t& value)
{
    m_Limitation_id = value;
    m_Limitation_idIsSet = true;
}

bool TemplateLimitationDto::limitationIdIsSet() const
{
    return m_Limitation_idIsSet;
}

void TemplateLimitationDto::unsetLimitation_id()
{
    m_Limitation_idIsSet = false;
}
utility::string_t TemplateLimitationDto::getLimitationName() const
{
    return m_Limitation_name;
}

void TemplateLimitationDto::setLimitationName(const utility::string_t& value)
{
    m_Limitation_name = value;
    m_Limitation_nameIsSet = true;
}

bool TemplateLimitationDto::limitationNameIsSet() const
{
    return m_Limitation_nameIsSet;
}

void TemplateLimitationDto::unsetLimitation_name()
{
    m_Limitation_nameIsSet = false;
}
bool TemplateLimitationDto::isIsAdjustable() const
{
    return m_Is_adjustable;
}

void TemplateLimitationDto::setIsAdjustable(bool value)
{
    m_Is_adjustable = value;
    m_Is_adjustableIsSet = true;
}

bool TemplateLimitationDto::isAdjustableIsSet() const
{
    return m_Is_adjustableIsSet;
}

void TemplateLimitationDto::unsetIs_adjustable()
{
    m_Is_adjustableIsSet = false;
}
int32_t TemplateLimitationDto::getLimit() const
{
    return m_Limit;
}

void TemplateLimitationDto::setLimit(int32_t value)
{
    m_Limit = value;
    m_LimitIsSet = true;
}

bool TemplateLimitationDto::limitIsSet() const
{
    return m_LimitIsSet;
}

void TemplateLimitationDto::unsetLimit()
{
    m_LimitIsSet = false;
}
std::shared_ptr<ConsumptionResetPeriod> TemplateLimitationDto::getConsumptionResetMode() const
{
    return m_Consumption_reset_mode;
}

void TemplateLimitationDto::setConsumptionResetMode(const std::shared_ptr<ConsumptionResetPeriod>& value)
{
    m_Consumption_reset_mode = value;
    m_Consumption_reset_modeIsSet = true;
}

bool TemplateLimitationDto::consumptionResetModeIsSet() const
{
    return m_Consumption_reset_modeIsSet;
}

void TemplateLimitationDto::unsetConsumption_reset_mode()
{
    m_Consumption_reset_modeIsSet = false;
}
int32_t TemplateLimitationDto::getConsumptionResetPeriodDays() const
{
    return m_Consumption_reset_period_days;
}

void TemplateLimitationDto::setConsumptionResetPeriodDays(int32_t value)
{
    m_Consumption_reset_period_days = value;
    m_Consumption_reset_period_daysIsSet = true;
}

bool TemplateLimitationDto::consumptionResetPeriodDaysIsSet() const
{
    return m_Consumption_reset_period_daysIsSet;
}

void TemplateLimitationDto::unsetConsumption_reset_period_days()
{
    m_Consumption_reset_period_daysIsSet = false;
}
double TemplateLimitationDto::getGoodwill() const
{
    return m_Goodwill;
}

void TemplateLimitationDto::setGoodwill(double value)
{
    m_Goodwill = value;
    m_GoodwillIsSet = true;
}

bool TemplateLimitationDto::goodwillIsSet() const
{
    return m_GoodwillIsSet;
}

void TemplateLimitationDto::unsetGoodwill()
{
    m_GoodwillIsSet = false;
}
bool TemplateLimitationDto::isEnforceLimit() const
{
    return m_Enforce_limit;
}

void TemplateLimitationDto::setEnforceLimit(bool value)
{
    m_Enforce_limit = value;
    m_Enforce_limitIsSet = true;
}

bool TemplateLimitationDto::enforceLimitIsSet() const
{
    return m_Enforce_limitIsSet;
}

void TemplateLimitationDto::unsetEnforce_limit()
{
    m_Enforce_limitIsSet = false;
}
bool TemplateLimitationDto::isUserProvisioning() const
{
    return m_User_provisioning;
}

void TemplateLimitationDto::setUserProvisioning(bool value)
{
    m_User_provisioning = value;
    m_User_provisioningIsSet = true;
}

bool TemplateLimitationDto::userProvisioningIsSet() const
{
    return m_User_provisioningIsSet;
}

void TemplateLimitationDto::unsetUser_provisioning()
{
    m_User_provisioningIsSet = false;
}
std::shared_ptr<ConsumptionBalanceMode> TemplateLimitationDto::getConsumptionBalanceMode() const
{
    return m_Consumption_balance_mode;
}

void TemplateLimitationDto::setConsumptionBalanceMode(const std::shared_ptr<ConsumptionBalanceMode>& value)
{
    m_Consumption_balance_mode = value;
    m_Consumption_balance_modeIsSet = true;
}

bool TemplateLimitationDto::consumptionBalanceModeIsSet() const
{
    return m_Consumption_balance_modeIsSet;
}

void TemplateLimitationDto::unsetConsumption_balance_mode()
{
    m_Consumption_balance_modeIsSet = false;
}
std::vector<std::shared_ptr<TemplateLimitationAlertDto>>& TemplateLimitationDto::getAlerts()
{
    return m_Alerts;
}

void TemplateLimitationDto::setAlerts(const std::vector<std::shared_ptr<TemplateLimitationAlertDto>>& value)
{
    m_Alerts = value;
    m_AlertsIsSet = true;
}

bool TemplateLimitationDto::alertsIsSet() const
{
    return m_AlertsIsSet;
}

void TemplateLimitationDto::unsetAlerts()
{
    m_AlertsIsSet = false;
}
}
}
}
}


