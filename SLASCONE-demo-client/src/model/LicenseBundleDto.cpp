/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/LicenseBundleDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



LicenseBundleDto::LicenseBundleDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Is_active = false;
    m_Is_activeIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Customer_id = utility::conversions::to_string_t("");
    m_Customer_idIsSet = false;
    m_Customer_name = utility::conversions::to_string_t("");
    m_Customer_nameIsSet = false;
    m_Created_date_utc = utility::datetime();
    m_Created_date_utcIsSet = false;
    m_Modified_date_utc = utility::datetime();
    m_Modified_date_utcIsSet = false;
    m_Last_modified_by = utility::conversions::to_string_t("");
    m_Last_modified_byIsSet = false;
    m_AssignmentsIsSet = false;
}

LicenseBundleDto::~LicenseBundleDto()
{
}

void LicenseBundleDto::validate()
{
    // TODO: implement validation
}

web::json::value LicenseBundleDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_Is_activeIsSet)
    {
        val[utility::conversions::to_string_t(U("is_active"))] = ModelBase::toJson(m_Is_active);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_Customer_idIsSet)
    {
        val[utility::conversions::to_string_t(U("customer_id"))] = ModelBase::toJson(m_Customer_id);
    }
    if(m_Customer_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("customer_name"))] = ModelBase::toJson(m_Customer_name);
    }
    if(m_Created_date_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("created_date_utc"))] = ModelBase::toJson(m_Created_date_utc);
    }
    if(m_Modified_date_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("modified_date_utc"))] = ModelBase::toJson(m_Modified_date_utc);
    }
    if(m_Last_modified_byIsSet)
    {
        val[utility::conversions::to_string_t(U("last_modified_by"))] = ModelBase::toJson(m_Last_modified_by);
    }
    if(m_AssignmentsIsSet)
    {
        val[utility::conversions::to_string_t(U("assignments"))] = ModelBase::toJson(m_Assignments);
    }

    return val;
}

bool LicenseBundleDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_active"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_active")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsActive;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsActive);
            setIsActive(refVal_setIsActive);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("customer_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("customer_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCustomerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomerId);
            setCustomerId(refVal_setCustomerId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("customer_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("customer_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCustomerName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomerName);
            setCustomerName(refVal_setCustomerName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_date_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_date_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedDateUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedDateUtc);
            setCreatedDateUtc(refVal_setCreatedDateUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("modified_date_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("modified_date_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setModifiedDateUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModifiedDateUtc);
            setModifiedDateUtc(refVal_setModifiedDateUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("last_modified_by"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("last_modified_by")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLastModifiedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastModifiedBy);
            setLastModifiedBy(refVal_setLastModifiedBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("assignments"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("assignments")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<LicenseBundleAssignmentDto>> refVal_setAssignments;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssignments);
            setAssignments(refVal_setAssignments);
        }
    }
    return ok;
}

void LicenseBundleDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_Is_activeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_active")), m_Is_active));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_Customer_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("customer_id")), m_Customer_id));
    }
    if(m_Customer_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("customer_name")), m_Customer_name));
    }
    if(m_Created_date_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_date_utc")), m_Created_date_utc));
    }
    if(m_Modified_date_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("modified_date_utc")), m_Modified_date_utc));
    }
    if(m_Last_modified_byIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("last_modified_by")), m_Last_modified_by));
    }
    if(m_AssignmentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("assignments")), m_Assignments));
    }
}

bool LicenseBundleDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_active"))))
    {
        bool refVal_setIsActive;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_active"))), refVal_setIsActive );
        setIsActive(refVal_setIsActive);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("customer_id"))))
    {
        utility::string_t refVal_setCustomerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("customer_id"))), refVal_setCustomerId );
        setCustomerId(refVal_setCustomerId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("customer_name"))))
    {
        utility::string_t refVal_setCustomerName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("customer_name"))), refVal_setCustomerName );
        setCustomerName(refVal_setCustomerName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_date_utc"))))
    {
        utility::datetime refVal_setCreatedDateUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_date_utc"))), refVal_setCreatedDateUtc );
        setCreatedDateUtc(refVal_setCreatedDateUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("modified_date_utc"))))
    {
        utility::datetime refVal_setModifiedDateUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("modified_date_utc"))), refVal_setModifiedDateUtc );
        setModifiedDateUtc(refVal_setModifiedDateUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("last_modified_by"))))
    {
        utility::string_t refVal_setLastModifiedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("last_modified_by"))), refVal_setLastModifiedBy );
        setLastModifiedBy(refVal_setLastModifiedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("assignments"))))
    {
        std::vector<std::shared_ptr<LicenseBundleAssignmentDto>> refVal_setAssignments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("assignments"))), refVal_setAssignments );
        setAssignments(refVal_setAssignments);
    }
    return ok;
}

utility::string_t LicenseBundleDto::getId() const
{
    return m_Id;
}

void LicenseBundleDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool LicenseBundleDto::idIsSet() const
{
    return m_IdIsSet;
}

void LicenseBundleDto::unsetId()
{
    m_IdIsSet = false;
}
bool LicenseBundleDto::isIsActive() const
{
    return m_Is_active;
}

void LicenseBundleDto::setIsActive(bool value)
{
    m_Is_active = value;
    m_Is_activeIsSet = true;
}

bool LicenseBundleDto::isActiveIsSet() const
{
    return m_Is_activeIsSet;
}

void LicenseBundleDto::unsetIs_active()
{
    m_Is_activeIsSet = false;
}
utility::string_t LicenseBundleDto::getDescription() const
{
    return m_Description;
}

void LicenseBundleDto::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool LicenseBundleDto::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void LicenseBundleDto::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t LicenseBundleDto::getCustomerId() const
{
    return m_Customer_id;
}

void LicenseBundleDto::setCustomerId(const utility::string_t& value)
{
    m_Customer_id = value;
    m_Customer_idIsSet = true;
}

bool LicenseBundleDto::customerIdIsSet() const
{
    return m_Customer_idIsSet;
}

void LicenseBundleDto::unsetCustomer_id()
{
    m_Customer_idIsSet = false;
}
utility::string_t LicenseBundleDto::getCustomerName() const
{
    return m_Customer_name;
}

void LicenseBundleDto::setCustomerName(const utility::string_t& value)
{
    m_Customer_name = value;
    m_Customer_nameIsSet = true;
}

bool LicenseBundleDto::customerNameIsSet() const
{
    return m_Customer_nameIsSet;
}

void LicenseBundleDto::unsetCustomer_name()
{
    m_Customer_nameIsSet = false;
}
utility::datetime LicenseBundleDto::getCreatedDateUtc() const
{
    return m_Created_date_utc;
}

void LicenseBundleDto::setCreatedDateUtc(const utility::datetime& value)
{
    m_Created_date_utc = value;
    m_Created_date_utcIsSet = true;
}

bool LicenseBundleDto::createdDateUtcIsSet() const
{
    return m_Created_date_utcIsSet;
}

void LicenseBundleDto::unsetCreated_date_utc()
{
    m_Created_date_utcIsSet = false;
}
utility::datetime LicenseBundleDto::getModifiedDateUtc() const
{
    return m_Modified_date_utc;
}

void LicenseBundleDto::setModifiedDateUtc(const utility::datetime& value)
{
    m_Modified_date_utc = value;
    m_Modified_date_utcIsSet = true;
}

bool LicenseBundleDto::modifiedDateUtcIsSet() const
{
    return m_Modified_date_utcIsSet;
}

void LicenseBundleDto::unsetModified_date_utc()
{
    m_Modified_date_utcIsSet = false;
}
utility::string_t LicenseBundleDto::getLastModifiedBy() const
{
    return m_Last_modified_by;
}

void LicenseBundleDto::setLastModifiedBy(const utility::string_t& value)
{
    m_Last_modified_by = value;
    m_Last_modified_byIsSet = true;
}

bool LicenseBundleDto::lastModifiedByIsSet() const
{
    return m_Last_modified_byIsSet;
}

void LicenseBundleDto::unsetLast_modified_by()
{
    m_Last_modified_byIsSet = false;
}
std::vector<std::shared_ptr<LicenseBundleAssignmentDto>>& LicenseBundleDto::getAssignments()
{
    return m_Assignments;
}

void LicenseBundleDto::setAssignments(const std::vector<std::shared_ptr<LicenseBundleAssignmentDto>>& value)
{
    m_Assignments = value;
    m_AssignmentsIsSet = true;
}

bool LicenseBundleDto::assignmentsIsSet() const
{
    return m_AssignmentsIsSet;
}

void LicenseBundleDto::unsetAssignments()
{
    m_AssignmentsIsSet = false;
}
}
}
}
}


