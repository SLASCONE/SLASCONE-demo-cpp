/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/LicenseMailDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



LicenseMailDto::LicenseMailDto()
{
    m_LicenseKey = utility::conversions::to_string_t("");
    m_LicenseKeyIsSet = false;
    m_EmailTemplateId = utility::conversions::to_string_t("");
    m_EmailTemplateIdIsSet = false;
    m_Language = utility::conversions::to_string_t("");
    m_LanguageIsSet = false;
    m_ProductId = utility::conversions::to_string_t("");
    m_ProductIdIsSet = false;
    m_ToEmailsIsSet = false;
    m_CcEmailsIsSet = false;
}

LicenseMailDto::~LicenseMailDto()
{
}

void LicenseMailDto::validate()
{
    // TODO: implement validation
}

web::json::value LicenseMailDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_LicenseKeyIsSet)
    {
        val[utility::conversions::to_string_t(U("licenseKey"))] = ModelBase::toJson(m_LicenseKey);
    }
    if(m_EmailTemplateIdIsSet)
    {
        val[utility::conversions::to_string_t(U("emailTemplateId"))] = ModelBase::toJson(m_EmailTemplateId);
    }
    if(m_LanguageIsSet)
    {
        val[utility::conversions::to_string_t(U("language"))] = ModelBase::toJson(m_Language);
    }
    if(m_ProductIdIsSet)
    {
        val[utility::conversions::to_string_t(U("productId"))] = ModelBase::toJson(m_ProductId);
    }
    if(m_ToEmailsIsSet)
    {
        val[utility::conversions::to_string_t(U("toEmails"))] = ModelBase::toJson(m_ToEmails);
    }
    if(m_CcEmailsIsSet)
    {
        val[utility::conversions::to_string_t(U("ccEmails"))] = ModelBase::toJson(m_CcEmails);
    }

    return val;
}

bool LicenseMailDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("licenseKey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("licenseKey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLicenseKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenseKey);
            setLicenseKey(refVal_setLicenseKey);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("emailTemplateId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("emailTemplateId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEmailTemplateId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEmailTemplateId);
            setEmailTemplateId(refVal_setEmailTemplateId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("language"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("language")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLanguage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLanguage);
            setLanguage(refVal_setLanguage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("productId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("productId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProductId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProductId);
            setProductId(refVal_setProductId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("toEmails"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("toEmails")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setToEmails;
            ok &= ModelBase::fromJson(fieldValue, refVal_setToEmails);
            setToEmails(refVal_setToEmails);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ccEmails"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ccEmails")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setCcEmails;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCcEmails);
            setCcEmails(refVal_setCcEmails);
        }
    }
    return ok;
}

void LicenseMailDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_LicenseKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("licenseKey")), m_LicenseKey));
    }
    if(m_EmailTemplateIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("emailTemplateId")), m_EmailTemplateId));
    }
    if(m_LanguageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("language")), m_Language));
    }
    if(m_ProductIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("productId")), m_ProductId));
    }
    if(m_ToEmailsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("toEmails")), m_ToEmails));
    }
    if(m_CcEmailsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ccEmails")), m_CcEmails));
    }
}

bool LicenseMailDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("licenseKey"))))
    {
        utility::string_t refVal_setLicenseKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("licenseKey"))), refVal_setLicenseKey );
        setLicenseKey(refVal_setLicenseKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("emailTemplateId"))))
    {
        utility::string_t refVal_setEmailTemplateId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("emailTemplateId"))), refVal_setEmailTemplateId );
        setEmailTemplateId(refVal_setEmailTemplateId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("language"))))
    {
        utility::string_t refVal_setLanguage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("language"))), refVal_setLanguage );
        setLanguage(refVal_setLanguage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("productId"))))
    {
        utility::string_t refVal_setProductId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("productId"))), refVal_setProductId );
        setProductId(refVal_setProductId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("toEmails"))))
    {
        std::vector<utility::string_t> refVal_setToEmails;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("toEmails"))), refVal_setToEmails );
        setToEmails(refVal_setToEmails);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ccEmails"))))
    {
        std::vector<utility::string_t> refVal_setCcEmails;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ccEmails"))), refVal_setCcEmails );
        setCcEmails(refVal_setCcEmails);
    }
    return ok;
}

utility::string_t LicenseMailDto::getLicenseKey() const
{
    return m_LicenseKey;
}

void LicenseMailDto::setLicenseKey(const utility::string_t& value)
{
    m_LicenseKey = value;
    m_LicenseKeyIsSet = true;
}

bool LicenseMailDto::licenseKeyIsSet() const
{
    return m_LicenseKeyIsSet;
}

void LicenseMailDto::unsetLicenseKey()
{
    m_LicenseKeyIsSet = false;
}
utility::string_t LicenseMailDto::getEmailTemplateId() const
{
    return m_EmailTemplateId;
}

void LicenseMailDto::setEmailTemplateId(const utility::string_t& value)
{
    m_EmailTemplateId = value;
    m_EmailTemplateIdIsSet = true;
}

bool LicenseMailDto::emailTemplateIdIsSet() const
{
    return m_EmailTemplateIdIsSet;
}

void LicenseMailDto::unsetEmailTemplateId()
{
    m_EmailTemplateIdIsSet = false;
}
utility::string_t LicenseMailDto::getLanguage() const
{
    return m_Language;
}

void LicenseMailDto::setLanguage(const utility::string_t& value)
{
    m_Language = value;
    m_LanguageIsSet = true;
}

bool LicenseMailDto::languageIsSet() const
{
    return m_LanguageIsSet;
}

void LicenseMailDto::unsetLanguage()
{
    m_LanguageIsSet = false;
}
utility::string_t LicenseMailDto::getProductId() const
{
    return m_ProductId;
}

void LicenseMailDto::setProductId(const utility::string_t& value)
{
    m_ProductId = value;
    m_ProductIdIsSet = true;
}

bool LicenseMailDto::productIdIsSet() const
{
    return m_ProductIdIsSet;
}

void LicenseMailDto::unsetProductId()
{
    m_ProductIdIsSet = false;
}
std::vector<utility::string_t>& LicenseMailDto::getToEmails()
{
    return m_ToEmails;
}

void LicenseMailDto::setToEmails(const std::vector<utility::string_t>& value)
{
    m_ToEmails = value;
    m_ToEmailsIsSet = true;
}

bool LicenseMailDto::toEmailsIsSet() const
{
    return m_ToEmailsIsSet;
}

void LicenseMailDto::unsetToEmails()
{
    m_ToEmailsIsSet = false;
}
std::vector<utility::string_t>& LicenseMailDto::getCcEmails()
{
    return m_CcEmails;
}

void LicenseMailDto::setCcEmails(const std::vector<utility::string_t>& value)
{
    m_CcEmails = value;
    m_CcEmailsIsSet = true;
}

bool LicenseMailDto::ccEmailsIsSet() const
{
    return m_CcEmailsIsSet;
}

void LicenseMailDto::unsetCcEmails()
{
    m_CcEmailsIsSet = false;
}
}
}
}
}


