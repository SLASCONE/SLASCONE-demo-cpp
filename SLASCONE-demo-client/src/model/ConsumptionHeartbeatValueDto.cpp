/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/ConsumptionHeartbeatValueDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ConsumptionHeartbeatValueDto::ConsumptionHeartbeatValueDto()
{
    m_Limitation_id = utility::conversions::to_string_t("");
    m_Limitation_idIsSet = false;
    m_User_id = utility::conversions::to_string_t("");
    m_User_idIsSet = false;
    m_Timestamp_utc = utility::datetime();
    m_Timestamp_utcIsSet = false;
    m_Value = 0.0;
    m_ValueIsSet = false;
}

ConsumptionHeartbeatValueDto::~ConsumptionHeartbeatValueDto()
{
}

void ConsumptionHeartbeatValueDto::validate()
{
    // TODO: implement validation
}

web::json::value ConsumptionHeartbeatValueDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Limitation_idIsSet)
    {
        val[utility::conversions::to_string_t(U("limitation_id"))] = ModelBase::toJson(m_Limitation_id);
    }
    if(m_User_idIsSet)
    {
        val[utility::conversions::to_string_t(U("user_id"))] = ModelBase::toJson(m_User_id);
    }
    if(m_Timestamp_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("timestamp_utc"))] = ModelBase::toJson(m_Timestamp_utc);
    }
    if(m_ValueIsSet)
    {
        val[utility::conversions::to_string_t(U("value"))] = ModelBase::toJson(m_Value);
    }

    return val;
}

bool ConsumptionHeartbeatValueDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("limitation_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("limitation_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLimitationId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLimitationId);
            setLimitationId(refVal_setLimitationId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("user_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("user_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserId);
            setUserId(refVal_setUserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimestampUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestampUtc);
            setTimestampUtc(refVal_setTimestampUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("value"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("value")));
        if(!fieldValue.is_null())
        {
            double refVal_setValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValue);
            setValue(refVal_setValue);
        }
    }
    return ok;
}

void ConsumptionHeartbeatValueDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Limitation_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("limitation_id")), m_Limitation_id));
    }
    if(m_User_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("user_id")), m_User_id));
    }
    if(m_Timestamp_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp_utc")), m_Timestamp_utc));
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("value")), m_Value));
    }
}

bool ConsumptionHeartbeatValueDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("limitation_id"))))
    {
        utility::string_t refVal_setLimitationId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("limitation_id"))), refVal_setLimitationId );
        setLimitationId(refVal_setLimitationId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("user_id"))))
    {
        utility::string_t refVal_setUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("user_id"))), refVal_setUserId );
        setUserId(refVal_setUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp_utc"))))
    {
        utility::datetime refVal_setTimestampUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp_utc"))), refVal_setTimestampUtc );
        setTimestampUtc(refVal_setTimestampUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("value"))))
    {
        double refVal_setValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("value"))), refVal_setValue );
        setValue(refVal_setValue);
    }
    return ok;
}

utility::string_t ConsumptionHeartbeatValueDto::getLimitationId() const
{
    return m_Limitation_id;
}

void ConsumptionHeartbeatValueDto::setLimitationId(const utility::string_t& value)
{
    m_Limitation_id = value;
    m_Limitation_idIsSet = true;
}

bool ConsumptionHeartbeatValueDto::limitationIdIsSet() const
{
    return m_Limitation_idIsSet;
}

void ConsumptionHeartbeatValueDto::unsetLimitation_id()
{
    m_Limitation_idIsSet = false;
}
utility::string_t ConsumptionHeartbeatValueDto::getUserId() const
{
    return m_User_id;
}

void ConsumptionHeartbeatValueDto::setUserId(const utility::string_t& value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}

bool ConsumptionHeartbeatValueDto::userIdIsSet() const
{
    return m_User_idIsSet;
}

void ConsumptionHeartbeatValueDto::unsetUser_id()
{
    m_User_idIsSet = false;
}
utility::datetime ConsumptionHeartbeatValueDto::getTimestampUtc() const
{
    return m_Timestamp_utc;
}

void ConsumptionHeartbeatValueDto::setTimestampUtc(const utility::datetime& value)
{
    m_Timestamp_utc = value;
    m_Timestamp_utcIsSet = true;
}

bool ConsumptionHeartbeatValueDto::timestampUtcIsSet() const
{
    return m_Timestamp_utcIsSet;
}

void ConsumptionHeartbeatValueDto::unsetTimestamp_utc()
{
    m_Timestamp_utcIsSet = false;
}
double ConsumptionHeartbeatValueDto::getValue() const
{
    return m_Value;
}

void ConsumptionHeartbeatValueDto::setValue(double value)
{
    m_Value = value;
    m_ValueIsSet = true;
}

bool ConsumptionHeartbeatValueDto::valueIsSet() const
{
    return m_ValueIsSet;
}

void ConsumptionHeartbeatValueDto::unsetValue()
{
    m_ValueIsSet = false;
}
}
}
}
}


