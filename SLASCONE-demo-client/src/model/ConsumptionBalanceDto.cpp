/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/ConsumptionBalanceDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ConsumptionBalanceDto::ConsumptionBalanceDto()
{
    m_Limit = 0.0;
    m_LimitIsSet = false;
    m_Remaining = 0.0;
    m_RemainingIsSet = false;
    m_Last_reset_date_utc = utility::datetime();
    m_Last_reset_date_utcIsSet = false;
    m_Assignment_id = utility::conversions::to_string_t("");
    m_Assignment_idIsSet = false;
    m_License_id = utility::conversions::to_string_t("");
    m_License_idIsSet = false;
    m_Limitation_id = utility::conversions::to_string_t("");
    m_Limitation_idIsSet = false;
    m_LimitationIsSet = false;
    m_Reset_modeIsSet = false;
    m_Reset_period_days = 0;
    m_Reset_period_daysIsSet = false;
    m_Consumption_balance_modeIsSet = false;
    m_Next_reset_date_utc = utility::datetime();
    m_Next_reset_date_utcIsSet = false;
}

ConsumptionBalanceDto::~ConsumptionBalanceDto()
{
}

void ConsumptionBalanceDto::validate()
{
    // TODO: implement validation
}

web::json::value ConsumptionBalanceDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_LimitIsSet)
    {
        val[utility::conversions::to_string_t(U("limit"))] = ModelBase::toJson(m_Limit);
    }
    if(m_RemainingIsSet)
    {
        val[utility::conversions::to_string_t(U("remaining"))] = ModelBase::toJson(m_Remaining);
    }
    if(m_Last_reset_date_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("last_reset_date_utc"))] = ModelBase::toJson(m_Last_reset_date_utc);
    }
    if(m_Assignment_idIsSet)
    {
        val[utility::conversions::to_string_t(U("assignment_id"))] = ModelBase::toJson(m_Assignment_id);
    }
    if(m_License_idIsSet)
    {
        val[utility::conversions::to_string_t(U("license_id"))] = ModelBase::toJson(m_License_id);
    }
    if(m_Limitation_idIsSet)
    {
        val[utility::conversions::to_string_t(U("limitation_id"))] = ModelBase::toJson(m_Limitation_id);
    }
    if(m_LimitationIsSet)
    {
        val[utility::conversions::to_string_t(U("limitation"))] = ModelBase::toJson(m_Limitation);
    }
    if(m_Reset_modeIsSet)
    {
        val[utility::conversions::to_string_t(U("reset_mode"))] = ModelBase::toJson(m_Reset_mode);
    }
    if(m_Reset_period_daysIsSet)
    {
        val[utility::conversions::to_string_t(U("reset_period_days"))] = ModelBase::toJson(m_Reset_period_days);
    }
    if(m_Consumption_balance_modeIsSet)
    {
        val[utility::conversions::to_string_t(U("consumption_balance_mode"))] = ModelBase::toJson(m_Consumption_balance_mode);
    }
    if(m_Next_reset_date_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("next_reset_date_utc"))] = ModelBase::toJson(m_Next_reset_date_utc);
    }

    return val;
}

bool ConsumptionBalanceDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("limit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("limit")));
        if(!fieldValue.is_null())
        {
            double refVal_setLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLimit);
            setLimit(refVal_setLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("remaining"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("remaining")));
        if(!fieldValue.is_null())
        {
            double refVal_setRemaining;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRemaining);
            setRemaining(refVal_setRemaining);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("last_reset_date_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("last_reset_date_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setLastResetDateUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastResetDateUtc);
            setLastResetDateUtc(refVal_setLastResetDateUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("assignment_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("assignment_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssignmentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssignmentId);
            setAssignmentId(refVal_setAssignmentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("license_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("license_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLicenseId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenseId);
            setLicenseId(refVal_setLicenseId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("limitation_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("limitation_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLimitationId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLimitationId);
            setLimitationId(refVal_setLimitationId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("limitation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("limitation")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<LimitationDto> refVal_setLimitation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLimitation);
            setLimitation(refVal_setLimitation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reset_mode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reset_mode")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ConsumptionResetPeriod> refVal_setResetMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResetMode);
            setResetMode(refVal_setResetMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reset_period_days"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reset_period_days")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setResetPeriodDays;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResetPeriodDays);
            setResetPeriodDays(refVal_setResetPeriodDays);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("consumption_balance_mode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("consumption_balance_mode")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ConsumptionBalanceMode> refVal_setConsumptionBalanceMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConsumptionBalanceMode);
            setConsumptionBalanceMode(refVal_setConsumptionBalanceMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("next_reset_date_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("next_reset_date_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setNextResetDateUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNextResetDateUtc);
            setNextResetDateUtc(refVal_setNextResetDateUtc);
        }
    }
    return ok;
}

void ConsumptionBalanceDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_LimitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("limit")), m_Limit));
    }
    if(m_RemainingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("remaining")), m_Remaining));
    }
    if(m_Last_reset_date_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("last_reset_date_utc")), m_Last_reset_date_utc));
    }
    if(m_Assignment_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("assignment_id")), m_Assignment_id));
    }
    if(m_License_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("license_id")), m_License_id));
    }
    if(m_Limitation_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("limitation_id")), m_Limitation_id));
    }
    if(m_LimitationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("limitation")), m_Limitation));
    }
    if(m_Reset_modeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reset_mode")), m_Reset_mode));
    }
    if(m_Reset_period_daysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reset_period_days")), m_Reset_period_days));
    }
    if(m_Consumption_balance_modeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("consumption_balance_mode")), m_Consumption_balance_mode));
    }
    if(m_Next_reset_date_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("next_reset_date_utc")), m_Next_reset_date_utc));
    }
}

bool ConsumptionBalanceDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("limit"))))
    {
        double refVal_setLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("limit"))), refVal_setLimit );
        setLimit(refVal_setLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("remaining"))))
    {
        double refVal_setRemaining;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("remaining"))), refVal_setRemaining );
        setRemaining(refVal_setRemaining);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("last_reset_date_utc"))))
    {
        utility::datetime refVal_setLastResetDateUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("last_reset_date_utc"))), refVal_setLastResetDateUtc );
        setLastResetDateUtc(refVal_setLastResetDateUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("assignment_id"))))
    {
        utility::string_t refVal_setAssignmentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("assignment_id"))), refVal_setAssignmentId );
        setAssignmentId(refVal_setAssignmentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("license_id"))))
    {
        utility::string_t refVal_setLicenseId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("license_id"))), refVal_setLicenseId );
        setLicenseId(refVal_setLicenseId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("limitation_id"))))
    {
        utility::string_t refVal_setLimitationId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("limitation_id"))), refVal_setLimitationId );
        setLimitationId(refVal_setLimitationId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("limitation"))))
    {
        std::shared_ptr<LimitationDto> refVal_setLimitation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("limitation"))), refVal_setLimitation );
        setLimitation(refVal_setLimitation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reset_mode"))))
    {
        std::shared_ptr<ConsumptionResetPeriod> refVal_setResetMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reset_mode"))), refVal_setResetMode );
        setResetMode(refVal_setResetMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reset_period_days"))))
    {
        int32_t refVal_setResetPeriodDays;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reset_period_days"))), refVal_setResetPeriodDays );
        setResetPeriodDays(refVal_setResetPeriodDays);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("consumption_balance_mode"))))
    {
        std::shared_ptr<ConsumptionBalanceMode> refVal_setConsumptionBalanceMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("consumption_balance_mode"))), refVal_setConsumptionBalanceMode );
        setConsumptionBalanceMode(refVal_setConsumptionBalanceMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("next_reset_date_utc"))))
    {
        utility::datetime refVal_setNextResetDateUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("next_reset_date_utc"))), refVal_setNextResetDateUtc );
        setNextResetDateUtc(refVal_setNextResetDateUtc);
    }
    return ok;
}

double ConsumptionBalanceDto::getLimit() const
{
    return m_Limit;
}

void ConsumptionBalanceDto::setLimit(double value)
{
    m_Limit = value;
    m_LimitIsSet = true;
}

bool ConsumptionBalanceDto::limitIsSet() const
{
    return m_LimitIsSet;
}

void ConsumptionBalanceDto::unsetLimit()
{
    m_LimitIsSet = false;
}
double ConsumptionBalanceDto::getRemaining() const
{
    return m_Remaining;
}

void ConsumptionBalanceDto::setRemaining(double value)
{
    m_Remaining = value;
    m_RemainingIsSet = true;
}

bool ConsumptionBalanceDto::remainingIsSet() const
{
    return m_RemainingIsSet;
}

void ConsumptionBalanceDto::unsetRemaining()
{
    m_RemainingIsSet = false;
}
utility::datetime ConsumptionBalanceDto::getLastResetDateUtc() const
{
    return m_Last_reset_date_utc;
}

void ConsumptionBalanceDto::setLastResetDateUtc(const utility::datetime& value)
{
    m_Last_reset_date_utc = value;
    m_Last_reset_date_utcIsSet = true;
}

bool ConsumptionBalanceDto::lastResetDateUtcIsSet() const
{
    return m_Last_reset_date_utcIsSet;
}

void ConsumptionBalanceDto::unsetLast_reset_date_utc()
{
    m_Last_reset_date_utcIsSet = false;
}
utility::string_t ConsumptionBalanceDto::getAssignmentId() const
{
    return m_Assignment_id;
}

void ConsumptionBalanceDto::setAssignmentId(const utility::string_t& value)
{
    m_Assignment_id = value;
    m_Assignment_idIsSet = true;
}

bool ConsumptionBalanceDto::assignmentIdIsSet() const
{
    return m_Assignment_idIsSet;
}

void ConsumptionBalanceDto::unsetAssignment_id()
{
    m_Assignment_idIsSet = false;
}
utility::string_t ConsumptionBalanceDto::getLicenseId() const
{
    return m_License_id;
}

void ConsumptionBalanceDto::setLicenseId(const utility::string_t& value)
{
    m_License_id = value;
    m_License_idIsSet = true;
}

bool ConsumptionBalanceDto::licenseIdIsSet() const
{
    return m_License_idIsSet;
}

void ConsumptionBalanceDto::unsetLicense_id()
{
    m_License_idIsSet = false;
}
utility::string_t ConsumptionBalanceDto::getLimitationId() const
{
    return m_Limitation_id;
}

void ConsumptionBalanceDto::setLimitationId(const utility::string_t& value)
{
    m_Limitation_id = value;
    m_Limitation_idIsSet = true;
}

bool ConsumptionBalanceDto::limitationIdIsSet() const
{
    return m_Limitation_idIsSet;
}

void ConsumptionBalanceDto::unsetLimitation_id()
{
    m_Limitation_idIsSet = false;
}
std::shared_ptr<LimitationDto> ConsumptionBalanceDto::getLimitation() const
{
    return m_Limitation;
}

void ConsumptionBalanceDto::setLimitation(const std::shared_ptr<LimitationDto>& value)
{
    m_Limitation = value;
    m_LimitationIsSet = true;
}

bool ConsumptionBalanceDto::limitationIsSet() const
{
    return m_LimitationIsSet;
}

void ConsumptionBalanceDto::unsetLimitation()
{
    m_LimitationIsSet = false;
}
std::shared_ptr<ConsumptionResetPeriod> ConsumptionBalanceDto::getResetMode() const
{
    return m_Reset_mode;
}

void ConsumptionBalanceDto::setResetMode(const std::shared_ptr<ConsumptionResetPeriod>& value)
{
    m_Reset_mode = value;
    m_Reset_modeIsSet = true;
}

bool ConsumptionBalanceDto::resetModeIsSet() const
{
    return m_Reset_modeIsSet;
}

void ConsumptionBalanceDto::unsetReset_mode()
{
    m_Reset_modeIsSet = false;
}
int32_t ConsumptionBalanceDto::getResetPeriodDays() const
{
    return m_Reset_period_days;
}

void ConsumptionBalanceDto::setResetPeriodDays(int32_t value)
{
    m_Reset_period_days = value;
    m_Reset_period_daysIsSet = true;
}

bool ConsumptionBalanceDto::resetPeriodDaysIsSet() const
{
    return m_Reset_period_daysIsSet;
}

void ConsumptionBalanceDto::unsetReset_period_days()
{
    m_Reset_period_daysIsSet = false;
}
std::shared_ptr<ConsumptionBalanceMode> ConsumptionBalanceDto::getConsumptionBalanceMode() const
{
    return m_Consumption_balance_mode;
}

void ConsumptionBalanceDto::setConsumptionBalanceMode(const std::shared_ptr<ConsumptionBalanceMode>& value)
{
    m_Consumption_balance_mode = value;
    m_Consumption_balance_modeIsSet = true;
}

bool ConsumptionBalanceDto::consumptionBalanceModeIsSet() const
{
    return m_Consumption_balance_modeIsSet;
}

void ConsumptionBalanceDto::unsetConsumption_balance_mode()
{
    m_Consumption_balance_modeIsSet = false;
}
utility::datetime ConsumptionBalanceDto::getNextResetDateUtc() const
{
    return m_Next_reset_date_utc;
}

void ConsumptionBalanceDto::setNextResetDateUtc(const utility::datetime& value)
{
    m_Next_reset_date_utc = value;
    m_Next_reset_date_utcIsSet = true;
}

bool ConsumptionBalanceDto::nextResetDateUtcIsSet() const
{
    return m_Next_reset_date_utcIsSet;
}

void ConsumptionBalanceDto::unsetNext_reset_date_utc()
{
    m_Next_reset_date_utcIsSet = false;
}
}
}
}
}


