/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/DeviceLicenseAssignmentDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



DeviceLicenseAssignmentDto::DeviceLicenseAssignmentDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_License_id = utility::conversions::to_string_t("");
    m_License_idIsSet = false;
    m_Product_id = utility::conversions::to_string_t("");
    m_Product_idIsSet = false;
    m_Device_name = utility::conversions::to_string_t("");
    m_Device_nameIsSet = false;
    m_Device_description = utility::conversions::to_string_t("");
    m_Device_descriptionIsSet = false;
    m_Token_key = utility::conversions::to_string_t("");
    m_Token_keyIsSet = false;
    m_User_email = utility::conversions::to_string_t("");
    m_User_emailIsSet = false;
    m_User_id = utility::conversions::to_string_t("");
    m_User_idIsSet = false;
    m_Client_id = utility::conversions::to_string_t("");
    m_Client_idIsSet = false;
    m_Activated = false;
    m_ActivatedIsSet = false;
    m_Is_software_version_valid = false;
    m_Is_software_version_validIsSet = false;
    m_Is_goodwill_license = false;
    m_Is_goodwill_licenseIsSet = false;
    m_Has_heartbeats = false;
    m_Has_heartbeatsIsSet = false;
    m_Has_consumption_heartbeats = false;
    m_Has_consumption_heartbeatsIsSet = false;
    m_Activated_date_utc = utility::datetime();
    m_Activated_date_utcIsSet = false;
    m_Heartbeat_infoIsSet = false;
    m_Enforce_software_version_upgrade = false;
    m_Enforce_software_version_upgradeIsSet = false;
    m_Device_analytical_heartbeatsIsSet = false;
    m_Software_version = utility::conversions::to_string_t("");
    m_Software_versionIsSet = false;
    m_Operating_system = utility::conversions::to_string_t("");
    m_Operating_systemIsSet = false;
    m_Tag_assignmentsIsSet = false;
}

DeviceLicenseAssignmentDto::~DeviceLicenseAssignmentDto()
{
}

void DeviceLicenseAssignmentDto::validate()
{
    // TODO: implement validation
}

web::json::value DeviceLicenseAssignmentDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_License_idIsSet)
    {
        val[utility::conversions::to_string_t(U("license_id"))] = ModelBase::toJson(m_License_id);
    }
    if(m_Product_idIsSet)
    {
        val[utility::conversions::to_string_t(U("product_id"))] = ModelBase::toJson(m_Product_id);
    }
    if(m_Device_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("device_name"))] = ModelBase::toJson(m_Device_name);
    }
    if(m_Device_descriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("device_description"))] = ModelBase::toJson(m_Device_description);
    }
    if(m_Token_keyIsSet)
    {
        val[utility::conversions::to_string_t(U("token_key"))] = ModelBase::toJson(m_Token_key);
    }
    if(m_User_emailIsSet)
    {
        val[utility::conversions::to_string_t(U("user_email"))] = ModelBase::toJson(m_User_email);
    }
    if(m_User_idIsSet)
    {
        val[utility::conversions::to_string_t(U("user_id"))] = ModelBase::toJson(m_User_id);
    }
    if(m_Client_idIsSet)
    {
        val[utility::conversions::to_string_t(U("client_id"))] = ModelBase::toJson(m_Client_id);
    }
    if(m_ActivatedIsSet)
    {
        val[utility::conversions::to_string_t(U("activated"))] = ModelBase::toJson(m_Activated);
    }
    if(m_Is_software_version_validIsSet)
    {
        val[utility::conversions::to_string_t(U("is_software_version_valid"))] = ModelBase::toJson(m_Is_software_version_valid);
    }
    if(m_Is_goodwill_licenseIsSet)
    {
        val[utility::conversions::to_string_t(U("is_goodwill_license"))] = ModelBase::toJson(m_Is_goodwill_license);
    }
    if(m_Has_heartbeatsIsSet)
    {
        val[utility::conversions::to_string_t(U("has_heartbeats"))] = ModelBase::toJson(m_Has_heartbeats);
    }
    if(m_Has_consumption_heartbeatsIsSet)
    {
        val[utility::conversions::to_string_t(U("has_consumption_heartbeats"))] = ModelBase::toJson(m_Has_consumption_heartbeats);
    }
    if(m_Activated_date_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("activated_date_utc"))] = ModelBase::toJson(m_Activated_date_utc);
    }
    if(m_Heartbeat_infoIsSet)
    {
        val[utility::conversions::to_string_t(U("heartbeat_info"))] = ModelBase::toJson(m_Heartbeat_info);
    }
    if(m_Enforce_software_version_upgradeIsSet)
    {
        val[utility::conversions::to_string_t(U("enforce_software_version_upgrade"))] = ModelBase::toJson(m_Enforce_software_version_upgrade);
    }
    if(m_Device_analytical_heartbeatsIsSet)
    {
        val[utility::conversions::to_string_t(U("device_analytical_heartbeats"))] = ModelBase::toJson(m_Device_analytical_heartbeats);
    }
    if(m_Software_versionIsSet)
    {
        val[utility::conversions::to_string_t(U("software_version"))] = ModelBase::toJson(m_Software_version);
    }
    if(m_Operating_systemIsSet)
    {
        val[utility::conversions::to_string_t(U("operating_system"))] = ModelBase::toJson(m_Operating_system);
    }
    if(m_Tag_assignmentsIsSet)
    {
        val[utility::conversions::to_string_t(U("tag_assignments"))] = ModelBase::toJson(m_Tag_assignments);
    }

    return val;
}

bool DeviceLicenseAssignmentDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("license_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("license_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLicenseId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenseId);
            setLicenseId(refVal_setLicenseId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("product_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("product_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProductId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProductId);
            setProductId(refVal_setProductId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("device_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("device_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDeviceName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeviceName);
            setDeviceName(refVal_setDeviceName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("device_description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("device_description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDeviceDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeviceDescription);
            setDeviceDescription(refVal_setDeviceDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("token_key"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("token_key")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTokenKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTokenKey);
            setTokenKey(refVal_setTokenKey);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("user_email"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("user_email")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUserEmail;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserEmail);
            setUserEmail(refVal_setUserEmail);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("user_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("user_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserId);
            setUserId(refVal_setUserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("client_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("client_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClientId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClientId);
            setClientId(refVal_setClientId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("activated"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("activated")));
        if(!fieldValue.is_null())
        {
            bool refVal_setActivated;
            ok &= ModelBase::fromJson(fieldValue, refVal_setActivated);
            setActivated(refVal_setActivated);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_software_version_valid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_software_version_valid")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsSoftwareVersionValid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsSoftwareVersionValid);
            setIsSoftwareVersionValid(refVal_setIsSoftwareVersionValid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_goodwill_license"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_goodwill_license")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsGoodwillLicense;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsGoodwillLicense);
            setIsGoodwillLicense(refVal_setIsGoodwillLicense);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("has_heartbeats"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("has_heartbeats")));
        if(!fieldValue.is_null())
        {
            bool refVal_setHasHeartbeats;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHasHeartbeats);
            setHasHeartbeats(refVal_setHasHeartbeats);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("has_consumption_heartbeats"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("has_consumption_heartbeats")));
        if(!fieldValue.is_null())
        {
            bool refVal_setHasConsumptionHeartbeats;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHasConsumptionHeartbeats);
            setHasConsumptionHeartbeats(refVal_setHasConsumptionHeartbeats);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("activated_date_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("activated_date_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setActivatedDateUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setActivatedDateUtc);
            setActivatedDateUtc(refVal_setActivatedDateUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("heartbeat_info"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("heartbeat_info")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DeviceHeartbeatDto> refVal_setHeartbeatInfo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHeartbeatInfo);
            setHeartbeatInfo(refVal_setHeartbeatInfo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("enforce_software_version_upgrade"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("enforce_software_version_upgrade")));
        if(!fieldValue.is_null())
        {
            bool refVal_setEnforceSoftwareVersionUpgrade;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEnforceSoftwareVersionUpgrade);
            setEnforceSoftwareVersionUpgrade(refVal_setEnforceSoftwareVersionUpgrade);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("device_analytical_heartbeats"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("device_analytical_heartbeats")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<DeviceAnalyticalHeartbeatDto>> refVal_setDeviceAnalyticalHeartbeats;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeviceAnalyticalHeartbeats);
            setDeviceAnalyticalHeartbeats(refVal_setDeviceAnalyticalHeartbeats);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("software_version"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("software_version")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSoftwareVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSoftwareVersion);
            setSoftwareVersion(refVal_setSoftwareVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("operating_system"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("operating_system")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOperatingSystem;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOperatingSystem);
            setOperatingSystem(refVal_setOperatingSystem);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tag_assignments"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tag_assignments")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<TagAssignmentDto>> refVal_setTagAssignments;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTagAssignments);
            setTagAssignments(refVal_setTagAssignments);
        }
    }
    return ok;
}

void DeviceLicenseAssignmentDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_License_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("license_id")), m_License_id));
    }
    if(m_Product_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("product_id")), m_Product_id));
    }
    if(m_Device_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("device_name")), m_Device_name));
    }
    if(m_Device_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("device_description")), m_Device_description));
    }
    if(m_Token_keyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("token_key")), m_Token_key));
    }
    if(m_User_emailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("user_email")), m_User_email));
    }
    if(m_User_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("user_id")), m_User_id));
    }
    if(m_Client_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("client_id")), m_Client_id));
    }
    if(m_ActivatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("activated")), m_Activated));
    }
    if(m_Is_software_version_validIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_software_version_valid")), m_Is_software_version_valid));
    }
    if(m_Is_goodwill_licenseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_goodwill_license")), m_Is_goodwill_license));
    }
    if(m_Has_heartbeatsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("has_heartbeats")), m_Has_heartbeats));
    }
    if(m_Has_consumption_heartbeatsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("has_consumption_heartbeats")), m_Has_consumption_heartbeats));
    }
    if(m_Activated_date_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("activated_date_utc")), m_Activated_date_utc));
    }
    if(m_Heartbeat_infoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("heartbeat_info")), m_Heartbeat_info));
    }
    if(m_Enforce_software_version_upgradeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("enforce_software_version_upgrade")), m_Enforce_software_version_upgrade));
    }
    if(m_Device_analytical_heartbeatsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("device_analytical_heartbeats")), m_Device_analytical_heartbeats));
    }
    if(m_Software_versionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("software_version")), m_Software_version));
    }
    if(m_Operating_systemIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("operating_system")), m_Operating_system));
    }
    if(m_Tag_assignmentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tag_assignments")), m_Tag_assignments));
    }
}

bool DeviceLicenseAssignmentDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("license_id"))))
    {
        utility::string_t refVal_setLicenseId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("license_id"))), refVal_setLicenseId );
        setLicenseId(refVal_setLicenseId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("product_id"))))
    {
        utility::string_t refVal_setProductId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("product_id"))), refVal_setProductId );
        setProductId(refVal_setProductId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("device_name"))))
    {
        utility::string_t refVal_setDeviceName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("device_name"))), refVal_setDeviceName );
        setDeviceName(refVal_setDeviceName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("device_description"))))
    {
        utility::string_t refVal_setDeviceDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("device_description"))), refVal_setDeviceDescription );
        setDeviceDescription(refVal_setDeviceDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("token_key"))))
    {
        utility::string_t refVal_setTokenKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("token_key"))), refVal_setTokenKey );
        setTokenKey(refVal_setTokenKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("user_email"))))
    {
        utility::string_t refVal_setUserEmail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("user_email"))), refVal_setUserEmail );
        setUserEmail(refVal_setUserEmail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("user_id"))))
    {
        utility::string_t refVal_setUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("user_id"))), refVal_setUserId );
        setUserId(refVal_setUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("client_id"))))
    {
        utility::string_t refVal_setClientId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("client_id"))), refVal_setClientId );
        setClientId(refVal_setClientId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("activated"))))
    {
        bool refVal_setActivated;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("activated"))), refVal_setActivated );
        setActivated(refVal_setActivated);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_software_version_valid"))))
    {
        bool refVal_setIsSoftwareVersionValid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_software_version_valid"))), refVal_setIsSoftwareVersionValid );
        setIsSoftwareVersionValid(refVal_setIsSoftwareVersionValid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_goodwill_license"))))
    {
        bool refVal_setIsGoodwillLicense;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_goodwill_license"))), refVal_setIsGoodwillLicense );
        setIsGoodwillLicense(refVal_setIsGoodwillLicense);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("has_heartbeats"))))
    {
        bool refVal_setHasHeartbeats;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("has_heartbeats"))), refVal_setHasHeartbeats );
        setHasHeartbeats(refVal_setHasHeartbeats);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("has_consumption_heartbeats"))))
    {
        bool refVal_setHasConsumptionHeartbeats;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("has_consumption_heartbeats"))), refVal_setHasConsumptionHeartbeats );
        setHasConsumptionHeartbeats(refVal_setHasConsumptionHeartbeats);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("activated_date_utc"))))
    {
        utility::datetime refVal_setActivatedDateUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("activated_date_utc"))), refVal_setActivatedDateUtc );
        setActivatedDateUtc(refVal_setActivatedDateUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("heartbeat_info"))))
    {
        std::shared_ptr<DeviceHeartbeatDto> refVal_setHeartbeatInfo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("heartbeat_info"))), refVal_setHeartbeatInfo );
        setHeartbeatInfo(refVal_setHeartbeatInfo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("enforce_software_version_upgrade"))))
    {
        bool refVal_setEnforceSoftwareVersionUpgrade;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("enforce_software_version_upgrade"))), refVal_setEnforceSoftwareVersionUpgrade );
        setEnforceSoftwareVersionUpgrade(refVal_setEnforceSoftwareVersionUpgrade);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("device_analytical_heartbeats"))))
    {
        std::vector<std::shared_ptr<DeviceAnalyticalHeartbeatDto>> refVal_setDeviceAnalyticalHeartbeats;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("device_analytical_heartbeats"))), refVal_setDeviceAnalyticalHeartbeats );
        setDeviceAnalyticalHeartbeats(refVal_setDeviceAnalyticalHeartbeats);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("software_version"))))
    {
        utility::string_t refVal_setSoftwareVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("software_version"))), refVal_setSoftwareVersion );
        setSoftwareVersion(refVal_setSoftwareVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("operating_system"))))
    {
        utility::string_t refVal_setOperatingSystem;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("operating_system"))), refVal_setOperatingSystem );
        setOperatingSystem(refVal_setOperatingSystem);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tag_assignments"))))
    {
        std::vector<std::shared_ptr<TagAssignmentDto>> refVal_setTagAssignments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tag_assignments"))), refVal_setTagAssignments );
        setTagAssignments(refVal_setTagAssignments);
    }
    return ok;
}

utility::string_t DeviceLicenseAssignmentDto::getId() const
{
    return m_Id;
}

void DeviceLicenseAssignmentDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool DeviceLicenseAssignmentDto::idIsSet() const
{
    return m_IdIsSet;
}

void DeviceLicenseAssignmentDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t DeviceLicenseAssignmentDto::getLicenseId() const
{
    return m_License_id;
}

void DeviceLicenseAssignmentDto::setLicenseId(const utility::string_t& value)
{
    m_License_id = value;
    m_License_idIsSet = true;
}

bool DeviceLicenseAssignmentDto::licenseIdIsSet() const
{
    return m_License_idIsSet;
}

void DeviceLicenseAssignmentDto::unsetLicense_id()
{
    m_License_idIsSet = false;
}
utility::string_t DeviceLicenseAssignmentDto::getProductId() const
{
    return m_Product_id;
}

void DeviceLicenseAssignmentDto::setProductId(const utility::string_t& value)
{
    m_Product_id = value;
    m_Product_idIsSet = true;
}

bool DeviceLicenseAssignmentDto::productIdIsSet() const
{
    return m_Product_idIsSet;
}

void DeviceLicenseAssignmentDto::unsetProduct_id()
{
    m_Product_idIsSet = false;
}
utility::string_t DeviceLicenseAssignmentDto::getDeviceName() const
{
    return m_Device_name;
}

void DeviceLicenseAssignmentDto::setDeviceName(const utility::string_t& value)
{
    m_Device_name = value;
    m_Device_nameIsSet = true;
}

bool DeviceLicenseAssignmentDto::deviceNameIsSet() const
{
    return m_Device_nameIsSet;
}

void DeviceLicenseAssignmentDto::unsetDevice_name()
{
    m_Device_nameIsSet = false;
}
utility::string_t DeviceLicenseAssignmentDto::getDeviceDescription() const
{
    return m_Device_description;
}

void DeviceLicenseAssignmentDto::setDeviceDescription(const utility::string_t& value)
{
    m_Device_description = value;
    m_Device_descriptionIsSet = true;
}

bool DeviceLicenseAssignmentDto::deviceDescriptionIsSet() const
{
    return m_Device_descriptionIsSet;
}

void DeviceLicenseAssignmentDto::unsetDevice_description()
{
    m_Device_descriptionIsSet = false;
}
utility::string_t DeviceLicenseAssignmentDto::getTokenKey() const
{
    return m_Token_key;
}

void DeviceLicenseAssignmentDto::setTokenKey(const utility::string_t& value)
{
    m_Token_key = value;
    m_Token_keyIsSet = true;
}

bool DeviceLicenseAssignmentDto::tokenKeyIsSet() const
{
    return m_Token_keyIsSet;
}

void DeviceLicenseAssignmentDto::unsetToken_key()
{
    m_Token_keyIsSet = false;
}
utility::string_t DeviceLicenseAssignmentDto::getUserEmail() const
{
    return m_User_email;
}

void DeviceLicenseAssignmentDto::setUserEmail(const utility::string_t& value)
{
    m_User_email = value;
    m_User_emailIsSet = true;
}

bool DeviceLicenseAssignmentDto::userEmailIsSet() const
{
    return m_User_emailIsSet;
}

void DeviceLicenseAssignmentDto::unsetUser_email()
{
    m_User_emailIsSet = false;
}
utility::string_t DeviceLicenseAssignmentDto::getUserId() const
{
    return m_User_id;
}

void DeviceLicenseAssignmentDto::setUserId(const utility::string_t& value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}

bool DeviceLicenseAssignmentDto::userIdIsSet() const
{
    return m_User_idIsSet;
}

void DeviceLicenseAssignmentDto::unsetUser_id()
{
    m_User_idIsSet = false;
}
utility::string_t DeviceLicenseAssignmentDto::getClientId() const
{
    return m_Client_id;
}

void DeviceLicenseAssignmentDto::setClientId(const utility::string_t& value)
{
    m_Client_id = value;
    m_Client_idIsSet = true;
}

bool DeviceLicenseAssignmentDto::clientIdIsSet() const
{
    return m_Client_idIsSet;
}

void DeviceLicenseAssignmentDto::unsetClient_id()
{
    m_Client_idIsSet = false;
}
bool DeviceLicenseAssignmentDto::isActivated() const
{
    return m_Activated;
}

void DeviceLicenseAssignmentDto::setActivated(bool value)
{
    m_Activated = value;
    m_ActivatedIsSet = true;
}

bool DeviceLicenseAssignmentDto::activatedIsSet() const
{
    return m_ActivatedIsSet;
}

void DeviceLicenseAssignmentDto::unsetActivated()
{
    m_ActivatedIsSet = false;
}
bool DeviceLicenseAssignmentDto::isIsSoftwareVersionValid() const
{
    return m_Is_software_version_valid;
}

void DeviceLicenseAssignmentDto::setIsSoftwareVersionValid(bool value)
{
    m_Is_software_version_valid = value;
    m_Is_software_version_validIsSet = true;
}

bool DeviceLicenseAssignmentDto::isSoftwareVersionValidIsSet() const
{
    return m_Is_software_version_validIsSet;
}

void DeviceLicenseAssignmentDto::unsetIs_software_version_valid()
{
    m_Is_software_version_validIsSet = false;
}
bool DeviceLicenseAssignmentDto::isIsGoodwillLicense() const
{
    return m_Is_goodwill_license;
}

void DeviceLicenseAssignmentDto::setIsGoodwillLicense(bool value)
{
    m_Is_goodwill_license = value;
    m_Is_goodwill_licenseIsSet = true;
}

bool DeviceLicenseAssignmentDto::isGoodwillLicenseIsSet() const
{
    return m_Is_goodwill_licenseIsSet;
}

void DeviceLicenseAssignmentDto::unsetIs_goodwill_license()
{
    m_Is_goodwill_licenseIsSet = false;
}
bool DeviceLicenseAssignmentDto::isHasHeartbeats() const
{
    return m_Has_heartbeats;
}

void DeviceLicenseAssignmentDto::setHasHeartbeats(bool value)
{
    m_Has_heartbeats = value;
    m_Has_heartbeatsIsSet = true;
}

bool DeviceLicenseAssignmentDto::hasHeartbeatsIsSet() const
{
    return m_Has_heartbeatsIsSet;
}

void DeviceLicenseAssignmentDto::unsetHas_heartbeats()
{
    m_Has_heartbeatsIsSet = false;
}
bool DeviceLicenseAssignmentDto::isHasConsumptionHeartbeats() const
{
    return m_Has_consumption_heartbeats;
}

void DeviceLicenseAssignmentDto::setHasConsumptionHeartbeats(bool value)
{
    m_Has_consumption_heartbeats = value;
    m_Has_consumption_heartbeatsIsSet = true;
}

bool DeviceLicenseAssignmentDto::hasConsumptionHeartbeatsIsSet() const
{
    return m_Has_consumption_heartbeatsIsSet;
}

void DeviceLicenseAssignmentDto::unsetHas_consumption_heartbeats()
{
    m_Has_consumption_heartbeatsIsSet = false;
}
utility::datetime DeviceLicenseAssignmentDto::getActivatedDateUtc() const
{
    return m_Activated_date_utc;
}

void DeviceLicenseAssignmentDto::setActivatedDateUtc(const utility::datetime& value)
{
    m_Activated_date_utc = value;
    m_Activated_date_utcIsSet = true;
}

bool DeviceLicenseAssignmentDto::activatedDateUtcIsSet() const
{
    return m_Activated_date_utcIsSet;
}

void DeviceLicenseAssignmentDto::unsetActivated_date_utc()
{
    m_Activated_date_utcIsSet = false;
}
std::shared_ptr<DeviceHeartbeatDto> DeviceLicenseAssignmentDto::getHeartbeatInfo() const
{
    return m_Heartbeat_info;
}

void DeviceLicenseAssignmentDto::setHeartbeatInfo(const std::shared_ptr<DeviceHeartbeatDto>& value)
{
    m_Heartbeat_info = value;
    m_Heartbeat_infoIsSet = true;
}

bool DeviceLicenseAssignmentDto::heartbeatInfoIsSet() const
{
    return m_Heartbeat_infoIsSet;
}

void DeviceLicenseAssignmentDto::unsetHeartbeat_info()
{
    m_Heartbeat_infoIsSet = false;
}
bool DeviceLicenseAssignmentDto::isEnforceSoftwareVersionUpgrade() const
{
    return m_Enforce_software_version_upgrade;
}

void DeviceLicenseAssignmentDto::setEnforceSoftwareVersionUpgrade(bool value)
{
    m_Enforce_software_version_upgrade = value;
    m_Enforce_software_version_upgradeIsSet = true;
}

bool DeviceLicenseAssignmentDto::enforceSoftwareVersionUpgradeIsSet() const
{
    return m_Enforce_software_version_upgradeIsSet;
}

void DeviceLicenseAssignmentDto::unsetEnforce_software_version_upgrade()
{
    m_Enforce_software_version_upgradeIsSet = false;
}
std::vector<std::shared_ptr<DeviceAnalyticalHeartbeatDto>>& DeviceLicenseAssignmentDto::getDeviceAnalyticalHeartbeats()
{
    return m_Device_analytical_heartbeats;
}

void DeviceLicenseAssignmentDto::setDeviceAnalyticalHeartbeats(const std::vector<std::shared_ptr<DeviceAnalyticalHeartbeatDto>>& value)
{
    m_Device_analytical_heartbeats = value;
    m_Device_analytical_heartbeatsIsSet = true;
}

bool DeviceLicenseAssignmentDto::deviceAnalyticalHeartbeatsIsSet() const
{
    return m_Device_analytical_heartbeatsIsSet;
}

void DeviceLicenseAssignmentDto::unsetDevice_analytical_heartbeats()
{
    m_Device_analytical_heartbeatsIsSet = false;
}
utility::string_t DeviceLicenseAssignmentDto::getSoftwareVersion() const
{
    return m_Software_version;
}

void DeviceLicenseAssignmentDto::setSoftwareVersion(const utility::string_t& value)
{
    m_Software_version = value;
    m_Software_versionIsSet = true;
}

bool DeviceLicenseAssignmentDto::softwareVersionIsSet() const
{
    return m_Software_versionIsSet;
}

void DeviceLicenseAssignmentDto::unsetSoftware_version()
{
    m_Software_versionIsSet = false;
}
utility::string_t DeviceLicenseAssignmentDto::getOperatingSystem() const
{
    return m_Operating_system;
}

void DeviceLicenseAssignmentDto::setOperatingSystem(const utility::string_t& value)
{
    m_Operating_system = value;
    m_Operating_systemIsSet = true;
}

bool DeviceLicenseAssignmentDto::operatingSystemIsSet() const
{
    return m_Operating_systemIsSet;
}

void DeviceLicenseAssignmentDto::unsetOperating_system()
{
    m_Operating_systemIsSet = false;
}
std::vector<std::shared_ptr<TagAssignmentDto>>& DeviceLicenseAssignmentDto::getTagAssignments()
{
    return m_Tag_assignments;
}

void DeviceLicenseAssignmentDto::setTagAssignments(const std::vector<std::shared_ptr<TagAssignmentDto>>& value)
{
    m_Tag_assignments = value;
    m_Tag_assignmentsIsSet = true;
}

bool DeviceLicenseAssignmentDto::tagAssignmentsIsSet() const
{
    return m_Tag_assignmentsIsSet;
}

void DeviceLicenseAssignmentDto::unsetTag_assignments()
{
    m_Tag_assignmentsIsSet = false;
}
}
}
}
}


