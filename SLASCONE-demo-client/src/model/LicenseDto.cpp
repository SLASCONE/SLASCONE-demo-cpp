/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/LicenseDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



LicenseDto::LicenseDto()
{
    m_Expiration_date_utc = utility::datetime();
    m_Expiration_date_utcIsSet = false;
    m_Expiration_modeIsSet = false;
    m_Valid_days_count = 0;
    m_Valid_days_countIsSet = false;
    m_Trial_days_count = 0;
    m_Trial_days_countIsSet = false;
    m_Is_active = false;
    m_Is_activeIsSet = false;
    m_Is_expired = false;
    m_Is_expiredIsSet = false;
    m_Is_valid = false;
    m_Is_validIsSet = false;
    m_Is_software_release_valid = false;
    m_Is_software_release_validIsSet = false;
    m_Is_group_valid = false;
    m_Is_group_validIsSet = false;
    m_Group_count = 0;
    m_Group_countIsSet = false;
    m_Date_of_issue_utc = utility::datetime();
    m_Date_of_issue_utcIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Customer_id = utility::conversions::to_string_t("");
    m_Customer_idIsSet = false;
    m_Product_id = utility::conversions::to_string_t("");
    m_Product_idIsSet = false;
    m_Template_id = utility::conversions::to_string_t("");
    m_Template_idIsSet = false;
    m_License_type_id = utility::conversions::to_string_t("");
    m_License_type_idIsSet = false;
    m_Legacy_license_key = utility::conversions::to_string_t("");
    m_Legacy_license_keyIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Token_limit = 0;
    m_Token_limitIsSet = false;
    m_Goodwill_token_limit = 0;
    m_Goodwill_token_limitIsSet = false;
    m_Floating_token_limit = 0;
    m_Floating_token_limitIsSet = false;
    m_User_limit = 0;
    m_User_limitIsSet = false;
    m_Software_release_limitation_id = utility::conversions::to_string_t("");
    m_Software_release_limitation_idIsSet = false;
    m_Is_temporary = false;
    m_Is_temporaryIsSet = false;
    m_License_featuresIsSet = false;
    m_License_limitationsIsSet = false;
    m_License_constrained_variablesIsSet = false;
    m_License_variablesIsSet = false;
    m_License_users_groupsIsSet = false;
    m_License_usersIsSet = false;
    m_Created_date_utc = utility::datetime();
    m_Created_date_utcIsSet = false;
    m_Modified_date_utc = utility::datetime();
    m_Modified_date_utcIsSet = false;
    m_Last_modified_by = utility::conversions::to_string_t("");
    m_Last_modified_byIsSet = false;
    m_CustomerIsSet = false;
    m_ProductIsSet = false;
    m_r_templateIsSet = false;
    m_License_typeIsSet = false;
    m_Software_release_limitationIsSet = false;
    m_Prioritized_software_release = utility::conversions::to_string_t("");
    m_Prioritized_software_releaseIsSet = false;
    m_Mail_logsIsSet = false;
    m_Client_id = utility::conversions::to_string_t("");
    m_Client_idIsSet = false;
}

LicenseDto::~LicenseDto()
{
}

void LicenseDto::validate()
{
    // TODO: implement validation
}

web::json::value LicenseDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Expiration_date_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("expiration_date_utc"))] = ModelBase::toJson(m_Expiration_date_utc);
    }
    if(m_Expiration_modeIsSet)
    {
        val[utility::conversions::to_string_t(U("expiration_mode"))] = ModelBase::toJson(m_Expiration_mode);
    }
    if(m_Valid_days_countIsSet)
    {
        val[utility::conversions::to_string_t(U("valid_days_count"))] = ModelBase::toJson(m_Valid_days_count);
    }
    if(m_Trial_days_countIsSet)
    {
        val[utility::conversions::to_string_t(U("trial_days_count"))] = ModelBase::toJson(m_Trial_days_count);
    }
    if(m_Is_activeIsSet)
    {
        val[utility::conversions::to_string_t(U("is_active"))] = ModelBase::toJson(m_Is_active);
    }
    if(m_Is_expiredIsSet)
    {
        val[utility::conversions::to_string_t(U("is_expired"))] = ModelBase::toJson(m_Is_expired);
    }
    if(m_Is_validIsSet)
    {
        val[utility::conversions::to_string_t(U("is_valid"))] = ModelBase::toJson(m_Is_valid);
    }
    if(m_Is_software_release_validIsSet)
    {
        val[utility::conversions::to_string_t(U("is_software_release_valid"))] = ModelBase::toJson(m_Is_software_release_valid);
    }
    if(m_Is_group_validIsSet)
    {
        val[utility::conversions::to_string_t(U("is_group_valid"))] = ModelBase::toJson(m_Is_group_valid);
    }
    if(m_Group_countIsSet)
    {
        val[utility::conversions::to_string_t(U("group_count"))] = ModelBase::toJson(m_Group_count);
    }
    if(m_Date_of_issue_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("date_of_issue_utc"))] = ModelBase::toJson(m_Date_of_issue_utc);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_Customer_idIsSet)
    {
        val[utility::conversions::to_string_t(U("customer_id"))] = ModelBase::toJson(m_Customer_id);
    }
    if(m_Product_idIsSet)
    {
        val[utility::conversions::to_string_t(U("product_id"))] = ModelBase::toJson(m_Product_id);
    }
    if(m_Template_idIsSet)
    {
        val[utility::conversions::to_string_t(U("template_id"))] = ModelBase::toJson(m_Template_id);
    }
    if(m_License_type_idIsSet)
    {
        val[utility::conversions::to_string_t(U("license_type_id"))] = ModelBase::toJson(m_License_type_id);
    }
    if(m_Legacy_license_keyIsSet)
    {
        val[utility::conversions::to_string_t(U("legacy_license_key"))] = ModelBase::toJson(m_Legacy_license_key);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_Token_limitIsSet)
    {
        val[utility::conversions::to_string_t(U("token_limit"))] = ModelBase::toJson(m_Token_limit);
    }
    if(m_Goodwill_token_limitIsSet)
    {
        val[utility::conversions::to_string_t(U("goodwill_token_limit"))] = ModelBase::toJson(m_Goodwill_token_limit);
    }
    if(m_Floating_token_limitIsSet)
    {
        val[utility::conversions::to_string_t(U("floating_token_limit"))] = ModelBase::toJson(m_Floating_token_limit);
    }
    if(m_User_limitIsSet)
    {
        val[utility::conversions::to_string_t(U("user_limit"))] = ModelBase::toJson(m_User_limit);
    }
    if(m_Software_release_limitation_idIsSet)
    {
        val[utility::conversions::to_string_t(U("software_release_limitation_id"))] = ModelBase::toJson(m_Software_release_limitation_id);
    }
    if(m_Is_temporaryIsSet)
    {
        val[utility::conversions::to_string_t(U("is_temporary"))] = ModelBase::toJson(m_Is_temporary);
    }
    if(m_License_featuresIsSet)
    {
        val[utility::conversions::to_string_t(U("license_features"))] = ModelBase::toJson(m_License_features);
    }
    if(m_License_limitationsIsSet)
    {
        val[utility::conversions::to_string_t(U("license_limitations"))] = ModelBase::toJson(m_License_limitations);
    }
    if(m_License_constrained_variablesIsSet)
    {
        val[utility::conversions::to_string_t(U("license_constrained_variables"))] = ModelBase::toJson(m_License_constrained_variables);
    }
    if(m_License_variablesIsSet)
    {
        val[utility::conversions::to_string_t(U("license_variables"))] = ModelBase::toJson(m_License_variables);
    }
    if(m_License_users_groupsIsSet)
    {
        val[utility::conversions::to_string_t(U("license_users_groups"))] = ModelBase::toJson(m_License_users_groups);
    }
    if(m_License_usersIsSet)
    {
        val[utility::conversions::to_string_t(U("license_users"))] = ModelBase::toJson(m_License_users);
    }
    if(m_Created_date_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("created_date_utc"))] = ModelBase::toJson(m_Created_date_utc);
    }
    if(m_Modified_date_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("modified_date_utc"))] = ModelBase::toJson(m_Modified_date_utc);
    }
    if(m_Last_modified_byIsSet)
    {
        val[utility::conversions::to_string_t(U("last_modified_by"))] = ModelBase::toJson(m_Last_modified_by);
    }
    if(m_CustomerIsSet)
    {
        val[utility::conversions::to_string_t(U("customer"))] = ModelBase::toJson(m_Customer);
    }
    if(m_ProductIsSet)
    {
        val[utility::conversions::to_string_t(U("product"))] = ModelBase::toJson(m_Product);
    }
    if(m_r_templateIsSet)
    {
        val[utility::conversions::to_string_t(U("template"))] = ModelBase::toJson(m_r_template);
    }
    if(m_License_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("license_type"))] = ModelBase::toJson(m_License_type);
    }
    if(m_Software_release_limitationIsSet)
    {
        val[utility::conversions::to_string_t(U("software_release_limitation"))] = ModelBase::toJson(m_Software_release_limitation);
    }
    if(m_Prioritized_software_releaseIsSet)
    {
        val[utility::conversions::to_string_t(U("prioritized_software_release"))] = ModelBase::toJson(m_Prioritized_software_release);
    }
    if(m_Mail_logsIsSet)
    {
        val[utility::conversions::to_string_t(U("mail_logs"))] = ModelBase::toJson(m_Mail_logs);
    }
    if(m_Client_idIsSet)
    {
        val[utility::conversions::to_string_t(U("client_id"))] = ModelBase::toJson(m_Client_id);
    }

    return val;
}

bool LicenseDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("expiration_date_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expiration_date_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setExpirationDateUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExpirationDateUtc);
            setExpirationDateUtc(refVal_setExpirationDateUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expiration_mode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expiration_mode")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ExpirationMode> refVal_setExpirationMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExpirationMode);
            setExpirationMode(refVal_setExpirationMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("valid_days_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("valid_days_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setValidDaysCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValidDaysCount);
            setValidDaysCount(refVal_setValidDaysCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("trial_days_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("trial_days_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTrialDaysCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTrialDaysCount);
            setTrialDaysCount(refVal_setTrialDaysCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_active"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_active")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsActive;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsActive);
            setIsActive(refVal_setIsActive);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_expired"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_expired")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsExpired;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsExpired);
            setIsExpired(refVal_setIsExpired);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_valid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_valid")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsValid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsValid);
            setIsValid(refVal_setIsValid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_software_release_valid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_software_release_valid")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsSoftwareReleaseValid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsSoftwareReleaseValid);
            setIsSoftwareReleaseValid(refVal_setIsSoftwareReleaseValid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_group_valid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_group_valid")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsGroupValid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsGroupValid);
            setIsGroupValid(refVal_setIsGroupValid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("group_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("group_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setGroupCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGroupCount);
            setGroupCount(refVal_setGroupCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("date_of_issue_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("date_of_issue_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDateOfIssueUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateOfIssueUtc);
            setDateOfIssueUtc(refVal_setDateOfIssueUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("customer_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("customer_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCustomerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomerId);
            setCustomerId(refVal_setCustomerId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("product_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("product_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProductId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProductId);
            setProductId(refVal_setProductId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("template_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("template_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTemplateId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTemplateId);
            setTemplateId(refVal_setTemplateId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("license_type_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("license_type_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLicenseTypeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenseTypeId);
            setLicenseTypeId(refVal_setLicenseTypeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("legacy_license_key"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("legacy_license_key")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLegacyLicenseKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLegacyLicenseKey);
            setLegacyLicenseKey(refVal_setLegacyLicenseKey);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("token_limit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("token_limit")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTokenLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTokenLimit);
            setTokenLimit(refVal_setTokenLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("goodwill_token_limit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("goodwill_token_limit")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setGoodwillTokenLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGoodwillTokenLimit);
            setGoodwillTokenLimit(refVal_setGoodwillTokenLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("floating_token_limit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("floating_token_limit")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFloatingTokenLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFloatingTokenLimit);
            setFloatingTokenLimit(refVal_setFloatingTokenLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("user_limit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("user_limit")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setUserLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserLimit);
            setUserLimit(refVal_setUserLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("software_release_limitation_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("software_release_limitation_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSoftwareReleaseLimitationId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSoftwareReleaseLimitationId);
            setSoftwareReleaseLimitationId(refVal_setSoftwareReleaseLimitationId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_temporary"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_temporary")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsTemporary;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsTemporary);
            setIsTemporary(refVal_setIsTemporary);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("license_features"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("license_features")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<LicenseFeatureDto>> refVal_setLicenseFeatures;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenseFeatures);
            setLicenseFeatures(refVal_setLicenseFeatures);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("license_limitations"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("license_limitations")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<LicenseLimitationDto>> refVal_setLicenseLimitations;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenseLimitations);
            setLicenseLimitations(refVal_setLicenseLimitations);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("license_constrained_variables"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("license_constrained_variables")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<LicenseConstrainedVariableDto>> refVal_setLicenseConstrainedVariables;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenseConstrainedVariables);
            setLicenseConstrainedVariables(refVal_setLicenseConstrainedVariables);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("license_variables"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("license_variables")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<LicenseVariableDto>> refVal_setLicenseVariables;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenseVariables);
            setLicenseVariables(refVal_setLicenseVariables);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("license_users_groups"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("license_users_groups")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<LicenseUserGroupDto>> refVal_setLicenseUsersGroups;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenseUsersGroups);
            setLicenseUsersGroups(refVal_setLicenseUsersGroups);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("license_users"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("license_users")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<LicenseUserDto>> refVal_setLicenseUsers;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenseUsers);
            setLicenseUsers(refVal_setLicenseUsers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_date_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_date_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedDateUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedDateUtc);
            setCreatedDateUtc(refVal_setCreatedDateUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("modified_date_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("modified_date_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setModifiedDateUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModifiedDateUtc);
            setModifiedDateUtc(refVal_setModifiedDateUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("last_modified_by"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("last_modified_by")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLastModifiedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastModifiedBy);
            setLastModifiedBy(refVal_setLastModifiedBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("customer"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("customer")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CustomerDto> refVal_setCustomer;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomer);
            setCustomer(refVal_setCustomer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("product"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("product")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ProductDto> refVal_setProduct;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProduct);
            setProduct(refVal_setProduct);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("template"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("template")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TemplateDto> refVal_setRTemplate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRTemplate);
            setRTemplate(refVal_setRTemplate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("license_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("license_type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<LicenseTypeDto> refVal_setLicenseType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenseType);
            setLicenseType(refVal_setLicenseType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("software_release_limitation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("software_release_limitation")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SoftwareReleaseLimitationDto> refVal_setSoftwareReleaseLimitation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSoftwareReleaseLimitation);
            setSoftwareReleaseLimitation(refVal_setSoftwareReleaseLimitation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("prioritized_software_release"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("prioritized_software_release")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPrioritizedSoftwareRelease;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrioritizedSoftwareRelease);
            setPrioritizedSoftwareRelease(refVal_setPrioritizedSoftwareRelease);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mail_logs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mail_logs")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<MailLogDto>> refVal_setMailLogs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMailLogs);
            setMailLogs(refVal_setMailLogs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("client_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("client_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClientId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClientId);
            setClientId(refVal_setClientId);
        }
    }
    return ok;
}

void LicenseDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Expiration_date_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expiration_date_utc")), m_Expiration_date_utc));
    }
    if(m_Expiration_modeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expiration_mode")), m_Expiration_mode));
    }
    if(m_Valid_days_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("valid_days_count")), m_Valid_days_count));
    }
    if(m_Trial_days_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("trial_days_count")), m_Trial_days_count));
    }
    if(m_Is_activeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_active")), m_Is_active));
    }
    if(m_Is_expiredIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_expired")), m_Is_expired));
    }
    if(m_Is_validIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_valid")), m_Is_valid));
    }
    if(m_Is_software_release_validIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_software_release_valid")), m_Is_software_release_valid));
    }
    if(m_Is_group_validIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_group_valid")), m_Is_group_valid));
    }
    if(m_Group_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("group_count")), m_Group_count));
    }
    if(m_Date_of_issue_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("date_of_issue_utc")), m_Date_of_issue_utc));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_Customer_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("customer_id")), m_Customer_id));
    }
    if(m_Product_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("product_id")), m_Product_id));
    }
    if(m_Template_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("template_id")), m_Template_id));
    }
    if(m_License_type_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("license_type_id")), m_License_type_id));
    }
    if(m_Legacy_license_keyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("legacy_license_key")), m_Legacy_license_key));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_Token_limitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("token_limit")), m_Token_limit));
    }
    if(m_Goodwill_token_limitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("goodwill_token_limit")), m_Goodwill_token_limit));
    }
    if(m_Floating_token_limitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("floating_token_limit")), m_Floating_token_limit));
    }
    if(m_User_limitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("user_limit")), m_User_limit));
    }
    if(m_Software_release_limitation_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("software_release_limitation_id")), m_Software_release_limitation_id));
    }
    if(m_Is_temporaryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_temporary")), m_Is_temporary));
    }
    if(m_License_featuresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("license_features")), m_License_features));
    }
    if(m_License_limitationsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("license_limitations")), m_License_limitations));
    }
    if(m_License_constrained_variablesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("license_constrained_variables")), m_License_constrained_variables));
    }
    if(m_License_variablesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("license_variables")), m_License_variables));
    }
    if(m_License_users_groupsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("license_users_groups")), m_License_users_groups));
    }
    if(m_License_usersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("license_users")), m_License_users));
    }
    if(m_Created_date_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_date_utc")), m_Created_date_utc));
    }
    if(m_Modified_date_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("modified_date_utc")), m_Modified_date_utc));
    }
    if(m_Last_modified_byIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("last_modified_by")), m_Last_modified_by));
    }
    if(m_CustomerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("customer")), m_Customer));
    }
    if(m_ProductIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("product")), m_Product));
    }
    if(m_r_templateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("template")), m_r_template));
    }
    if(m_License_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("license_type")), m_License_type));
    }
    if(m_Software_release_limitationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("software_release_limitation")), m_Software_release_limitation));
    }
    if(m_Prioritized_software_releaseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("prioritized_software_release")), m_Prioritized_software_release));
    }
    if(m_Mail_logsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mail_logs")), m_Mail_logs));
    }
    if(m_Client_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("client_id")), m_Client_id));
    }
}

bool LicenseDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("expiration_date_utc"))))
    {
        utility::datetime refVal_setExpirationDateUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expiration_date_utc"))), refVal_setExpirationDateUtc );
        setExpirationDateUtc(refVal_setExpirationDateUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expiration_mode"))))
    {
        std::shared_ptr<ExpirationMode> refVal_setExpirationMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expiration_mode"))), refVal_setExpirationMode );
        setExpirationMode(refVal_setExpirationMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("valid_days_count"))))
    {
        int32_t refVal_setValidDaysCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("valid_days_count"))), refVal_setValidDaysCount );
        setValidDaysCount(refVal_setValidDaysCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("trial_days_count"))))
    {
        int32_t refVal_setTrialDaysCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("trial_days_count"))), refVal_setTrialDaysCount );
        setTrialDaysCount(refVal_setTrialDaysCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_active"))))
    {
        bool refVal_setIsActive;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_active"))), refVal_setIsActive );
        setIsActive(refVal_setIsActive);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_expired"))))
    {
        bool refVal_setIsExpired;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_expired"))), refVal_setIsExpired );
        setIsExpired(refVal_setIsExpired);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_valid"))))
    {
        bool refVal_setIsValid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_valid"))), refVal_setIsValid );
        setIsValid(refVal_setIsValid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_software_release_valid"))))
    {
        bool refVal_setIsSoftwareReleaseValid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_software_release_valid"))), refVal_setIsSoftwareReleaseValid );
        setIsSoftwareReleaseValid(refVal_setIsSoftwareReleaseValid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_group_valid"))))
    {
        bool refVal_setIsGroupValid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_group_valid"))), refVal_setIsGroupValid );
        setIsGroupValid(refVal_setIsGroupValid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("group_count"))))
    {
        int32_t refVal_setGroupCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("group_count"))), refVal_setGroupCount );
        setGroupCount(refVal_setGroupCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("date_of_issue_utc"))))
    {
        utility::datetime refVal_setDateOfIssueUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("date_of_issue_utc"))), refVal_setDateOfIssueUtc );
        setDateOfIssueUtc(refVal_setDateOfIssueUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("customer_id"))))
    {
        utility::string_t refVal_setCustomerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("customer_id"))), refVal_setCustomerId );
        setCustomerId(refVal_setCustomerId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("product_id"))))
    {
        utility::string_t refVal_setProductId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("product_id"))), refVal_setProductId );
        setProductId(refVal_setProductId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("template_id"))))
    {
        utility::string_t refVal_setTemplateId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("template_id"))), refVal_setTemplateId );
        setTemplateId(refVal_setTemplateId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("license_type_id"))))
    {
        utility::string_t refVal_setLicenseTypeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("license_type_id"))), refVal_setLicenseTypeId );
        setLicenseTypeId(refVal_setLicenseTypeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("legacy_license_key"))))
    {
        utility::string_t refVal_setLegacyLicenseKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("legacy_license_key"))), refVal_setLegacyLicenseKey );
        setLegacyLicenseKey(refVal_setLegacyLicenseKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("token_limit"))))
    {
        int32_t refVal_setTokenLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("token_limit"))), refVal_setTokenLimit );
        setTokenLimit(refVal_setTokenLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("goodwill_token_limit"))))
    {
        int32_t refVal_setGoodwillTokenLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("goodwill_token_limit"))), refVal_setGoodwillTokenLimit );
        setGoodwillTokenLimit(refVal_setGoodwillTokenLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("floating_token_limit"))))
    {
        int32_t refVal_setFloatingTokenLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("floating_token_limit"))), refVal_setFloatingTokenLimit );
        setFloatingTokenLimit(refVal_setFloatingTokenLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("user_limit"))))
    {
        int32_t refVal_setUserLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("user_limit"))), refVal_setUserLimit );
        setUserLimit(refVal_setUserLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("software_release_limitation_id"))))
    {
        utility::string_t refVal_setSoftwareReleaseLimitationId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("software_release_limitation_id"))), refVal_setSoftwareReleaseLimitationId );
        setSoftwareReleaseLimitationId(refVal_setSoftwareReleaseLimitationId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_temporary"))))
    {
        bool refVal_setIsTemporary;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_temporary"))), refVal_setIsTemporary );
        setIsTemporary(refVal_setIsTemporary);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("license_features"))))
    {
        std::vector<std::shared_ptr<LicenseFeatureDto>> refVal_setLicenseFeatures;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("license_features"))), refVal_setLicenseFeatures );
        setLicenseFeatures(refVal_setLicenseFeatures);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("license_limitations"))))
    {
        std::vector<std::shared_ptr<LicenseLimitationDto>> refVal_setLicenseLimitations;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("license_limitations"))), refVal_setLicenseLimitations );
        setLicenseLimitations(refVal_setLicenseLimitations);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("license_constrained_variables"))))
    {
        std::vector<std::shared_ptr<LicenseConstrainedVariableDto>> refVal_setLicenseConstrainedVariables;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("license_constrained_variables"))), refVal_setLicenseConstrainedVariables );
        setLicenseConstrainedVariables(refVal_setLicenseConstrainedVariables);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("license_variables"))))
    {
        std::vector<std::shared_ptr<LicenseVariableDto>> refVal_setLicenseVariables;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("license_variables"))), refVal_setLicenseVariables );
        setLicenseVariables(refVal_setLicenseVariables);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("license_users_groups"))))
    {
        std::vector<std::shared_ptr<LicenseUserGroupDto>> refVal_setLicenseUsersGroups;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("license_users_groups"))), refVal_setLicenseUsersGroups );
        setLicenseUsersGroups(refVal_setLicenseUsersGroups);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("license_users"))))
    {
        std::vector<std::shared_ptr<LicenseUserDto>> refVal_setLicenseUsers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("license_users"))), refVal_setLicenseUsers );
        setLicenseUsers(refVal_setLicenseUsers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_date_utc"))))
    {
        utility::datetime refVal_setCreatedDateUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_date_utc"))), refVal_setCreatedDateUtc );
        setCreatedDateUtc(refVal_setCreatedDateUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("modified_date_utc"))))
    {
        utility::datetime refVal_setModifiedDateUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("modified_date_utc"))), refVal_setModifiedDateUtc );
        setModifiedDateUtc(refVal_setModifiedDateUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("last_modified_by"))))
    {
        utility::string_t refVal_setLastModifiedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("last_modified_by"))), refVal_setLastModifiedBy );
        setLastModifiedBy(refVal_setLastModifiedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("customer"))))
    {
        std::shared_ptr<CustomerDto> refVal_setCustomer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("customer"))), refVal_setCustomer );
        setCustomer(refVal_setCustomer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("product"))))
    {
        std::shared_ptr<ProductDto> refVal_setProduct;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("product"))), refVal_setProduct );
        setProduct(refVal_setProduct);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("template"))))
    {
        std::shared_ptr<TemplateDto> refVal_setRTemplate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("template"))), refVal_setRTemplate );
        setRTemplate(refVal_setRTemplate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("license_type"))))
    {
        std::shared_ptr<LicenseTypeDto> refVal_setLicenseType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("license_type"))), refVal_setLicenseType );
        setLicenseType(refVal_setLicenseType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("software_release_limitation"))))
    {
        std::shared_ptr<SoftwareReleaseLimitationDto> refVal_setSoftwareReleaseLimitation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("software_release_limitation"))), refVal_setSoftwareReleaseLimitation );
        setSoftwareReleaseLimitation(refVal_setSoftwareReleaseLimitation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("prioritized_software_release"))))
    {
        utility::string_t refVal_setPrioritizedSoftwareRelease;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("prioritized_software_release"))), refVal_setPrioritizedSoftwareRelease );
        setPrioritizedSoftwareRelease(refVal_setPrioritizedSoftwareRelease);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mail_logs"))))
    {
        std::vector<std::shared_ptr<MailLogDto>> refVal_setMailLogs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mail_logs"))), refVal_setMailLogs );
        setMailLogs(refVal_setMailLogs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("client_id"))))
    {
        utility::string_t refVal_setClientId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("client_id"))), refVal_setClientId );
        setClientId(refVal_setClientId);
    }
    return ok;
}

utility::datetime LicenseDto::getExpirationDateUtc() const
{
    return m_Expiration_date_utc;
}

void LicenseDto::setExpirationDateUtc(const utility::datetime& value)
{
    m_Expiration_date_utc = value;
    m_Expiration_date_utcIsSet = true;
}

bool LicenseDto::expirationDateUtcIsSet() const
{
    return m_Expiration_date_utcIsSet;
}

void LicenseDto::unsetExpiration_date_utc()
{
    m_Expiration_date_utcIsSet = false;
}
std::shared_ptr<ExpirationMode> LicenseDto::getExpirationMode() const
{
    return m_Expiration_mode;
}

void LicenseDto::setExpirationMode(const std::shared_ptr<ExpirationMode>& value)
{
    m_Expiration_mode = value;
    m_Expiration_modeIsSet = true;
}

bool LicenseDto::expirationModeIsSet() const
{
    return m_Expiration_modeIsSet;
}

void LicenseDto::unsetExpiration_mode()
{
    m_Expiration_modeIsSet = false;
}
int32_t LicenseDto::getValidDaysCount() const
{
    return m_Valid_days_count;
}

void LicenseDto::setValidDaysCount(int32_t value)
{
    m_Valid_days_count = value;
    m_Valid_days_countIsSet = true;
}

bool LicenseDto::validDaysCountIsSet() const
{
    return m_Valid_days_countIsSet;
}

void LicenseDto::unsetValid_days_count()
{
    m_Valid_days_countIsSet = false;
}
int32_t LicenseDto::getTrialDaysCount() const
{
    return m_Trial_days_count;
}

void LicenseDto::setTrialDaysCount(int32_t value)
{
    m_Trial_days_count = value;
    m_Trial_days_countIsSet = true;
}

bool LicenseDto::trialDaysCountIsSet() const
{
    return m_Trial_days_countIsSet;
}

void LicenseDto::unsetTrial_days_count()
{
    m_Trial_days_countIsSet = false;
}
bool LicenseDto::isIsActive() const
{
    return m_Is_active;
}

void LicenseDto::setIsActive(bool value)
{
    m_Is_active = value;
    m_Is_activeIsSet = true;
}

bool LicenseDto::isActiveIsSet() const
{
    return m_Is_activeIsSet;
}

void LicenseDto::unsetIs_active()
{
    m_Is_activeIsSet = false;
}
bool LicenseDto::isIsExpired() const
{
    return m_Is_expired;
}

void LicenseDto::setIsExpired(bool value)
{
    m_Is_expired = value;
    m_Is_expiredIsSet = true;
}

bool LicenseDto::isExpiredIsSet() const
{
    return m_Is_expiredIsSet;
}

void LicenseDto::unsetIs_expired()
{
    m_Is_expiredIsSet = false;
}
bool LicenseDto::isIsValid() const
{
    return m_Is_valid;
}

void LicenseDto::setIsValid(bool value)
{
    m_Is_valid = value;
    m_Is_validIsSet = true;
}

bool LicenseDto::isValidIsSet() const
{
    return m_Is_validIsSet;
}

void LicenseDto::unsetIs_valid()
{
    m_Is_validIsSet = false;
}
bool LicenseDto::isIsSoftwareReleaseValid() const
{
    return m_Is_software_release_valid;
}

void LicenseDto::setIsSoftwareReleaseValid(bool value)
{
    m_Is_software_release_valid = value;
    m_Is_software_release_validIsSet = true;
}

bool LicenseDto::isSoftwareReleaseValidIsSet() const
{
    return m_Is_software_release_validIsSet;
}

void LicenseDto::unsetIs_software_release_valid()
{
    m_Is_software_release_validIsSet = false;
}
bool LicenseDto::isIsGroupValid() const
{
    return m_Is_group_valid;
}

void LicenseDto::setIsGroupValid(bool value)
{
    m_Is_group_valid = value;
    m_Is_group_validIsSet = true;
}

bool LicenseDto::isGroupValidIsSet() const
{
    return m_Is_group_validIsSet;
}

void LicenseDto::unsetIs_group_valid()
{
    m_Is_group_validIsSet = false;
}
int32_t LicenseDto::getGroupCount() const
{
    return m_Group_count;
}

void LicenseDto::setGroupCount(int32_t value)
{
    m_Group_count = value;
    m_Group_countIsSet = true;
}

bool LicenseDto::groupCountIsSet() const
{
    return m_Group_countIsSet;
}

void LicenseDto::unsetGroup_count()
{
    m_Group_countIsSet = false;
}
utility::datetime LicenseDto::getDateOfIssueUtc() const
{
    return m_Date_of_issue_utc;
}

void LicenseDto::setDateOfIssueUtc(const utility::datetime& value)
{
    m_Date_of_issue_utc = value;
    m_Date_of_issue_utcIsSet = true;
}

bool LicenseDto::dateOfIssueUtcIsSet() const
{
    return m_Date_of_issue_utcIsSet;
}

void LicenseDto::unsetDate_of_issue_utc()
{
    m_Date_of_issue_utcIsSet = false;
}
utility::string_t LicenseDto::getId() const
{
    return m_Id;
}

void LicenseDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool LicenseDto::idIsSet() const
{
    return m_IdIsSet;
}

void LicenseDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t LicenseDto::getCustomerId() const
{
    return m_Customer_id;
}

void LicenseDto::setCustomerId(const utility::string_t& value)
{
    m_Customer_id = value;
    m_Customer_idIsSet = true;
}

bool LicenseDto::customerIdIsSet() const
{
    return m_Customer_idIsSet;
}

void LicenseDto::unsetCustomer_id()
{
    m_Customer_idIsSet = false;
}
utility::string_t LicenseDto::getProductId() const
{
    return m_Product_id;
}

void LicenseDto::setProductId(const utility::string_t& value)
{
    m_Product_id = value;
    m_Product_idIsSet = true;
}

bool LicenseDto::productIdIsSet() const
{
    return m_Product_idIsSet;
}

void LicenseDto::unsetProduct_id()
{
    m_Product_idIsSet = false;
}
utility::string_t LicenseDto::getTemplateId() const
{
    return m_Template_id;
}

void LicenseDto::setTemplateId(const utility::string_t& value)
{
    m_Template_id = value;
    m_Template_idIsSet = true;
}

bool LicenseDto::templateIdIsSet() const
{
    return m_Template_idIsSet;
}

void LicenseDto::unsetTemplate_id()
{
    m_Template_idIsSet = false;
}
utility::string_t LicenseDto::getLicenseTypeId() const
{
    return m_License_type_id;
}

void LicenseDto::setLicenseTypeId(const utility::string_t& value)
{
    m_License_type_id = value;
    m_License_type_idIsSet = true;
}

bool LicenseDto::licenseTypeIdIsSet() const
{
    return m_License_type_idIsSet;
}

void LicenseDto::unsetLicense_type_id()
{
    m_License_type_idIsSet = false;
}
utility::string_t LicenseDto::getLegacyLicenseKey() const
{
    return m_Legacy_license_key;
}

void LicenseDto::setLegacyLicenseKey(const utility::string_t& value)
{
    m_Legacy_license_key = value;
    m_Legacy_license_keyIsSet = true;
}

bool LicenseDto::legacyLicenseKeyIsSet() const
{
    return m_Legacy_license_keyIsSet;
}

void LicenseDto::unsetLegacy_license_key()
{
    m_Legacy_license_keyIsSet = false;
}
utility::string_t LicenseDto::getName() const
{
    return m_Name;
}

void LicenseDto::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool LicenseDto::nameIsSet() const
{
    return m_NameIsSet;
}

void LicenseDto::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t LicenseDto::getDescription() const
{
    return m_Description;
}

void LicenseDto::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool LicenseDto::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void LicenseDto::unsetDescription()
{
    m_DescriptionIsSet = false;
}
int32_t LicenseDto::getTokenLimit() const
{
    return m_Token_limit;
}

void LicenseDto::setTokenLimit(int32_t value)
{
    m_Token_limit = value;
    m_Token_limitIsSet = true;
}

bool LicenseDto::tokenLimitIsSet() const
{
    return m_Token_limitIsSet;
}

void LicenseDto::unsetToken_limit()
{
    m_Token_limitIsSet = false;
}
int32_t LicenseDto::getGoodwillTokenLimit() const
{
    return m_Goodwill_token_limit;
}

void LicenseDto::setGoodwillTokenLimit(int32_t value)
{
    m_Goodwill_token_limit = value;
    m_Goodwill_token_limitIsSet = true;
}

bool LicenseDto::goodwillTokenLimitIsSet() const
{
    return m_Goodwill_token_limitIsSet;
}

void LicenseDto::unsetGoodwill_token_limit()
{
    m_Goodwill_token_limitIsSet = false;
}
int32_t LicenseDto::getFloatingTokenLimit() const
{
    return m_Floating_token_limit;
}

void LicenseDto::setFloatingTokenLimit(int32_t value)
{
    m_Floating_token_limit = value;
    m_Floating_token_limitIsSet = true;
}

bool LicenseDto::floatingTokenLimitIsSet() const
{
    return m_Floating_token_limitIsSet;
}

void LicenseDto::unsetFloating_token_limit()
{
    m_Floating_token_limitIsSet = false;
}
int32_t LicenseDto::getUserLimit() const
{
    return m_User_limit;
}

void LicenseDto::setUserLimit(int32_t value)
{
    m_User_limit = value;
    m_User_limitIsSet = true;
}

bool LicenseDto::userLimitIsSet() const
{
    return m_User_limitIsSet;
}

void LicenseDto::unsetUser_limit()
{
    m_User_limitIsSet = false;
}
utility::string_t LicenseDto::getSoftwareReleaseLimitationId() const
{
    return m_Software_release_limitation_id;
}

void LicenseDto::setSoftwareReleaseLimitationId(const utility::string_t& value)
{
    m_Software_release_limitation_id = value;
    m_Software_release_limitation_idIsSet = true;
}

bool LicenseDto::softwareReleaseLimitationIdIsSet() const
{
    return m_Software_release_limitation_idIsSet;
}

void LicenseDto::unsetSoftware_release_limitation_id()
{
    m_Software_release_limitation_idIsSet = false;
}
bool LicenseDto::isIsTemporary() const
{
    return m_Is_temporary;
}

void LicenseDto::setIsTemporary(bool value)
{
    m_Is_temporary = value;
    m_Is_temporaryIsSet = true;
}

bool LicenseDto::isTemporaryIsSet() const
{
    return m_Is_temporaryIsSet;
}

void LicenseDto::unsetIs_temporary()
{
    m_Is_temporaryIsSet = false;
}
std::vector<std::shared_ptr<LicenseFeatureDto>>& LicenseDto::getLicenseFeatures()
{
    return m_License_features;
}

void LicenseDto::setLicenseFeatures(const std::vector<std::shared_ptr<LicenseFeatureDto>>& value)
{
    m_License_features = value;
    m_License_featuresIsSet = true;
}

bool LicenseDto::licenseFeaturesIsSet() const
{
    return m_License_featuresIsSet;
}

void LicenseDto::unsetLicense_features()
{
    m_License_featuresIsSet = false;
}
std::vector<std::shared_ptr<LicenseLimitationDto>>& LicenseDto::getLicenseLimitations()
{
    return m_License_limitations;
}

void LicenseDto::setLicenseLimitations(const std::vector<std::shared_ptr<LicenseLimitationDto>>& value)
{
    m_License_limitations = value;
    m_License_limitationsIsSet = true;
}

bool LicenseDto::licenseLimitationsIsSet() const
{
    return m_License_limitationsIsSet;
}

void LicenseDto::unsetLicense_limitations()
{
    m_License_limitationsIsSet = false;
}
std::vector<std::shared_ptr<LicenseConstrainedVariableDto>>& LicenseDto::getLicenseConstrainedVariables()
{
    return m_License_constrained_variables;
}

void LicenseDto::setLicenseConstrainedVariables(const std::vector<std::shared_ptr<LicenseConstrainedVariableDto>>& value)
{
    m_License_constrained_variables = value;
    m_License_constrained_variablesIsSet = true;
}

bool LicenseDto::licenseConstrainedVariablesIsSet() const
{
    return m_License_constrained_variablesIsSet;
}

void LicenseDto::unsetLicense_constrained_variables()
{
    m_License_constrained_variablesIsSet = false;
}
std::vector<std::shared_ptr<LicenseVariableDto>>& LicenseDto::getLicenseVariables()
{
    return m_License_variables;
}

void LicenseDto::setLicenseVariables(const std::vector<std::shared_ptr<LicenseVariableDto>>& value)
{
    m_License_variables = value;
    m_License_variablesIsSet = true;
}

bool LicenseDto::licenseVariablesIsSet() const
{
    return m_License_variablesIsSet;
}

void LicenseDto::unsetLicense_variables()
{
    m_License_variablesIsSet = false;
}
std::vector<std::shared_ptr<LicenseUserGroupDto>>& LicenseDto::getLicenseUsersGroups()
{
    return m_License_users_groups;
}

void LicenseDto::setLicenseUsersGroups(const std::vector<std::shared_ptr<LicenseUserGroupDto>>& value)
{
    m_License_users_groups = value;
    m_License_users_groupsIsSet = true;
}

bool LicenseDto::licenseUsersGroupsIsSet() const
{
    return m_License_users_groupsIsSet;
}

void LicenseDto::unsetLicense_users_groups()
{
    m_License_users_groupsIsSet = false;
}
std::vector<std::shared_ptr<LicenseUserDto>>& LicenseDto::getLicenseUsers()
{
    return m_License_users;
}

void LicenseDto::setLicenseUsers(const std::vector<std::shared_ptr<LicenseUserDto>>& value)
{
    m_License_users = value;
    m_License_usersIsSet = true;
}

bool LicenseDto::licenseUsersIsSet() const
{
    return m_License_usersIsSet;
}

void LicenseDto::unsetLicense_users()
{
    m_License_usersIsSet = false;
}
utility::datetime LicenseDto::getCreatedDateUtc() const
{
    return m_Created_date_utc;
}

void LicenseDto::setCreatedDateUtc(const utility::datetime& value)
{
    m_Created_date_utc = value;
    m_Created_date_utcIsSet = true;
}

bool LicenseDto::createdDateUtcIsSet() const
{
    return m_Created_date_utcIsSet;
}

void LicenseDto::unsetCreated_date_utc()
{
    m_Created_date_utcIsSet = false;
}
utility::datetime LicenseDto::getModifiedDateUtc() const
{
    return m_Modified_date_utc;
}

void LicenseDto::setModifiedDateUtc(const utility::datetime& value)
{
    m_Modified_date_utc = value;
    m_Modified_date_utcIsSet = true;
}

bool LicenseDto::modifiedDateUtcIsSet() const
{
    return m_Modified_date_utcIsSet;
}

void LicenseDto::unsetModified_date_utc()
{
    m_Modified_date_utcIsSet = false;
}
utility::string_t LicenseDto::getLastModifiedBy() const
{
    return m_Last_modified_by;
}

void LicenseDto::setLastModifiedBy(const utility::string_t& value)
{
    m_Last_modified_by = value;
    m_Last_modified_byIsSet = true;
}

bool LicenseDto::lastModifiedByIsSet() const
{
    return m_Last_modified_byIsSet;
}

void LicenseDto::unsetLast_modified_by()
{
    m_Last_modified_byIsSet = false;
}
std::shared_ptr<CustomerDto> LicenseDto::getCustomer() const
{
    return m_Customer;
}

void LicenseDto::setCustomer(const std::shared_ptr<CustomerDto>& value)
{
    m_Customer = value;
    m_CustomerIsSet = true;
}

bool LicenseDto::customerIsSet() const
{
    return m_CustomerIsSet;
}

void LicenseDto::unsetCustomer()
{
    m_CustomerIsSet = false;
}
std::shared_ptr<ProductDto> LicenseDto::getProduct() const
{
    return m_Product;
}

void LicenseDto::setProduct(const std::shared_ptr<ProductDto>& value)
{
    m_Product = value;
    m_ProductIsSet = true;
}

bool LicenseDto::productIsSet() const
{
    return m_ProductIsSet;
}

void LicenseDto::unsetProduct()
{
    m_ProductIsSet = false;
}
std::shared_ptr<TemplateDto> LicenseDto::getRTemplate() const
{
    return m_r_template;
}

void LicenseDto::setRTemplate(const std::shared_ptr<TemplateDto>& value)
{
    m_r_template = value;
    m_r_templateIsSet = true;
}

bool LicenseDto::rTemplateIsSet() const
{
    return m_r_templateIsSet;
}

void LicenseDto::unsetr_template()
{
    m_r_templateIsSet = false;
}
std::shared_ptr<LicenseTypeDto> LicenseDto::getLicenseType() const
{
    return m_License_type;
}

void LicenseDto::setLicenseType(const std::shared_ptr<LicenseTypeDto>& value)
{
    m_License_type = value;
    m_License_typeIsSet = true;
}

bool LicenseDto::licenseTypeIsSet() const
{
    return m_License_typeIsSet;
}

void LicenseDto::unsetLicense_type()
{
    m_License_typeIsSet = false;
}
std::shared_ptr<SoftwareReleaseLimitationDto> LicenseDto::getSoftwareReleaseLimitation() const
{
    return m_Software_release_limitation;
}

void LicenseDto::setSoftwareReleaseLimitation(const std::shared_ptr<SoftwareReleaseLimitationDto>& value)
{
    m_Software_release_limitation = value;
    m_Software_release_limitationIsSet = true;
}

bool LicenseDto::softwareReleaseLimitationIsSet() const
{
    return m_Software_release_limitationIsSet;
}

void LicenseDto::unsetSoftware_release_limitation()
{
    m_Software_release_limitationIsSet = false;
}
utility::string_t LicenseDto::getPrioritizedSoftwareRelease() const
{
    return m_Prioritized_software_release;
}

void LicenseDto::setPrioritizedSoftwareRelease(const utility::string_t& value)
{
    m_Prioritized_software_release = value;
    m_Prioritized_software_releaseIsSet = true;
}

bool LicenseDto::prioritizedSoftwareReleaseIsSet() const
{
    return m_Prioritized_software_releaseIsSet;
}

void LicenseDto::unsetPrioritized_software_release()
{
    m_Prioritized_software_releaseIsSet = false;
}
std::vector<std::shared_ptr<MailLogDto>>& LicenseDto::getMailLogs()
{
    return m_Mail_logs;
}

void LicenseDto::setMailLogs(const std::vector<std::shared_ptr<MailLogDto>>& value)
{
    m_Mail_logs = value;
    m_Mail_logsIsSet = true;
}

bool LicenseDto::mailLogsIsSet() const
{
    return m_Mail_logsIsSet;
}

void LicenseDto::unsetMail_logs()
{
    m_Mail_logsIsSet = false;
}
utility::string_t LicenseDto::getClientId() const
{
    return m_Client_id;
}

void LicenseDto::setClientId(const utility::string_t& value)
{
    m_Client_id = value;
    m_Client_idIsSet = true;
}

bool LicenseDto::clientIdIsSet() const
{
    return m_Client_idIsSet;
}

void LicenseDto::unsetClient_id()
{
    m_Client_idIsSet = false;
}
}
}
}
}


