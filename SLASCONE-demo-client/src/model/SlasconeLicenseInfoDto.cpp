/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/SlasconeLicenseInfoDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



SlasconeLicenseInfoDto::SlasconeLicenseInfoDto()
{
    m_Slascone_licensing_stateIsSet = false;
    m_Error_message = utility::conversions::to_string_t("");
    m_Error_messageIsSet = false;
    m_Slascone_license_infoIsSet = false;
}

SlasconeLicenseInfoDto::~SlasconeLicenseInfoDto()
{
}

void SlasconeLicenseInfoDto::validate()
{
    // TODO: implement validation
}

web::json::value SlasconeLicenseInfoDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Slascone_licensing_stateIsSet)
    {
        val[utility::conversions::to_string_t(U("slascone_licensing_state"))] = ModelBase::toJson(m_Slascone_licensing_state);
    }
    if(m_Error_messageIsSet)
    {
        val[utility::conversions::to_string_t(U("error_message"))] = ModelBase::toJson(m_Error_message);
    }
    if(m_Slascone_license_infoIsSet)
    {
        val[utility::conversions::to_string_t(U("slascone_license_info"))] = ModelBase::toJson(m_Slascone_license_info);
    }

    return val;
}

bool SlasconeLicenseInfoDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("slascone_licensing_state"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("slascone_licensing_state")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SlasconeLicensingState> refVal_setSlasconeLicensingState;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSlasconeLicensingState);
            setSlasconeLicensingState(refVal_setSlasconeLicensingState);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("error_message"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("error_message")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setErrorMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setErrorMessage);
            setErrorMessage(refVal_setErrorMessage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("slascone_license_info"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("slascone_license_info")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<LicenseInfoDto> refVal_setSlasconeLicenseInfo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSlasconeLicenseInfo);
            setSlasconeLicenseInfo(refVal_setSlasconeLicenseInfo);
        }
    }
    return ok;
}

void SlasconeLicenseInfoDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Slascone_licensing_stateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("slascone_licensing_state")), m_Slascone_licensing_state));
    }
    if(m_Error_messageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("error_message")), m_Error_message));
    }
    if(m_Slascone_license_infoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("slascone_license_info")), m_Slascone_license_info));
    }
}

bool SlasconeLicenseInfoDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("slascone_licensing_state"))))
    {
        std::shared_ptr<SlasconeLicensingState> refVal_setSlasconeLicensingState;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("slascone_licensing_state"))), refVal_setSlasconeLicensingState );
        setSlasconeLicensingState(refVal_setSlasconeLicensingState);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("error_message"))))
    {
        utility::string_t refVal_setErrorMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("error_message"))), refVal_setErrorMessage );
        setErrorMessage(refVal_setErrorMessage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("slascone_license_info"))))
    {
        std::shared_ptr<LicenseInfoDto> refVal_setSlasconeLicenseInfo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("slascone_license_info"))), refVal_setSlasconeLicenseInfo );
        setSlasconeLicenseInfo(refVal_setSlasconeLicenseInfo);
    }
    return ok;
}

std::shared_ptr<SlasconeLicensingState> SlasconeLicenseInfoDto::getSlasconeLicensingState() const
{
    return m_Slascone_licensing_state;
}

void SlasconeLicenseInfoDto::setSlasconeLicensingState(const std::shared_ptr<SlasconeLicensingState>& value)
{
    m_Slascone_licensing_state = value;
    m_Slascone_licensing_stateIsSet = true;
}

bool SlasconeLicenseInfoDto::slasconeLicensingStateIsSet() const
{
    return m_Slascone_licensing_stateIsSet;
}

void SlasconeLicenseInfoDto::unsetSlascone_licensing_state()
{
    m_Slascone_licensing_stateIsSet = false;
}
utility::string_t SlasconeLicenseInfoDto::getErrorMessage() const
{
    return m_Error_message;
}

void SlasconeLicenseInfoDto::setErrorMessage(const utility::string_t& value)
{
    m_Error_message = value;
    m_Error_messageIsSet = true;
}

bool SlasconeLicenseInfoDto::errorMessageIsSet() const
{
    return m_Error_messageIsSet;
}

void SlasconeLicenseInfoDto::unsetError_message()
{
    m_Error_messageIsSet = false;
}
std::shared_ptr<LicenseInfoDto> SlasconeLicenseInfoDto::getSlasconeLicenseInfo() const
{
    return m_Slascone_license_info;
}

void SlasconeLicenseInfoDto::setSlasconeLicenseInfo(const std::shared_ptr<LicenseInfoDto>& value)
{
    m_Slascone_license_info = value;
    m_Slascone_license_infoIsSet = true;
}

bool SlasconeLicenseInfoDto::slasconeLicenseInfoIsSet() const
{
    return m_Slascone_license_infoIsSet;
}

void SlasconeLicenseInfoDto::unsetSlascone_license_info()
{
    m_Slascone_license_infoIsSet = false;
}
}
}
}
}


