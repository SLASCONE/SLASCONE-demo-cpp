/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/LicenseVariableDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



LicenseVariableDto::LicenseVariableDto()
{
    m_Product_id = utility::conversions::to_string_t("");
    m_Product_idIsSet = false;
    m_Variable_id = utility::conversions::to_string_t("");
    m_Variable_idIsSet = false;
    m_Variable_name = utility::conversions::to_string_t("");
    m_Variable_nameIsSet = false;
    m_Variable_description = utility::conversions::to_string_t("");
    m_Variable_descriptionIsSet = false;
    m_Value = utility::conversions::to_string_t("");
    m_ValueIsSet = false;
}

LicenseVariableDto::~LicenseVariableDto()
{
}

void LicenseVariableDto::validate()
{
    // TODO: implement validation
}

web::json::value LicenseVariableDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Product_idIsSet)
    {
        val[utility::conversions::to_string_t(U("product_id"))] = ModelBase::toJson(m_Product_id);
    }
    if(m_Variable_idIsSet)
    {
        val[utility::conversions::to_string_t(U("variable_id"))] = ModelBase::toJson(m_Variable_id);
    }
    if(m_Variable_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("variable_name"))] = ModelBase::toJson(m_Variable_name);
    }
    if(m_Variable_descriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("variable_description"))] = ModelBase::toJson(m_Variable_description);
    }
    if(m_ValueIsSet)
    {
        val[utility::conversions::to_string_t(U("value"))] = ModelBase::toJson(m_Value);
    }

    return val;
}

bool LicenseVariableDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("product_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("product_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProductId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProductId);
            setProductId(refVal_setProductId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("variable_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("variable_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVariableId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVariableId);
            setVariableId(refVal_setVariableId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("variable_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("variable_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVariableName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVariableName);
            setVariableName(refVal_setVariableName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("variable_description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("variable_description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVariableDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVariableDescription);
            setVariableDescription(refVal_setVariableDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("value"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("value")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValue);
            setValue(refVal_setValue);
        }
    }
    return ok;
}

void LicenseVariableDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Product_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("product_id")), m_Product_id));
    }
    if(m_Variable_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("variable_id")), m_Variable_id));
    }
    if(m_Variable_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("variable_name")), m_Variable_name));
    }
    if(m_Variable_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("variable_description")), m_Variable_description));
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("value")), m_Value));
    }
}

bool LicenseVariableDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("product_id"))))
    {
        utility::string_t refVal_setProductId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("product_id"))), refVal_setProductId );
        setProductId(refVal_setProductId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("variable_id"))))
    {
        utility::string_t refVal_setVariableId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("variable_id"))), refVal_setVariableId );
        setVariableId(refVal_setVariableId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("variable_name"))))
    {
        utility::string_t refVal_setVariableName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("variable_name"))), refVal_setVariableName );
        setVariableName(refVal_setVariableName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("variable_description"))))
    {
        utility::string_t refVal_setVariableDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("variable_description"))), refVal_setVariableDescription );
        setVariableDescription(refVal_setVariableDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("value"))))
    {
        utility::string_t refVal_setValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("value"))), refVal_setValue );
        setValue(refVal_setValue);
    }
    return ok;
}

utility::string_t LicenseVariableDto::getProductId() const
{
    return m_Product_id;
}

void LicenseVariableDto::setProductId(const utility::string_t& value)
{
    m_Product_id = value;
    m_Product_idIsSet = true;
}

bool LicenseVariableDto::productIdIsSet() const
{
    return m_Product_idIsSet;
}

void LicenseVariableDto::unsetProduct_id()
{
    m_Product_idIsSet = false;
}
utility::string_t LicenseVariableDto::getVariableId() const
{
    return m_Variable_id;
}

void LicenseVariableDto::setVariableId(const utility::string_t& value)
{
    m_Variable_id = value;
    m_Variable_idIsSet = true;
}

bool LicenseVariableDto::variableIdIsSet() const
{
    return m_Variable_idIsSet;
}

void LicenseVariableDto::unsetVariable_id()
{
    m_Variable_idIsSet = false;
}
utility::string_t LicenseVariableDto::getVariableName() const
{
    return m_Variable_name;
}

void LicenseVariableDto::setVariableName(const utility::string_t& value)
{
    m_Variable_name = value;
    m_Variable_nameIsSet = true;
}

bool LicenseVariableDto::variableNameIsSet() const
{
    return m_Variable_nameIsSet;
}

void LicenseVariableDto::unsetVariable_name()
{
    m_Variable_nameIsSet = false;
}
utility::string_t LicenseVariableDto::getVariableDescription() const
{
    return m_Variable_description;
}

void LicenseVariableDto::setVariableDescription(const utility::string_t& value)
{
    m_Variable_description = value;
    m_Variable_descriptionIsSet = true;
}

bool LicenseVariableDto::variableDescriptionIsSet() const
{
    return m_Variable_descriptionIsSet;
}

void LicenseVariableDto::unsetVariable_description()
{
    m_Variable_descriptionIsSet = false;
}
utility::string_t LicenseVariableDto::getValue() const
{
    return m_Value;
}

void LicenseVariableDto::setValue(const utility::string_t& value)
{
    m_Value = value;
    m_ValueIsSet = true;
}

bool LicenseVariableDto::valueIsSet() const
{
    return m_ValueIsSet;
}

void LicenseVariableDto::unsetValue()
{
    m_ValueIsSet = false;
}
}
}
}
}


