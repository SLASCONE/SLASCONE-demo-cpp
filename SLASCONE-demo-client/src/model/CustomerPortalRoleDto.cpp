/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/CustomerPortalRoleDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CustomerPortalRoleDto::CustomerPortalRoleDto()
{
    m_CustomerId = utility::conversions::to_string_t("");
    m_CustomerIdIsSet = false;
    m_CustomerName = utility::conversions::to_string_t("");
    m_CustomerNameIsSet = false;
    m_CustomerPortalRoleId = utility::conversions::to_string_t("");
    m_CustomerPortalRoleIdIsSet = false;
}

CustomerPortalRoleDto::~CustomerPortalRoleDto()
{
}

void CustomerPortalRoleDto::validate()
{
    // TODO: implement validation
}

web::json::value CustomerPortalRoleDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CustomerIdIsSet)
    {
        val[utility::conversions::to_string_t(U("customerId"))] = ModelBase::toJson(m_CustomerId);
    }
    if(m_CustomerNameIsSet)
    {
        val[utility::conversions::to_string_t(U("customerName"))] = ModelBase::toJson(m_CustomerName);
    }
    if(m_CustomerPortalRoleIdIsSet)
    {
        val[utility::conversions::to_string_t(U("customerPortalRoleId"))] = ModelBase::toJson(m_CustomerPortalRoleId);
    }

    return val;
}

bool CustomerPortalRoleDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("customerId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("customerId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCustomerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomerId);
            setCustomerId(refVal_setCustomerId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("customerName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("customerName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCustomerName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomerName);
            setCustomerName(refVal_setCustomerName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("customerPortalRoleId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("customerPortalRoleId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCustomerPortalRoleId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomerPortalRoleId);
            setCustomerPortalRoleId(refVal_setCustomerPortalRoleId);
        }
    }
    return ok;
}

void CustomerPortalRoleDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CustomerIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("customerId")), m_CustomerId));
    }
    if(m_CustomerNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("customerName")), m_CustomerName));
    }
    if(m_CustomerPortalRoleIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("customerPortalRoleId")), m_CustomerPortalRoleId));
    }
}

bool CustomerPortalRoleDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("customerId"))))
    {
        utility::string_t refVal_setCustomerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("customerId"))), refVal_setCustomerId );
        setCustomerId(refVal_setCustomerId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("customerName"))))
    {
        utility::string_t refVal_setCustomerName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("customerName"))), refVal_setCustomerName );
        setCustomerName(refVal_setCustomerName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("customerPortalRoleId"))))
    {
        utility::string_t refVal_setCustomerPortalRoleId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("customerPortalRoleId"))), refVal_setCustomerPortalRoleId );
        setCustomerPortalRoleId(refVal_setCustomerPortalRoleId);
    }
    return ok;
}

utility::string_t CustomerPortalRoleDto::getCustomerId() const
{
    return m_CustomerId;
}

void CustomerPortalRoleDto::setCustomerId(const utility::string_t& value)
{
    m_CustomerId = value;
    m_CustomerIdIsSet = true;
}

bool CustomerPortalRoleDto::customerIdIsSet() const
{
    return m_CustomerIdIsSet;
}

void CustomerPortalRoleDto::unsetCustomerId()
{
    m_CustomerIdIsSet = false;
}
utility::string_t CustomerPortalRoleDto::getCustomerName() const
{
    return m_CustomerName;
}

void CustomerPortalRoleDto::setCustomerName(const utility::string_t& value)
{
    m_CustomerName = value;
    m_CustomerNameIsSet = true;
}

bool CustomerPortalRoleDto::customerNameIsSet() const
{
    return m_CustomerNameIsSet;
}

void CustomerPortalRoleDto::unsetCustomerName()
{
    m_CustomerNameIsSet = false;
}
utility::string_t CustomerPortalRoleDto::getCustomerPortalRoleId() const
{
    return m_CustomerPortalRoleId;
}

void CustomerPortalRoleDto::setCustomerPortalRoleId(const utility::string_t& value)
{
    m_CustomerPortalRoleId = value;
    m_CustomerPortalRoleIdIsSet = true;
}

bool CustomerPortalRoleDto::customerPortalRoleIdIsSet() const
{
    return m_CustomerPortalRoleIdIsSet;
}

void CustomerPortalRoleDto::unsetCustomerPortalRoleId()
{
    m_CustomerPortalRoleIdIsSet = false;
}
}
}
}
}


