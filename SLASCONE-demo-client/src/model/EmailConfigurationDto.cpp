/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/EmailConfigurationDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



EmailConfigurationDto::EmailConfigurationDto()
{
    m_Inherit_from_vendor = false;
    m_Inherit_from_vendorIsSet = false;
    m_Use_azure_communication_service = false;
    m_Use_azure_communication_serviceIsSet = false;
    m_From_email = utility::conversions::to_string_t("");
    m_From_emailIsSet = false;
    m_Password = utility::conversions::to_string_t("");
    m_PasswordIsSet = false;
    m_To_emailIsSet = false;
    m_Smtp_client = utility::conversions::to_string_t("");
    m_Smtp_clientIsSet = false;
    m_Smtp_port = 0;
    m_Smtp_portIsSet = false;
    m_Acs_sender_domain = utility::conversions::to_string_t("");
    m_Acs_sender_domainIsSet = false;
    m_Acs_sender_username = utility::conversions::to_string_t("");
    m_Acs_sender_usernameIsSet = false;
    m_Created_date_utc = utility::datetime();
    m_Created_date_utcIsSet = false;
    m_Modified_date_utc = utility::datetime();
    m_Modified_date_utcIsSet = false;
    m_Last_modified_by = utility::conversions::to_string_t("");
    m_Last_modified_byIsSet = false;
}

EmailConfigurationDto::~EmailConfigurationDto()
{
}

void EmailConfigurationDto::validate()
{
    // TODO: implement validation
}

web::json::value EmailConfigurationDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Inherit_from_vendorIsSet)
    {
        val[utility::conversions::to_string_t(U("inherit_from_vendor"))] = ModelBase::toJson(m_Inherit_from_vendor);
    }
    if(m_Use_azure_communication_serviceIsSet)
    {
        val[utility::conversions::to_string_t(U("use_azure_communication_service"))] = ModelBase::toJson(m_Use_azure_communication_service);
    }
    if(m_From_emailIsSet)
    {
        val[utility::conversions::to_string_t(U("from_email"))] = ModelBase::toJson(m_From_email);
    }
    if(m_PasswordIsSet)
    {
        val[utility::conversions::to_string_t(U("password"))] = ModelBase::toJson(m_Password);
    }
    if(m_To_emailIsSet)
    {
        val[utility::conversions::to_string_t(U("to_email"))] = ModelBase::toJson(m_To_email);
    }
    if(m_Smtp_clientIsSet)
    {
        val[utility::conversions::to_string_t(U("smtp_client"))] = ModelBase::toJson(m_Smtp_client);
    }
    if(m_Smtp_portIsSet)
    {
        val[utility::conversions::to_string_t(U("smtp_port"))] = ModelBase::toJson(m_Smtp_port);
    }
    if(m_Acs_sender_domainIsSet)
    {
        val[utility::conversions::to_string_t(U("acs_sender_domain"))] = ModelBase::toJson(m_Acs_sender_domain);
    }
    if(m_Acs_sender_usernameIsSet)
    {
        val[utility::conversions::to_string_t(U("acs_sender_username"))] = ModelBase::toJson(m_Acs_sender_username);
    }
    if(m_Created_date_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("created_date_utc"))] = ModelBase::toJson(m_Created_date_utc);
    }
    if(m_Modified_date_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("modified_date_utc"))] = ModelBase::toJson(m_Modified_date_utc);
    }
    if(m_Last_modified_byIsSet)
    {
        val[utility::conversions::to_string_t(U("last_modified_by"))] = ModelBase::toJson(m_Last_modified_by);
    }

    return val;
}

bool EmailConfigurationDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("inherit_from_vendor"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("inherit_from_vendor")));
        if(!fieldValue.is_null())
        {
            bool refVal_setInheritFromVendor;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInheritFromVendor);
            setInheritFromVendor(refVal_setInheritFromVendor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("use_azure_communication_service"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("use_azure_communication_service")));
        if(!fieldValue.is_null())
        {
            bool refVal_setUseAzureCommunicationService;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUseAzureCommunicationService);
            setUseAzureCommunicationService(refVal_setUseAzureCommunicationService);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("from_email"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("from_email")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFromEmail;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFromEmail);
            setFromEmail(refVal_setFromEmail);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("password"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("password")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPassword;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPassword);
            setPassword(refVal_setPassword);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("to_email"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("to_email")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setToEmail;
            ok &= ModelBase::fromJson(fieldValue, refVal_setToEmail);
            setToEmail(refVal_setToEmail);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("smtp_client"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("smtp_client")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSmtpClient;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSmtpClient);
            setSmtpClient(refVal_setSmtpClient);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("smtp_port"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("smtp_port")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSmtpPort;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSmtpPort);
            setSmtpPort(refVal_setSmtpPort);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("acs_sender_domain"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("acs_sender_domain")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAcsSenderDomain;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAcsSenderDomain);
            setAcsSenderDomain(refVal_setAcsSenderDomain);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("acs_sender_username"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("acs_sender_username")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAcsSenderUsername;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAcsSenderUsername);
            setAcsSenderUsername(refVal_setAcsSenderUsername);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_date_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_date_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedDateUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedDateUtc);
            setCreatedDateUtc(refVal_setCreatedDateUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("modified_date_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("modified_date_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setModifiedDateUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModifiedDateUtc);
            setModifiedDateUtc(refVal_setModifiedDateUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("last_modified_by"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("last_modified_by")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLastModifiedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastModifiedBy);
            setLastModifiedBy(refVal_setLastModifiedBy);
        }
    }
    return ok;
}

void EmailConfigurationDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Inherit_from_vendorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("inherit_from_vendor")), m_Inherit_from_vendor));
    }
    if(m_Use_azure_communication_serviceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("use_azure_communication_service")), m_Use_azure_communication_service));
    }
    if(m_From_emailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("from_email")), m_From_email));
    }
    if(m_PasswordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("password")), m_Password));
    }
    if(m_To_emailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("to_email")), m_To_email));
    }
    if(m_Smtp_clientIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("smtp_client")), m_Smtp_client));
    }
    if(m_Smtp_portIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("smtp_port")), m_Smtp_port));
    }
    if(m_Acs_sender_domainIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("acs_sender_domain")), m_Acs_sender_domain));
    }
    if(m_Acs_sender_usernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("acs_sender_username")), m_Acs_sender_username));
    }
    if(m_Created_date_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_date_utc")), m_Created_date_utc));
    }
    if(m_Modified_date_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("modified_date_utc")), m_Modified_date_utc));
    }
    if(m_Last_modified_byIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("last_modified_by")), m_Last_modified_by));
    }
}

bool EmailConfigurationDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("inherit_from_vendor"))))
    {
        bool refVal_setInheritFromVendor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("inherit_from_vendor"))), refVal_setInheritFromVendor );
        setInheritFromVendor(refVal_setInheritFromVendor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("use_azure_communication_service"))))
    {
        bool refVal_setUseAzureCommunicationService;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("use_azure_communication_service"))), refVal_setUseAzureCommunicationService );
        setUseAzureCommunicationService(refVal_setUseAzureCommunicationService);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("from_email"))))
    {
        utility::string_t refVal_setFromEmail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("from_email"))), refVal_setFromEmail );
        setFromEmail(refVal_setFromEmail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("password"))))
    {
        utility::string_t refVal_setPassword;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("password"))), refVal_setPassword );
        setPassword(refVal_setPassword);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("to_email"))))
    {
        std::vector<utility::string_t> refVal_setToEmail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("to_email"))), refVal_setToEmail );
        setToEmail(refVal_setToEmail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("smtp_client"))))
    {
        utility::string_t refVal_setSmtpClient;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("smtp_client"))), refVal_setSmtpClient );
        setSmtpClient(refVal_setSmtpClient);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("smtp_port"))))
    {
        int32_t refVal_setSmtpPort;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("smtp_port"))), refVal_setSmtpPort );
        setSmtpPort(refVal_setSmtpPort);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("acs_sender_domain"))))
    {
        utility::string_t refVal_setAcsSenderDomain;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("acs_sender_domain"))), refVal_setAcsSenderDomain );
        setAcsSenderDomain(refVal_setAcsSenderDomain);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("acs_sender_username"))))
    {
        utility::string_t refVal_setAcsSenderUsername;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("acs_sender_username"))), refVal_setAcsSenderUsername );
        setAcsSenderUsername(refVal_setAcsSenderUsername);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_date_utc"))))
    {
        utility::datetime refVal_setCreatedDateUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_date_utc"))), refVal_setCreatedDateUtc );
        setCreatedDateUtc(refVal_setCreatedDateUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("modified_date_utc"))))
    {
        utility::datetime refVal_setModifiedDateUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("modified_date_utc"))), refVal_setModifiedDateUtc );
        setModifiedDateUtc(refVal_setModifiedDateUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("last_modified_by"))))
    {
        utility::string_t refVal_setLastModifiedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("last_modified_by"))), refVal_setLastModifiedBy );
        setLastModifiedBy(refVal_setLastModifiedBy);
    }
    return ok;
}

bool EmailConfigurationDto::isInheritFromVendor() const
{
    return m_Inherit_from_vendor;
}

void EmailConfigurationDto::setInheritFromVendor(bool value)
{
    m_Inherit_from_vendor = value;
    m_Inherit_from_vendorIsSet = true;
}

bool EmailConfigurationDto::inheritFromVendorIsSet() const
{
    return m_Inherit_from_vendorIsSet;
}

void EmailConfigurationDto::unsetInherit_from_vendor()
{
    m_Inherit_from_vendorIsSet = false;
}
bool EmailConfigurationDto::isUseAzureCommunicationService() const
{
    return m_Use_azure_communication_service;
}

void EmailConfigurationDto::setUseAzureCommunicationService(bool value)
{
    m_Use_azure_communication_service = value;
    m_Use_azure_communication_serviceIsSet = true;
}

bool EmailConfigurationDto::useAzureCommunicationServiceIsSet() const
{
    return m_Use_azure_communication_serviceIsSet;
}

void EmailConfigurationDto::unsetUse_azure_communication_service()
{
    m_Use_azure_communication_serviceIsSet = false;
}
utility::string_t EmailConfigurationDto::getFromEmail() const
{
    return m_From_email;
}

void EmailConfigurationDto::setFromEmail(const utility::string_t& value)
{
    m_From_email = value;
    m_From_emailIsSet = true;
}

bool EmailConfigurationDto::fromEmailIsSet() const
{
    return m_From_emailIsSet;
}

void EmailConfigurationDto::unsetFrom_email()
{
    m_From_emailIsSet = false;
}
utility::string_t EmailConfigurationDto::getPassword() const
{
    return m_Password;
}

void EmailConfigurationDto::setPassword(const utility::string_t& value)
{
    m_Password = value;
    m_PasswordIsSet = true;
}

bool EmailConfigurationDto::passwordIsSet() const
{
    return m_PasswordIsSet;
}

void EmailConfigurationDto::unsetPassword()
{
    m_PasswordIsSet = false;
}
std::vector<utility::string_t>& EmailConfigurationDto::getToEmail()
{
    return m_To_email;
}

void EmailConfigurationDto::setToEmail(const std::vector<utility::string_t>& value)
{
    m_To_email = value;
    m_To_emailIsSet = true;
}

bool EmailConfigurationDto::toEmailIsSet() const
{
    return m_To_emailIsSet;
}

void EmailConfigurationDto::unsetTo_email()
{
    m_To_emailIsSet = false;
}
utility::string_t EmailConfigurationDto::getSmtpClient() const
{
    return m_Smtp_client;
}

void EmailConfigurationDto::setSmtpClient(const utility::string_t& value)
{
    m_Smtp_client = value;
    m_Smtp_clientIsSet = true;
}

bool EmailConfigurationDto::smtpClientIsSet() const
{
    return m_Smtp_clientIsSet;
}

void EmailConfigurationDto::unsetSmtp_client()
{
    m_Smtp_clientIsSet = false;
}
int32_t EmailConfigurationDto::getSmtpPort() const
{
    return m_Smtp_port;
}

void EmailConfigurationDto::setSmtpPort(int32_t value)
{
    m_Smtp_port = value;
    m_Smtp_portIsSet = true;
}

bool EmailConfigurationDto::smtpPortIsSet() const
{
    return m_Smtp_portIsSet;
}

void EmailConfigurationDto::unsetSmtp_port()
{
    m_Smtp_portIsSet = false;
}
utility::string_t EmailConfigurationDto::getAcsSenderDomain() const
{
    return m_Acs_sender_domain;
}

void EmailConfigurationDto::setAcsSenderDomain(const utility::string_t& value)
{
    m_Acs_sender_domain = value;
    m_Acs_sender_domainIsSet = true;
}

bool EmailConfigurationDto::acsSenderDomainIsSet() const
{
    return m_Acs_sender_domainIsSet;
}

void EmailConfigurationDto::unsetAcs_sender_domain()
{
    m_Acs_sender_domainIsSet = false;
}
utility::string_t EmailConfigurationDto::getAcsSenderUsername() const
{
    return m_Acs_sender_username;
}

void EmailConfigurationDto::setAcsSenderUsername(const utility::string_t& value)
{
    m_Acs_sender_username = value;
    m_Acs_sender_usernameIsSet = true;
}

bool EmailConfigurationDto::acsSenderUsernameIsSet() const
{
    return m_Acs_sender_usernameIsSet;
}

void EmailConfigurationDto::unsetAcs_sender_username()
{
    m_Acs_sender_usernameIsSet = false;
}
utility::datetime EmailConfigurationDto::getCreatedDateUtc() const
{
    return m_Created_date_utc;
}

void EmailConfigurationDto::setCreatedDateUtc(const utility::datetime& value)
{
    m_Created_date_utc = value;
    m_Created_date_utcIsSet = true;
}

bool EmailConfigurationDto::createdDateUtcIsSet() const
{
    return m_Created_date_utcIsSet;
}

void EmailConfigurationDto::unsetCreated_date_utc()
{
    m_Created_date_utcIsSet = false;
}
utility::datetime EmailConfigurationDto::getModifiedDateUtc() const
{
    return m_Modified_date_utc;
}

void EmailConfigurationDto::setModifiedDateUtc(const utility::datetime& value)
{
    m_Modified_date_utc = value;
    m_Modified_date_utcIsSet = true;
}

bool EmailConfigurationDto::modifiedDateUtcIsSet() const
{
    return m_Modified_date_utcIsSet;
}

void EmailConfigurationDto::unsetModified_date_utc()
{
    m_Modified_date_utcIsSet = false;
}
utility::string_t EmailConfigurationDto::getLastModifiedBy() const
{
    return m_Last_modified_by;
}

void EmailConfigurationDto::setLastModifiedBy(const utility::string_t& value)
{
    m_Last_modified_by = value;
    m_Last_modified_byIsSet = true;
}

bool EmailConfigurationDto::lastModifiedByIsSet() const
{
    return m_Last_modified_byIsSet;
}

void EmailConfigurationDto::unsetLast_modified_by()
{
    m_Last_modified_byIsSet = false;
}
}
}
}
}


