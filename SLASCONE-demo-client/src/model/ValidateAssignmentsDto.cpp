/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/ValidateAssignmentsDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ValidateAssignmentsDto::ValidateAssignmentsDto()
{
    m_Days = 0;
    m_DaysIsSet = false;
    m_CustomerTypeId = utility::conversions::to_string_t("");
    m_CustomerTypeIdIsSet = false;
    m_LicenseTypeId = utility::conversions::to_string_t("");
    m_LicenseTypeIdIsSet = false;
}

ValidateAssignmentsDto::~ValidateAssignmentsDto()
{
}

void ValidateAssignmentsDto::validate()
{
    // TODO: implement validation
}

web::json::value ValidateAssignmentsDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DaysIsSet)
    {
        val[utility::conversions::to_string_t(U("days"))] = ModelBase::toJson(m_Days);
    }
    if(m_CustomerTypeIdIsSet)
    {
        val[utility::conversions::to_string_t(U("customerTypeId"))] = ModelBase::toJson(m_CustomerTypeId);
    }
    if(m_LicenseTypeIdIsSet)
    {
        val[utility::conversions::to_string_t(U("licenseTypeId"))] = ModelBase::toJson(m_LicenseTypeId);
    }

    return val;
}

bool ValidateAssignmentsDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("days"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("days")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDays;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDays);
            setDays(refVal_setDays);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("customerTypeId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("customerTypeId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCustomerTypeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomerTypeId);
            setCustomerTypeId(refVal_setCustomerTypeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("licenseTypeId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("licenseTypeId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLicenseTypeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenseTypeId);
            setLicenseTypeId(refVal_setLicenseTypeId);
        }
    }
    return ok;
}

void ValidateAssignmentsDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_DaysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("days")), m_Days));
    }
    if(m_CustomerTypeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("customerTypeId")), m_CustomerTypeId));
    }
    if(m_LicenseTypeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("licenseTypeId")), m_LicenseTypeId));
    }
}

bool ValidateAssignmentsDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("days"))))
    {
        int32_t refVal_setDays;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("days"))), refVal_setDays );
        setDays(refVal_setDays);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("customerTypeId"))))
    {
        utility::string_t refVal_setCustomerTypeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("customerTypeId"))), refVal_setCustomerTypeId );
        setCustomerTypeId(refVal_setCustomerTypeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("licenseTypeId"))))
    {
        utility::string_t refVal_setLicenseTypeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("licenseTypeId"))), refVal_setLicenseTypeId );
        setLicenseTypeId(refVal_setLicenseTypeId);
    }
    return ok;
}

int32_t ValidateAssignmentsDto::getDays() const
{
    return m_Days;
}

void ValidateAssignmentsDto::setDays(int32_t value)
{
    m_Days = value;
    m_DaysIsSet = true;
}

bool ValidateAssignmentsDto::daysIsSet() const
{
    return m_DaysIsSet;
}

void ValidateAssignmentsDto::unsetDays()
{
    m_DaysIsSet = false;
}
utility::string_t ValidateAssignmentsDto::getCustomerTypeId() const
{
    return m_CustomerTypeId;
}

void ValidateAssignmentsDto::setCustomerTypeId(const utility::string_t& value)
{
    m_CustomerTypeId = value;
    m_CustomerTypeIdIsSet = true;
}

bool ValidateAssignmentsDto::customerTypeIdIsSet() const
{
    return m_CustomerTypeIdIsSet;
}

void ValidateAssignmentsDto::unsetCustomerTypeId()
{
    m_CustomerTypeIdIsSet = false;
}
utility::string_t ValidateAssignmentsDto::getLicenseTypeId() const
{
    return m_LicenseTypeId;
}

void ValidateAssignmentsDto::setLicenseTypeId(const utility::string_t& value)
{
    m_LicenseTypeId = value;
    m_LicenseTypeIdIsSet = true;
}

bool ValidateAssignmentsDto::licenseTypeIdIsSet() const
{
    return m_LicenseTypeIdIsSet;
}

void ValidateAssignmentsDto::unsetLicenseTypeId()
{
    m_LicenseTypeIdIsSet = false;
}
}
}
}
}


