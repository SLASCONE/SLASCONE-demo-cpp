/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/TagAssignmentDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



TagAssignmentDto::TagAssignmentDto()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Tag_id = 0;
    m_Tag_idIsSet = false;
    m_Customer_id = utility::conversions::to_string_t("");
    m_Customer_idIsSet = false;
    m_License_id = utility::conversions::to_string_t("");
    m_License_idIsSet = false;
    m_Assignment_id = utility::conversions::to_string_t("");
    m_Assignment_idIsSet = false;
}

TagAssignmentDto::~TagAssignmentDto()
{
}

void TagAssignmentDto::validate()
{
    // TODO: implement validation
}

web::json::value TagAssignmentDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_Tag_idIsSet)
    {
        val[utility::conversions::to_string_t(U("tag_id"))] = ModelBase::toJson(m_Tag_id);
    }
    if(m_Customer_idIsSet)
    {
        val[utility::conversions::to_string_t(U("customer_id"))] = ModelBase::toJson(m_Customer_id);
    }
    if(m_License_idIsSet)
    {
        val[utility::conversions::to_string_t(U("license_id"))] = ModelBase::toJson(m_License_id);
    }
    if(m_Assignment_idIsSet)
    {
        val[utility::conversions::to_string_t(U("assignment_id"))] = ModelBase::toJson(m_Assignment_id);
    }

    return val;
}

bool TagAssignmentDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tag_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tag_id")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTagId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTagId);
            setTagId(refVal_setTagId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("customer_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("customer_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCustomerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomerId);
            setCustomerId(refVal_setCustomerId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("license_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("license_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLicenseId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenseId);
            setLicenseId(refVal_setLicenseId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("assignment_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("assignment_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssignmentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssignmentId);
            setAssignmentId(refVal_setAssignmentId);
        }
    }
    return ok;
}

void TagAssignmentDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_Tag_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tag_id")), m_Tag_id));
    }
    if(m_Customer_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("customer_id")), m_Customer_id));
    }
    if(m_License_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("license_id")), m_License_id));
    }
    if(m_Assignment_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("assignment_id")), m_Assignment_id));
    }
}

bool TagAssignmentDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        int32_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tag_id"))))
    {
        int32_t refVal_setTagId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tag_id"))), refVal_setTagId );
        setTagId(refVal_setTagId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("customer_id"))))
    {
        utility::string_t refVal_setCustomerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("customer_id"))), refVal_setCustomerId );
        setCustomerId(refVal_setCustomerId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("license_id"))))
    {
        utility::string_t refVal_setLicenseId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("license_id"))), refVal_setLicenseId );
        setLicenseId(refVal_setLicenseId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("assignment_id"))))
    {
        utility::string_t refVal_setAssignmentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("assignment_id"))), refVal_setAssignmentId );
        setAssignmentId(refVal_setAssignmentId);
    }
    return ok;
}

int32_t TagAssignmentDto::getId() const
{
    return m_Id;
}

void TagAssignmentDto::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool TagAssignmentDto::idIsSet() const
{
    return m_IdIsSet;
}

void TagAssignmentDto::unsetId()
{
    m_IdIsSet = false;
}
int32_t TagAssignmentDto::getTagId() const
{
    return m_Tag_id;
}

void TagAssignmentDto::setTagId(int32_t value)
{
    m_Tag_id = value;
    m_Tag_idIsSet = true;
}

bool TagAssignmentDto::tagIdIsSet() const
{
    return m_Tag_idIsSet;
}

void TagAssignmentDto::unsetTag_id()
{
    m_Tag_idIsSet = false;
}
utility::string_t TagAssignmentDto::getCustomerId() const
{
    return m_Customer_id;
}

void TagAssignmentDto::setCustomerId(const utility::string_t& value)
{
    m_Customer_id = value;
    m_Customer_idIsSet = true;
}

bool TagAssignmentDto::customerIdIsSet() const
{
    return m_Customer_idIsSet;
}

void TagAssignmentDto::unsetCustomer_id()
{
    m_Customer_idIsSet = false;
}
utility::string_t TagAssignmentDto::getLicenseId() const
{
    return m_License_id;
}

void TagAssignmentDto::setLicenseId(const utility::string_t& value)
{
    m_License_id = value;
    m_License_idIsSet = true;
}

bool TagAssignmentDto::licenseIdIsSet() const
{
    return m_License_idIsSet;
}

void TagAssignmentDto::unsetLicense_id()
{
    m_License_idIsSet = false;
}
utility::string_t TagAssignmentDto::getAssignmentId() const
{
    return m_Assignment_id;
}

void TagAssignmentDto::setAssignmentId(const utility::string_t& value)
{
    m_Assignment_id = value;
    m_Assignment_idIsSet = true;
}

bool TagAssignmentDto::assignmentIdIsSet() const
{
    return m_Assignment_idIsSet;
}

void TagAssignmentDto::unsetAssignment_id()
{
    m_Assignment_idIsSet = false;
}
}
}
}
}


