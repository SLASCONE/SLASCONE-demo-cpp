/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/BackupStorageDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



BackupStorageDto::BackupStorageDto()
{
    m_Use_storage_account = false;
    m_Use_storage_accountIsSet = false;
    m_Account = utility::conversions::to_string_t("");
    m_AccountIsSet = false;
    m_Key = utility::conversions::to_string_t("");
    m_KeyIsSet = false;
    m_Container_name = utility::conversions::to_string_t("");
    m_Container_nameIsSet = false;
}

BackupStorageDto::~BackupStorageDto()
{
}

void BackupStorageDto::validate()
{
    // TODO: implement validation
}

web::json::value BackupStorageDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Use_storage_accountIsSet)
    {
        val[utility::conversions::to_string_t(U("use_storage_account"))] = ModelBase::toJson(m_Use_storage_account);
    }
    if(m_AccountIsSet)
    {
        val[utility::conversions::to_string_t(U("account"))] = ModelBase::toJson(m_Account);
    }
    if(m_KeyIsSet)
    {
        val[utility::conversions::to_string_t(U("key"))] = ModelBase::toJson(m_Key);
    }
    if(m_Container_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("container_name"))] = ModelBase::toJson(m_Container_name);
    }

    return val;
}

bool BackupStorageDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("use_storage_account"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("use_storage_account")));
        if(!fieldValue.is_null())
        {
            bool refVal_setUseStorageAccount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUseStorageAccount);
            setUseStorageAccount(refVal_setUseStorageAccount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("account"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("account")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAccount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccount);
            setAccount(refVal_setAccount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("key"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("key")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setKey);
            setKey(refVal_setKey);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("container_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("container_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setContainerName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContainerName);
            setContainerName(refVal_setContainerName);
        }
    }
    return ok;
}

void BackupStorageDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Use_storage_accountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("use_storage_account")), m_Use_storage_account));
    }
    if(m_AccountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("account")), m_Account));
    }
    if(m_KeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("key")), m_Key));
    }
    if(m_Container_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("container_name")), m_Container_name));
    }
}

bool BackupStorageDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("use_storage_account"))))
    {
        bool refVal_setUseStorageAccount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("use_storage_account"))), refVal_setUseStorageAccount );
        setUseStorageAccount(refVal_setUseStorageAccount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("account"))))
    {
        utility::string_t refVal_setAccount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("account"))), refVal_setAccount );
        setAccount(refVal_setAccount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("key"))))
    {
        utility::string_t refVal_setKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("key"))), refVal_setKey );
        setKey(refVal_setKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("container_name"))))
    {
        utility::string_t refVal_setContainerName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("container_name"))), refVal_setContainerName );
        setContainerName(refVal_setContainerName);
    }
    return ok;
}

bool BackupStorageDto::isUseStorageAccount() const
{
    return m_Use_storage_account;
}

void BackupStorageDto::setUseStorageAccount(bool value)
{
    m_Use_storage_account = value;
    m_Use_storage_accountIsSet = true;
}

bool BackupStorageDto::useStorageAccountIsSet() const
{
    return m_Use_storage_accountIsSet;
}

void BackupStorageDto::unsetUse_storage_account()
{
    m_Use_storage_accountIsSet = false;
}
utility::string_t BackupStorageDto::getAccount() const
{
    return m_Account;
}

void BackupStorageDto::setAccount(const utility::string_t& value)
{
    m_Account = value;
    m_AccountIsSet = true;
}

bool BackupStorageDto::accountIsSet() const
{
    return m_AccountIsSet;
}

void BackupStorageDto::unsetAccount()
{
    m_AccountIsSet = false;
}
utility::string_t BackupStorageDto::getKey() const
{
    return m_Key;
}

void BackupStorageDto::setKey(const utility::string_t& value)
{
    m_Key = value;
    m_KeyIsSet = true;
}

bool BackupStorageDto::keyIsSet() const
{
    return m_KeyIsSet;
}

void BackupStorageDto::unsetKey()
{
    m_KeyIsSet = false;
}
utility::string_t BackupStorageDto::getContainerName() const
{
    return m_Container_name;
}

void BackupStorageDto::setContainerName(const utility::string_t& value)
{
    m_Container_name = value;
    m_Container_nameIsSet = true;
}

bool BackupStorageDto::containerNameIsSet() const
{
    return m_Container_nameIsSet;
}

void BackupStorageDto::unsetContainer_name()
{
    m_Container_nameIsSet = false;
}
}
}
}
}


