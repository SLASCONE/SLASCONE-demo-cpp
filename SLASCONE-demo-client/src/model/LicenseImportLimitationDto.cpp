/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/LicenseImportLimitationDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



LicenseImportLimitationDto::LicenseImportLimitationDto()
{
    m_Limitation = utility::conversions::to_string_t("");
    m_LimitationIsSet = false;
    m_Limit = 0;
    m_LimitIsSet = false;
    m_Consumption_reset_modeIsSet = false;
    m_Consumption_reset_period_days = 0;
    m_Consumption_reset_period_daysIsSet = false;
}

LicenseImportLimitationDto::~LicenseImportLimitationDto()
{
}

void LicenseImportLimitationDto::validate()
{
    // TODO: implement validation
}

web::json::value LicenseImportLimitationDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_LimitationIsSet)
    {
        val[utility::conversions::to_string_t(U("limitation"))] = ModelBase::toJson(m_Limitation);
    }
    if(m_LimitIsSet)
    {
        val[utility::conversions::to_string_t(U("limit"))] = ModelBase::toJson(m_Limit);
    }
    if(m_Consumption_reset_modeIsSet)
    {
        val[utility::conversions::to_string_t(U("consumption_reset_mode"))] = ModelBase::toJson(m_Consumption_reset_mode);
    }
    if(m_Consumption_reset_period_daysIsSet)
    {
        val[utility::conversions::to_string_t(U("consumption_reset_period_days"))] = ModelBase::toJson(m_Consumption_reset_period_days);
    }

    return val;
}

bool LicenseImportLimitationDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("limitation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("limitation")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLimitation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLimitation);
            setLimitation(refVal_setLimitation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("limit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("limit")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLimit);
            setLimit(refVal_setLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("consumption_reset_mode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("consumption_reset_mode")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ConsumptionResetPeriod> refVal_setConsumptionResetMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConsumptionResetMode);
            setConsumptionResetMode(refVal_setConsumptionResetMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("consumption_reset_period_days"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("consumption_reset_period_days")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setConsumptionResetPeriodDays;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConsumptionResetPeriodDays);
            setConsumptionResetPeriodDays(refVal_setConsumptionResetPeriodDays);
        }
    }
    return ok;
}

void LicenseImportLimitationDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_LimitationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("limitation")), m_Limitation));
    }
    if(m_LimitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("limit")), m_Limit));
    }
    if(m_Consumption_reset_modeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("consumption_reset_mode")), m_Consumption_reset_mode));
    }
    if(m_Consumption_reset_period_daysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("consumption_reset_period_days")), m_Consumption_reset_period_days));
    }
}

bool LicenseImportLimitationDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("limitation"))))
    {
        utility::string_t refVal_setLimitation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("limitation"))), refVal_setLimitation );
        setLimitation(refVal_setLimitation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("limit"))))
    {
        int32_t refVal_setLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("limit"))), refVal_setLimit );
        setLimit(refVal_setLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("consumption_reset_mode"))))
    {
        std::shared_ptr<ConsumptionResetPeriod> refVal_setConsumptionResetMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("consumption_reset_mode"))), refVal_setConsumptionResetMode );
        setConsumptionResetMode(refVal_setConsumptionResetMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("consumption_reset_period_days"))))
    {
        int32_t refVal_setConsumptionResetPeriodDays;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("consumption_reset_period_days"))), refVal_setConsumptionResetPeriodDays );
        setConsumptionResetPeriodDays(refVal_setConsumptionResetPeriodDays);
    }
    return ok;
}

utility::string_t LicenseImportLimitationDto::getLimitation() const
{
    return m_Limitation;
}

void LicenseImportLimitationDto::setLimitation(const utility::string_t& value)
{
    m_Limitation = value;
    m_LimitationIsSet = true;
}

bool LicenseImportLimitationDto::limitationIsSet() const
{
    return m_LimitationIsSet;
}

void LicenseImportLimitationDto::unsetLimitation()
{
    m_LimitationIsSet = false;
}
int32_t LicenseImportLimitationDto::getLimit() const
{
    return m_Limit;
}

void LicenseImportLimitationDto::setLimit(int32_t value)
{
    m_Limit = value;
    m_LimitIsSet = true;
}

bool LicenseImportLimitationDto::limitIsSet() const
{
    return m_LimitIsSet;
}

void LicenseImportLimitationDto::unsetLimit()
{
    m_LimitIsSet = false;
}
std::shared_ptr<ConsumptionResetPeriod> LicenseImportLimitationDto::getConsumptionResetMode() const
{
    return m_Consumption_reset_mode;
}

void LicenseImportLimitationDto::setConsumptionResetMode(const std::shared_ptr<ConsumptionResetPeriod>& value)
{
    m_Consumption_reset_mode = value;
    m_Consumption_reset_modeIsSet = true;
}

bool LicenseImportLimitationDto::consumptionResetModeIsSet() const
{
    return m_Consumption_reset_modeIsSet;
}

void LicenseImportLimitationDto::unsetConsumption_reset_mode()
{
    m_Consumption_reset_modeIsSet = false;
}
int32_t LicenseImportLimitationDto::getConsumptionResetPeriodDays() const
{
    return m_Consumption_reset_period_days;
}

void LicenseImportLimitationDto::setConsumptionResetPeriodDays(int32_t value)
{
    m_Consumption_reset_period_days = value;
    m_Consumption_reset_period_daysIsSet = true;
}

bool LicenseImportLimitationDto::consumptionResetPeriodDaysIsSet() const
{
    return m_Consumption_reset_period_daysIsSet;
}

void LicenseImportLimitationDto::unsetConsumption_reset_period_days()
{
    m_Consumption_reset_period_daysIsSet = false;
}
}
}
}
}


