/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/LicenseImportVariableDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



LicenseImportVariableDto::LicenseImportVariableDto()
{
    m_Variable = utility::conversions::to_string_t("");
    m_VariableIsSet = false;
    m_Value = utility::conversions::to_string_t("");
    m_ValueIsSet = false;
}

LicenseImportVariableDto::~LicenseImportVariableDto()
{
}

void LicenseImportVariableDto::validate()
{
    // TODO: implement validation
}

web::json::value LicenseImportVariableDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_VariableIsSet)
    {
        val[utility::conversions::to_string_t(U("variable"))] = ModelBase::toJson(m_Variable);
    }
    if(m_ValueIsSet)
    {
        val[utility::conversions::to_string_t(U("value"))] = ModelBase::toJson(m_Value);
    }

    return val;
}

bool LicenseImportVariableDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("variable"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("variable")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVariable;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVariable);
            setVariable(refVal_setVariable);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("value"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("value")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValue);
            setValue(refVal_setValue);
        }
    }
    return ok;
}

void LicenseImportVariableDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_VariableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("variable")), m_Variable));
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("value")), m_Value));
    }
}

bool LicenseImportVariableDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("variable"))))
    {
        utility::string_t refVal_setVariable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("variable"))), refVal_setVariable );
        setVariable(refVal_setVariable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("value"))))
    {
        utility::string_t refVal_setValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("value"))), refVal_setValue );
        setValue(refVal_setValue);
    }
    return ok;
}

utility::string_t LicenseImportVariableDto::getVariable() const
{
    return m_Variable;
}

void LicenseImportVariableDto::setVariable(const utility::string_t& value)
{
    m_Variable = value;
    m_VariableIsSet = true;
}

bool LicenseImportVariableDto::variableIsSet() const
{
    return m_VariableIsSet;
}

void LicenseImportVariableDto::unsetVariable()
{
    m_VariableIsSet = false;
}
utility::string_t LicenseImportVariableDto::getValue() const
{
    return m_Value;
}

void LicenseImportVariableDto::setValue(const utility::string_t& value)
{
    m_Value = value;
    m_ValueIsSet = true;
}

bool LicenseImportVariableDto::valueIsSet() const
{
    return m_ValueIsSet;
}

void LicenseImportVariableDto::unsetValue()
{
    m_ValueIsSet = false;
}
}
}
}
}


