/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/LicenseUserDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



LicenseUserDto::LicenseUserDto()
{
    m_User_id = utility::conversions::to_string_t("");
    m_User_idIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_License_id = utility::conversions::to_string_t("");
    m_License_idIsSet = false;
    m_Is_active = false;
    m_Is_activeIsSet = false;
    m_Created_date_utc = utility::datetime();
    m_Created_date_utcIsSet = false;
    m_Modified_date_utc = utility::datetime();
    m_Modified_date_utcIsSet = false;
    m_Last_modified_by = utility::conversions::to_string_t("");
    m_Last_modified_byIsSet = false;
    m_Active_sessionsIsSet = false;
    m_License_user_group_id = utility::conversions::to_string_t("");
    m_License_user_group_idIsSet = false;
}

LicenseUserDto::~LicenseUserDto()
{
}

void LicenseUserDto::validate()
{
    // TODO: implement validation
}

web::json::value LicenseUserDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_User_idIsSet)
    {
        val[utility::conversions::to_string_t(U("user_id"))] = ModelBase::toJson(m_User_id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_License_idIsSet)
    {
        val[utility::conversions::to_string_t(U("license_id"))] = ModelBase::toJson(m_License_id);
    }
    if(m_Is_activeIsSet)
    {
        val[utility::conversions::to_string_t(U("is_active"))] = ModelBase::toJson(m_Is_active);
    }
    if(m_Created_date_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("created_date_utc"))] = ModelBase::toJson(m_Created_date_utc);
    }
    if(m_Modified_date_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("modified_date_utc"))] = ModelBase::toJson(m_Modified_date_utc);
    }
    if(m_Last_modified_byIsSet)
    {
        val[utility::conversions::to_string_t(U("last_modified_by"))] = ModelBase::toJson(m_Last_modified_by);
    }
    if(m_Active_sessionsIsSet)
    {
        val[utility::conversions::to_string_t(U("active_sessions"))] = ModelBase::toJson(m_Active_sessions);
    }
    if(m_License_user_group_idIsSet)
    {
        val[utility::conversions::to_string_t(U("license_user_group_id"))] = ModelBase::toJson(m_License_user_group_id);
    }

    return val;
}

bool LicenseUserDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("user_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("user_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserId);
            setUserId(refVal_setUserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("license_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("license_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLicenseId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenseId);
            setLicenseId(refVal_setLicenseId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_active"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_active")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsActive;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsActive);
            setIsActive(refVal_setIsActive);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_date_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_date_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedDateUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedDateUtc);
            setCreatedDateUtc(refVal_setCreatedDateUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("modified_date_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("modified_date_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setModifiedDateUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModifiedDateUtc);
            setModifiedDateUtc(refVal_setModifiedDateUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("last_modified_by"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("last_modified_by")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLastModifiedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastModifiedBy);
            setLastModifiedBy(refVal_setLastModifiedBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("active_sessions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("active_sessions")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<SessionDto>> refVal_setActiveSessions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setActiveSessions);
            setActiveSessions(refVal_setActiveSessions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("license_user_group_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("license_user_group_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLicenseUserGroupId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenseUserGroupId);
            setLicenseUserGroupId(refVal_setLicenseUserGroupId);
        }
    }
    return ok;
}

void LicenseUserDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_User_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("user_id")), m_User_id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_License_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("license_id")), m_License_id));
    }
    if(m_Is_activeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_active")), m_Is_active));
    }
    if(m_Created_date_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_date_utc")), m_Created_date_utc));
    }
    if(m_Modified_date_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("modified_date_utc")), m_Modified_date_utc));
    }
    if(m_Last_modified_byIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("last_modified_by")), m_Last_modified_by));
    }
    if(m_Active_sessionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("active_sessions")), m_Active_sessions));
    }
    if(m_License_user_group_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("license_user_group_id")), m_License_user_group_id));
    }
}

bool LicenseUserDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("user_id"))))
    {
        utility::string_t refVal_setUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("user_id"))), refVal_setUserId );
        setUserId(refVal_setUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("license_id"))))
    {
        utility::string_t refVal_setLicenseId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("license_id"))), refVal_setLicenseId );
        setLicenseId(refVal_setLicenseId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_active"))))
    {
        bool refVal_setIsActive;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_active"))), refVal_setIsActive );
        setIsActive(refVal_setIsActive);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_date_utc"))))
    {
        utility::datetime refVal_setCreatedDateUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_date_utc"))), refVal_setCreatedDateUtc );
        setCreatedDateUtc(refVal_setCreatedDateUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("modified_date_utc"))))
    {
        utility::datetime refVal_setModifiedDateUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("modified_date_utc"))), refVal_setModifiedDateUtc );
        setModifiedDateUtc(refVal_setModifiedDateUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("last_modified_by"))))
    {
        utility::string_t refVal_setLastModifiedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("last_modified_by"))), refVal_setLastModifiedBy );
        setLastModifiedBy(refVal_setLastModifiedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("active_sessions"))))
    {
        std::vector<std::shared_ptr<SessionDto>> refVal_setActiveSessions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("active_sessions"))), refVal_setActiveSessions );
        setActiveSessions(refVal_setActiveSessions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("license_user_group_id"))))
    {
        utility::string_t refVal_setLicenseUserGroupId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("license_user_group_id"))), refVal_setLicenseUserGroupId );
        setLicenseUserGroupId(refVal_setLicenseUserGroupId);
    }
    return ok;
}

utility::string_t LicenseUserDto::getUserId() const
{
    return m_User_id;
}

void LicenseUserDto::setUserId(const utility::string_t& value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}

bool LicenseUserDto::userIdIsSet() const
{
    return m_User_idIsSet;
}

void LicenseUserDto::unsetUser_id()
{
    m_User_idIsSet = false;
}
utility::string_t LicenseUserDto::getName() const
{
    return m_Name;
}

void LicenseUserDto::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool LicenseUserDto::nameIsSet() const
{
    return m_NameIsSet;
}

void LicenseUserDto::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t LicenseUserDto::getLicenseId() const
{
    return m_License_id;
}

void LicenseUserDto::setLicenseId(const utility::string_t& value)
{
    m_License_id = value;
    m_License_idIsSet = true;
}

bool LicenseUserDto::licenseIdIsSet() const
{
    return m_License_idIsSet;
}

void LicenseUserDto::unsetLicense_id()
{
    m_License_idIsSet = false;
}
bool LicenseUserDto::isIsActive() const
{
    return m_Is_active;
}

void LicenseUserDto::setIsActive(bool value)
{
    m_Is_active = value;
    m_Is_activeIsSet = true;
}

bool LicenseUserDto::isActiveIsSet() const
{
    return m_Is_activeIsSet;
}

void LicenseUserDto::unsetIs_active()
{
    m_Is_activeIsSet = false;
}
utility::datetime LicenseUserDto::getCreatedDateUtc() const
{
    return m_Created_date_utc;
}

void LicenseUserDto::setCreatedDateUtc(const utility::datetime& value)
{
    m_Created_date_utc = value;
    m_Created_date_utcIsSet = true;
}

bool LicenseUserDto::createdDateUtcIsSet() const
{
    return m_Created_date_utcIsSet;
}

void LicenseUserDto::unsetCreated_date_utc()
{
    m_Created_date_utcIsSet = false;
}
utility::datetime LicenseUserDto::getModifiedDateUtc() const
{
    return m_Modified_date_utc;
}

void LicenseUserDto::setModifiedDateUtc(const utility::datetime& value)
{
    m_Modified_date_utc = value;
    m_Modified_date_utcIsSet = true;
}

bool LicenseUserDto::modifiedDateUtcIsSet() const
{
    return m_Modified_date_utcIsSet;
}

void LicenseUserDto::unsetModified_date_utc()
{
    m_Modified_date_utcIsSet = false;
}
utility::string_t LicenseUserDto::getLastModifiedBy() const
{
    return m_Last_modified_by;
}

void LicenseUserDto::setLastModifiedBy(const utility::string_t& value)
{
    m_Last_modified_by = value;
    m_Last_modified_byIsSet = true;
}

bool LicenseUserDto::lastModifiedByIsSet() const
{
    return m_Last_modified_byIsSet;
}

void LicenseUserDto::unsetLast_modified_by()
{
    m_Last_modified_byIsSet = false;
}
std::vector<std::shared_ptr<SessionDto>>& LicenseUserDto::getActiveSessions()
{
    return m_Active_sessions;
}

void LicenseUserDto::setActiveSessions(const std::vector<std::shared_ptr<SessionDto>>& value)
{
    m_Active_sessions = value;
    m_Active_sessionsIsSet = true;
}

bool LicenseUserDto::activeSessionsIsSet() const
{
    return m_Active_sessionsIsSet;
}

void LicenseUserDto::unsetActive_sessions()
{
    m_Active_sessionsIsSet = false;
}
utility::string_t LicenseUserDto::getLicenseUserGroupId() const
{
    return m_License_user_group_id;
}

void LicenseUserDto::setLicenseUserGroupId(const utility::string_t& value)
{
    m_License_user_group_id = value;
    m_License_user_group_idIsSet = true;
}

bool LicenseUserDto::licenseUserGroupIdIsSet() const
{
    return m_License_user_group_idIsSet;
}

void LicenseUserDto::unsetLicense_user_group_id()
{
    m_License_user_group_idIsSet = false;
}
}
}
}
}


