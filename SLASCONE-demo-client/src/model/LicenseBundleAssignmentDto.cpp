/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/LicenseBundleAssignmentDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



LicenseBundleAssignmentDto::LicenseBundleAssignmentDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Bundle_id = utility::conversions::to_string_t("");
    m_Bundle_idIsSet = false;
    m_License_id = utility::conversions::to_string_t("");
    m_License_idIsSet = false;
    m_License_name = utility::conversions::to_string_t("");
    m_License_nameIsSet = false;
    m_License_description = utility::conversions::to_string_t("");
    m_License_descriptionIsSet = false;
    m_License_template_name = utility::conversions::to_string_t("");
    m_License_template_nameIsSet = false;
    m_Product_id = utility::conversions::to_string_t("");
    m_Product_idIsSet = false;
    m_Product_name = utility::conversions::to_string_t("");
    m_Product_nameIsSet = false;
    m_Product_logoIsSet = false;
    m_Created_date_utc = utility::datetime();
    m_Created_date_utcIsSet = false;
    m_Modified_date_utc = utility::datetime();
    m_Modified_date_utcIsSet = false;
    m_Last_modified_by = utility::conversions::to_string_t("");
    m_Last_modified_byIsSet = false;
}

LicenseBundleAssignmentDto::~LicenseBundleAssignmentDto()
{
}

void LicenseBundleAssignmentDto::validate()
{
    // TODO: implement validation
}

web::json::value LicenseBundleAssignmentDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_Bundle_idIsSet)
    {
        val[utility::conversions::to_string_t(U("bundle_id"))] = ModelBase::toJson(m_Bundle_id);
    }
    if(m_License_idIsSet)
    {
        val[utility::conversions::to_string_t(U("license_id"))] = ModelBase::toJson(m_License_id);
    }
    if(m_License_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("license_name"))] = ModelBase::toJson(m_License_name);
    }
    if(m_License_descriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("license_description"))] = ModelBase::toJson(m_License_description);
    }
    if(m_License_template_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("license_template_name"))] = ModelBase::toJson(m_License_template_name);
    }
    if(m_Product_idIsSet)
    {
        val[utility::conversions::to_string_t(U("product_id"))] = ModelBase::toJson(m_Product_id);
    }
    if(m_Product_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("product_name"))] = ModelBase::toJson(m_Product_name);
    }
    if(m_Product_logoIsSet)
    {
        val[utility::conversions::to_string_t(U("product_logo"))] = ModelBase::toJson(m_Product_logo);
    }
    if(m_Created_date_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("created_date_utc"))] = ModelBase::toJson(m_Created_date_utc);
    }
    if(m_Modified_date_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("modified_date_utc"))] = ModelBase::toJson(m_Modified_date_utc);
    }
    if(m_Last_modified_byIsSet)
    {
        val[utility::conversions::to_string_t(U("last_modified_by"))] = ModelBase::toJson(m_Last_modified_by);
    }

    return val;
}

bool LicenseBundleAssignmentDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bundle_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bundle_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBundleId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBundleId);
            setBundleId(refVal_setBundleId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("license_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("license_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLicenseId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenseId);
            setLicenseId(refVal_setLicenseId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("license_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("license_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLicenseName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenseName);
            setLicenseName(refVal_setLicenseName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("license_description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("license_description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLicenseDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenseDescription);
            setLicenseDescription(refVal_setLicenseDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("license_template_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("license_template_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLicenseTemplateName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenseTemplateName);
            setLicenseTemplateName(refVal_setLicenseTemplateName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("product_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("product_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProductId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProductId);
            setProductId(refVal_setProductId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("product_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("product_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProductName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProductName);
            setProductName(refVal_setProductName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("product_logo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("product_logo")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ResourceDto> refVal_setProductLogo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProductLogo);
            setProductLogo(refVal_setProductLogo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_date_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_date_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedDateUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedDateUtc);
            setCreatedDateUtc(refVal_setCreatedDateUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("modified_date_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("modified_date_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setModifiedDateUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModifiedDateUtc);
            setModifiedDateUtc(refVal_setModifiedDateUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("last_modified_by"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("last_modified_by")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLastModifiedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastModifiedBy);
            setLastModifiedBy(refVal_setLastModifiedBy);
        }
    }
    return ok;
}

void LicenseBundleAssignmentDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_Bundle_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bundle_id")), m_Bundle_id));
    }
    if(m_License_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("license_id")), m_License_id));
    }
    if(m_License_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("license_name")), m_License_name));
    }
    if(m_License_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("license_description")), m_License_description));
    }
    if(m_License_template_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("license_template_name")), m_License_template_name));
    }
    if(m_Product_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("product_id")), m_Product_id));
    }
    if(m_Product_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("product_name")), m_Product_name));
    }
    if(m_Product_logoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("product_logo")), m_Product_logo));
    }
    if(m_Created_date_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_date_utc")), m_Created_date_utc));
    }
    if(m_Modified_date_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("modified_date_utc")), m_Modified_date_utc));
    }
    if(m_Last_modified_byIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("last_modified_by")), m_Last_modified_by));
    }
}

bool LicenseBundleAssignmentDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bundle_id"))))
    {
        utility::string_t refVal_setBundleId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bundle_id"))), refVal_setBundleId );
        setBundleId(refVal_setBundleId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("license_id"))))
    {
        utility::string_t refVal_setLicenseId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("license_id"))), refVal_setLicenseId );
        setLicenseId(refVal_setLicenseId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("license_name"))))
    {
        utility::string_t refVal_setLicenseName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("license_name"))), refVal_setLicenseName );
        setLicenseName(refVal_setLicenseName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("license_description"))))
    {
        utility::string_t refVal_setLicenseDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("license_description"))), refVal_setLicenseDescription );
        setLicenseDescription(refVal_setLicenseDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("license_template_name"))))
    {
        utility::string_t refVal_setLicenseTemplateName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("license_template_name"))), refVal_setLicenseTemplateName );
        setLicenseTemplateName(refVal_setLicenseTemplateName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("product_id"))))
    {
        utility::string_t refVal_setProductId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("product_id"))), refVal_setProductId );
        setProductId(refVal_setProductId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("product_name"))))
    {
        utility::string_t refVal_setProductName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("product_name"))), refVal_setProductName );
        setProductName(refVal_setProductName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("product_logo"))))
    {
        std::shared_ptr<ResourceDto> refVal_setProductLogo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("product_logo"))), refVal_setProductLogo );
        setProductLogo(refVal_setProductLogo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_date_utc"))))
    {
        utility::datetime refVal_setCreatedDateUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_date_utc"))), refVal_setCreatedDateUtc );
        setCreatedDateUtc(refVal_setCreatedDateUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("modified_date_utc"))))
    {
        utility::datetime refVal_setModifiedDateUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("modified_date_utc"))), refVal_setModifiedDateUtc );
        setModifiedDateUtc(refVal_setModifiedDateUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("last_modified_by"))))
    {
        utility::string_t refVal_setLastModifiedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("last_modified_by"))), refVal_setLastModifiedBy );
        setLastModifiedBy(refVal_setLastModifiedBy);
    }
    return ok;
}

utility::string_t LicenseBundleAssignmentDto::getId() const
{
    return m_Id;
}

void LicenseBundleAssignmentDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool LicenseBundleAssignmentDto::idIsSet() const
{
    return m_IdIsSet;
}

void LicenseBundleAssignmentDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t LicenseBundleAssignmentDto::getBundleId() const
{
    return m_Bundle_id;
}

void LicenseBundleAssignmentDto::setBundleId(const utility::string_t& value)
{
    m_Bundle_id = value;
    m_Bundle_idIsSet = true;
}

bool LicenseBundleAssignmentDto::bundleIdIsSet() const
{
    return m_Bundle_idIsSet;
}

void LicenseBundleAssignmentDto::unsetBundle_id()
{
    m_Bundle_idIsSet = false;
}
utility::string_t LicenseBundleAssignmentDto::getLicenseId() const
{
    return m_License_id;
}

void LicenseBundleAssignmentDto::setLicenseId(const utility::string_t& value)
{
    m_License_id = value;
    m_License_idIsSet = true;
}

bool LicenseBundleAssignmentDto::licenseIdIsSet() const
{
    return m_License_idIsSet;
}

void LicenseBundleAssignmentDto::unsetLicense_id()
{
    m_License_idIsSet = false;
}
utility::string_t LicenseBundleAssignmentDto::getLicenseName() const
{
    return m_License_name;
}

void LicenseBundleAssignmentDto::setLicenseName(const utility::string_t& value)
{
    m_License_name = value;
    m_License_nameIsSet = true;
}

bool LicenseBundleAssignmentDto::licenseNameIsSet() const
{
    return m_License_nameIsSet;
}

void LicenseBundleAssignmentDto::unsetLicense_name()
{
    m_License_nameIsSet = false;
}
utility::string_t LicenseBundleAssignmentDto::getLicenseDescription() const
{
    return m_License_description;
}

void LicenseBundleAssignmentDto::setLicenseDescription(const utility::string_t& value)
{
    m_License_description = value;
    m_License_descriptionIsSet = true;
}

bool LicenseBundleAssignmentDto::licenseDescriptionIsSet() const
{
    return m_License_descriptionIsSet;
}

void LicenseBundleAssignmentDto::unsetLicense_description()
{
    m_License_descriptionIsSet = false;
}
utility::string_t LicenseBundleAssignmentDto::getLicenseTemplateName() const
{
    return m_License_template_name;
}

void LicenseBundleAssignmentDto::setLicenseTemplateName(const utility::string_t& value)
{
    m_License_template_name = value;
    m_License_template_nameIsSet = true;
}

bool LicenseBundleAssignmentDto::licenseTemplateNameIsSet() const
{
    return m_License_template_nameIsSet;
}

void LicenseBundleAssignmentDto::unsetLicense_template_name()
{
    m_License_template_nameIsSet = false;
}
utility::string_t LicenseBundleAssignmentDto::getProductId() const
{
    return m_Product_id;
}

void LicenseBundleAssignmentDto::setProductId(const utility::string_t& value)
{
    m_Product_id = value;
    m_Product_idIsSet = true;
}

bool LicenseBundleAssignmentDto::productIdIsSet() const
{
    return m_Product_idIsSet;
}

void LicenseBundleAssignmentDto::unsetProduct_id()
{
    m_Product_idIsSet = false;
}
utility::string_t LicenseBundleAssignmentDto::getProductName() const
{
    return m_Product_name;
}

void LicenseBundleAssignmentDto::setProductName(const utility::string_t& value)
{
    m_Product_name = value;
    m_Product_nameIsSet = true;
}

bool LicenseBundleAssignmentDto::productNameIsSet() const
{
    return m_Product_nameIsSet;
}

void LicenseBundleAssignmentDto::unsetProduct_name()
{
    m_Product_nameIsSet = false;
}
std::shared_ptr<ResourceDto> LicenseBundleAssignmentDto::getProductLogo() const
{
    return m_Product_logo;
}

void LicenseBundleAssignmentDto::setProductLogo(const std::shared_ptr<ResourceDto>& value)
{
    m_Product_logo = value;
    m_Product_logoIsSet = true;
}

bool LicenseBundleAssignmentDto::productLogoIsSet() const
{
    return m_Product_logoIsSet;
}

void LicenseBundleAssignmentDto::unsetProduct_logo()
{
    m_Product_logoIsSet = false;
}
utility::datetime LicenseBundleAssignmentDto::getCreatedDateUtc() const
{
    return m_Created_date_utc;
}

void LicenseBundleAssignmentDto::setCreatedDateUtc(const utility::datetime& value)
{
    m_Created_date_utc = value;
    m_Created_date_utcIsSet = true;
}

bool LicenseBundleAssignmentDto::createdDateUtcIsSet() const
{
    return m_Created_date_utcIsSet;
}

void LicenseBundleAssignmentDto::unsetCreated_date_utc()
{
    m_Created_date_utcIsSet = false;
}
utility::datetime LicenseBundleAssignmentDto::getModifiedDateUtc() const
{
    return m_Modified_date_utc;
}

void LicenseBundleAssignmentDto::setModifiedDateUtc(const utility::datetime& value)
{
    m_Modified_date_utc = value;
    m_Modified_date_utcIsSet = true;
}

bool LicenseBundleAssignmentDto::modifiedDateUtcIsSet() const
{
    return m_Modified_date_utcIsSet;
}

void LicenseBundleAssignmentDto::unsetModified_date_utc()
{
    m_Modified_date_utcIsSet = false;
}
utility::string_t LicenseBundleAssignmentDto::getLastModifiedBy() const
{
    return m_Last_modified_by;
}

void LicenseBundleAssignmentDto::setLastModifiedBy(const utility::string_t& value)
{
    m_Last_modified_by = value;
    m_Last_modified_byIsSet = true;
}

bool LicenseBundleAssignmentDto::lastModifiedByIsSet() const
{
    return m_Last_modified_byIsSet;
}

void LicenseBundleAssignmentDto::unsetLast_modified_by()
{
    m_Last_modified_byIsSet = false;
}
}
}
}
}


