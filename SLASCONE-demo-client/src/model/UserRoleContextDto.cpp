/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/UserRoleContextDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



UserRoleContextDto::UserRoleContextDto()
{
    m_IsvId = utility::conversions::to_string_t("");
    m_IsvIdIsSet = false;
    m_ResellerId = utility::conversions::to_string_t("");
    m_ResellerIdIsSet = false;
    m_CustomerId = utility::conversions::to_string_t("");
    m_CustomerIdIsSet = false;
}

UserRoleContextDto::~UserRoleContextDto()
{
}

void UserRoleContextDto::validate()
{
    // TODO: implement validation
}

web::json::value UserRoleContextDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IsvIdIsSet)
    {
        val[utility::conversions::to_string_t(U("isvId"))] = ModelBase::toJson(m_IsvId);
    }
    if(m_ResellerIdIsSet)
    {
        val[utility::conversions::to_string_t(U("resellerId"))] = ModelBase::toJson(m_ResellerId);
    }
    if(m_CustomerIdIsSet)
    {
        val[utility::conversions::to_string_t(U("customerId"))] = ModelBase::toJson(m_CustomerId);
    }

    return val;
}

bool UserRoleContextDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("isvId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isvId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIsvId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsvId);
            setIsvId(refVal_setIsvId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("resellerId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("resellerId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setResellerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResellerId);
            setResellerId(refVal_setResellerId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("customerId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("customerId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCustomerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomerId);
            setCustomerId(refVal_setCustomerId);
        }
    }
    return ok;
}

void UserRoleContextDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IsvIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isvId")), m_IsvId));
    }
    if(m_ResellerIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("resellerId")), m_ResellerId));
    }
    if(m_CustomerIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("customerId")), m_CustomerId));
    }
}

bool UserRoleContextDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("isvId"))))
    {
        utility::string_t refVal_setIsvId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isvId"))), refVal_setIsvId );
        setIsvId(refVal_setIsvId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("resellerId"))))
    {
        utility::string_t refVal_setResellerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("resellerId"))), refVal_setResellerId );
        setResellerId(refVal_setResellerId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("customerId"))))
    {
        utility::string_t refVal_setCustomerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("customerId"))), refVal_setCustomerId );
        setCustomerId(refVal_setCustomerId);
    }
    return ok;
}

utility::string_t UserRoleContextDto::getIsvId() const
{
    return m_IsvId;
}

void UserRoleContextDto::setIsvId(const utility::string_t& value)
{
    m_IsvId = value;
    m_IsvIdIsSet = true;
}

bool UserRoleContextDto::isvIdIsSet() const
{
    return m_IsvIdIsSet;
}

void UserRoleContextDto::unsetIsvId()
{
    m_IsvIdIsSet = false;
}
utility::string_t UserRoleContextDto::getResellerId() const
{
    return m_ResellerId;
}

void UserRoleContextDto::setResellerId(const utility::string_t& value)
{
    m_ResellerId = value;
    m_ResellerIdIsSet = true;
}

bool UserRoleContextDto::resellerIdIsSet() const
{
    return m_ResellerIdIsSet;
}

void UserRoleContextDto::unsetResellerId()
{
    m_ResellerIdIsSet = false;
}
utility::string_t UserRoleContextDto::getCustomerId() const
{
    return m_CustomerId;
}

void UserRoleContextDto::setCustomerId(const utility::string_t& value)
{
    m_CustomerId = value;
    m_CustomerIdIsSet = true;
}

bool UserRoleContextDto::customerIdIsSet() const
{
    return m_CustomerIdIsSet;
}

void UserRoleContextDto::unsetCustomerId()
{
    m_CustomerIdIsSet = false;
}
}
}
}
}


