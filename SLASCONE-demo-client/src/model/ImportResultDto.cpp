/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/ImportResultDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ImportResultDto::ImportResultDto()
{
    m_Imported_rows = 0;
    m_Imported_rowsIsSet = false;
    m_Omitted_rowsIsSet = false;
    m_Skipped_rows = 0;
    m_Skipped_rowsIsSet = false;
    m_Total_rows = 0;
    m_Total_rowsIsSet = false;
}

ImportResultDto::~ImportResultDto()
{
}

void ImportResultDto::validate()
{
    // TODO: implement validation
}

web::json::value ImportResultDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Imported_rowsIsSet)
    {
        val[utility::conversions::to_string_t(U("imported_rows"))] = ModelBase::toJson(m_Imported_rows);
    }
    if(m_Omitted_rowsIsSet)
    {
        val[utility::conversions::to_string_t(U("omitted_rows"))] = ModelBase::toJson(m_Omitted_rows);
    }
    if(m_Skipped_rowsIsSet)
    {
        val[utility::conversions::to_string_t(U("skipped_rows"))] = ModelBase::toJson(m_Skipped_rows);
    }
    if(m_Total_rowsIsSet)
    {
        val[utility::conversions::to_string_t(U("total_rows"))] = ModelBase::toJson(m_Total_rows);
    }

    return val;
}

bool ImportResultDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("imported_rows"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("imported_rows")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setImportedRows;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImportedRows);
            setImportedRows(refVal_setImportedRows);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("omitted_rows"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("omitted_rows")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<OmittedDataSet>> refVal_setOmittedRows;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOmittedRows);
            setOmittedRows(refVal_setOmittedRows);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("skipped_rows"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("skipped_rows")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSkippedRows;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSkippedRows);
            setSkippedRows(refVal_setSkippedRows);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_rows"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_rows")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTotalRows;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalRows);
            setTotalRows(refVal_setTotalRows);
        }
    }
    return ok;
}

void ImportResultDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Imported_rowsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("imported_rows")), m_Imported_rows));
    }
    if(m_Omitted_rowsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("omitted_rows")), m_Omitted_rows));
    }
    if(m_Skipped_rowsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("skipped_rows")), m_Skipped_rows));
    }
    if(m_Total_rowsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_rows")), m_Total_rows));
    }
}

bool ImportResultDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("imported_rows"))))
    {
        int32_t refVal_setImportedRows;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("imported_rows"))), refVal_setImportedRows );
        setImportedRows(refVal_setImportedRows);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("omitted_rows"))))
    {
        std::vector<std::shared_ptr<OmittedDataSet>> refVal_setOmittedRows;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("omitted_rows"))), refVal_setOmittedRows );
        setOmittedRows(refVal_setOmittedRows);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("skipped_rows"))))
    {
        int32_t refVal_setSkippedRows;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("skipped_rows"))), refVal_setSkippedRows );
        setSkippedRows(refVal_setSkippedRows);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_rows"))))
    {
        int32_t refVal_setTotalRows;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_rows"))), refVal_setTotalRows );
        setTotalRows(refVal_setTotalRows);
    }
    return ok;
}

int32_t ImportResultDto::getImportedRows() const
{
    return m_Imported_rows;
}

void ImportResultDto::setImportedRows(int32_t value)
{
    m_Imported_rows = value;
    m_Imported_rowsIsSet = true;
}

bool ImportResultDto::importedRowsIsSet() const
{
    return m_Imported_rowsIsSet;
}

void ImportResultDto::unsetImported_rows()
{
    m_Imported_rowsIsSet = false;
}
std::vector<std::shared_ptr<OmittedDataSet>>& ImportResultDto::getOmittedRows()
{
    return m_Omitted_rows;
}

void ImportResultDto::setOmittedRows(const std::vector<std::shared_ptr<OmittedDataSet>>& value)
{
    m_Omitted_rows = value;
    m_Omitted_rowsIsSet = true;
}

bool ImportResultDto::omittedRowsIsSet() const
{
    return m_Omitted_rowsIsSet;
}

void ImportResultDto::unsetOmitted_rows()
{
    m_Omitted_rowsIsSet = false;
}
int32_t ImportResultDto::getSkippedRows() const
{
    return m_Skipped_rows;
}

void ImportResultDto::setSkippedRows(int32_t value)
{
    m_Skipped_rows = value;
    m_Skipped_rowsIsSet = true;
}

bool ImportResultDto::skippedRowsIsSet() const
{
    return m_Skipped_rowsIsSet;
}

void ImportResultDto::unsetSkipped_rows()
{
    m_Skipped_rowsIsSet = false;
}
int32_t ImportResultDto::getTotalRows() const
{
    return m_Total_rows;
}

void ImportResultDto::setTotalRows(int32_t value)
{
    m_Total_rows = value;
    m_Total_rowsIsSet = true;
}

bool ImportResultDto::totalRowsIsSet() const
{
    return m_Total_rowsIsSet;
}

void ImportResultDto::unsetTotal_rows()
{
    m_Total_rowsIsSet = false;
}
}
}
}
}


