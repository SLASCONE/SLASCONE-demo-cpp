/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/MailLogDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



MailLogDto::MailLogDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Receivers = utility::conversions::to_string_t("");
    m_ReceiversIsSet = false;
    m_Ccs = utility::conversions::to_string_t("");
    m_CcsIsSet = false;
    m_Subject = utility::conversions::to_string_t("");
    m_SubjectIsSet = false;
    m_Body = utility::conversions::to_string_t("");
    m_BodyIsSet = false;
    m_Was_license_file_attached = false;
    m_Was_license_file_attachedIsSet = false;
    m_Customer_contact_id = utility::conversions::to_string_t("");
    m_Customer_contact_idIsSet = false;
    m_Customer_contactIsSet = false;
    m_License_id = utility::conversions::to_string_t("");
    m_License_idIsSet = false;
    m_Email_template_id = utility::conversions::to_string_t("");
    m_Email_template_idIsSet = false;
    m_Email_templateIsSet = false;
    m_Alert_id = utility::conversions::to_string_t("");
    m_Alert_idIsSet = false;
    m_AlertIsSet = false;
    m_Created_date_utc = utility::datetime();
    m_Created_date_utcIsSet = false;
    m_Modified_date_utc = utility::datetime();
    m_Modified_date_utcIsSet = false;
    m_Last_modified_by = utility::conversions::to_string_t("");
    m_Last_modified_byIsSet = false;
}

MailLogDto::~MailLogDto()
{
}

void MailLogDto::validate()
{
    // TODO: implement validation
}

web::json::value MailLogDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_ReceiversIsSet)
    {
        val[utility::conversions::to_string_t(U("receivers"))] = ModelBase::toJson(m_Receivers);
    }
    if(m_CcsIsSet)
    {
        val[utility::conversions::to_string_t(U("ccs"))] = ModelBase::toJson(m_Ccs);
    }
    if(m_SubjectIsSet)
    {
        val[utility::conversions::to_string_t(U("subject"))] = ModelBase::toJson(m_Subject);
    }
    if(m_BodyIsSet)
    {
        val[utility::conversions::to_string_t(U("body"))] = ModelBase::toJson(m_Body);
    }
    if(m_Was_license_file_attachedIsSet)
    {
        val[utility::conversions::to_string_t(U("was_license_file_attached"))] = ModelBase::toJson(m_Was_license_file_attached);
    }
    if(m_Customer_contact_idIsSet)
    {
        val[utility::conversions::to_string_t(U("customer_contact_id"))] = ModelBase::toJson(m_Customer_contact_id);
    }
    if(m_Customer_contactIsSet)
    {
        val[utility::conversions::to_string_t(U("customer_contact"))] = ModelBase::toJson(m_Customer_contact);
    }
    if(m_License_idIsSet)
    {
        val[utility::conversions::to_string_t(U("license_id"))] = ModelBase::toJson(m_License_id);
    }
    if(m_Email_template_idIsSet)
    {
        val[utility::conversions::to_string_t(U("email_template_id"))] = ModelBase::toJson(m_Email_template_id);
    }
    if(m_Email_templateIsSet)
    {
        val[utility::conversions::to_string_t(U("email_template"))] = ModelBase::toJson(m_Email_template);
    }
    if(m_Alert_idIsSet)
    {
        val[utility::conversions::to_string_t(U("alert_id"))] = ModelBase::toJson(m_Alert_id);
    }
    if(m_AlertIsSet)
    {
        val[utility::conversions::to_string_t(U("alert"))] = ModelBase::toJson(m_Alert);
    }
    if(m_Created_date_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("created_date_utc"))] = ModelBase::toJson(m_Created_date_utc);
    }
    if(m_Modified_date_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("modified_date_utc"))] = ModelBase::toJson(m_Modified_date_utc);
    }
    if(m_Last_modified_byIsSet)
    {
        val[utility::conversions::to_string_t(U("last_modified_by"))] = ModelBase::toJson(m_Last_modified_by);
    }

    return val;
}

bool MailLogDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("receivers"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("receivers")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setReceivers;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReceivers);
            setReceivers(refVal_setReceivers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ccs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ccs")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCcs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCcs);
            setCcs(refVal_setCcs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("subject"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subject")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubject;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubject);
            setSubject(refVal_setSubject);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("body"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("body")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBody;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBody);
            setBody(refVal_setBody);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("was_license_file_attached"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("was_license_file_attached")));
        if(!fieldValue.is_null())
        {
            bool refVal_setWasLicenseFileAttached;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWasLicenseFileAttached);
            setWasLicenseFileAttached(refVal_setWasLicenseFileAttached);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("customer_contact_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("customer_contact_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCustomerContactId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomerContactId);
            setCustomerContactId(refVal_setCustomerContactId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("customer_contact"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("customer_contact")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CustomerContactDto> refVal_setCustomerContact;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomerContact);
            setCustomerContact(refVal_setCustomerContact);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("license_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("license_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLicenseId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenseId);
            setLicenseId(refVal_setLicenseId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("email_template_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("email_template_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEmailTemplateId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEmailTemplateId);
            setEmailTemplateId(refVal_setEmailTemplateId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("email_template"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("email_template")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<EmailTemplateDto> refVal_setEmailTemplate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEmailTemplate);
            setEmailTemplate(refVal_setEmailTemplate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("alert_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("alert_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAlertId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAlertId);
            setAlertId(refVal_setAlertId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("alert"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("alert")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AlertDto> refVal_setAlert;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAlert);
            setAlert(refVal_setAlert);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_date_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_date_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedDateUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedDateUtc);
            setCreatedDateUtc(refVal_setCreatedDateUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("modified_date_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("modified_date_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setModifiedDateUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModifiedDateUtc);
            setModifiedDateUtc(refVal_setModifiedDateUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("last_modified_by"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("last_modified_by")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLastModifiedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastModifiedBy);
            setLastModifiedBy(refVal_setLastModifiedBy);
        }
    }
    return ok;
}

void MailLogDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_ReceiversIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("receivers")), m_Receivers));
    }
    if(m_CcsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ccs")), m_Ccs));
    }
    if(m_SubjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subject")), m_Subject));
    }
    if(m_BodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("body")), m_Body));
    }
    if(m_Was_license_file_attachedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("was_license_file_attached")), m_Was_license_file_attached));
    }
    if(m_Customer_contact_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("customer_contact_id")), m_Customer_contact_id));
    }
    if(m_Customer_contactIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("customer_contact")), m_Customer_contact));
    }
    if(m_License_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("license_id")), m_License_id));
    }
    if(m_Email_template_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("email_template_id")), m_Email_template_id));
    }
    if(m_Email_templateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("email_template")), m_Email_template));
    }
    if(m_Alert_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("alert_id")), m_Alert_id));
    }
    if(m_AlertIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("alert")), m_Alert));
    }
    if(m_Created_date_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_date_utc")), m_Created_date_utc));
    }
    if(m_Modified_date_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("modified_date_utc")), m_Modified_date_utc));
    }
    if(m_Last_modified_byIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("last_modified_by")), m_Last_modified_by));
    }
}

bool MailLogDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("receivers"))))
    {
        utility::string_t refVal_setReceivers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("receivers"))), refVal_setReceivers );
        setReceivers(refVal_setReceivers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ccs"))))
    {
        utility::string_t refVal_setCcs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ccs"))), refVal_setCcs );
        setCcs(refVal_setCcs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("subject"))))
    {
        utility::string_t refVal_setSubject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subject"))), refVal_setSubject );
        setSubject(refVal_setSubject);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("body"))))
    {
        utility::string_t refVal_setBody;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("body"))), refVal_setBody );
        setBody(refVal_setBody);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("was_license_file_attached"))))
    {
        bool refVal_setWasLicenseFileAttached;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("was_license_file_attached"))), refVal_setWasLicenseFileAttached );
        setWasLicenseFileAttached(refVal_setWasLicenseFileAttached);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("customer_contact_id"))))
    {
        utility::string_t refVal_setCustomerContactId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("customer_contact_id"))), refVal_setCustomerContactId );
        setCustomerContactId(refVal_setCustomerContactId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("customer_contact"))))
    {
        std::shared_ptr<CustomerContactDto> refVal_setCustomerContact;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("customer_contact"))), refVal_setCustomerContact );
        setCustomerContact(refVal_setCustomerContact);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("license_id"))))
    {
        utility::string_t refVal_setLicenseId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("license_id"))), refVal_setLicenseId );
        setLicenseId(refVal_setLicenseId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("email_template_id"))))
    {
        utility::string_t refVal_setEmailTemplateId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("email_template_id"))), refVal_setEmailTemplateId );
        setEmailTemplateId(refVal_setEmailTemplateId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("email_template"))))
    {
        std::shared_ptr<EmailTemplateDto> refVal_setEmailTemplate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("email_template"))), refVal_setEmailTemplate );
        setEmailTemplate(refVal_setEmailTemplate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("alert_id"))))
    {
        utility::string_t refVal_setAlertId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("alert_id"))), refVal_setAlertId );
        setAlertId(refVal_setAlertId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("alert"))))
    {
        std::shared_ptr<AlertDto> refVal_setAlert;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("alert"))), refVal_setAlert );
        setAlert(refVal_setAlert);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_date_utc"))))
    {
        utility::datetime refVal_setCreatedDateUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_date_utc"))), refVal_setCreatedDateUtc );
        setCreatedDateUtc(refVal_setCreatedDateUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("modified_date_utc"))))
    {
        utility::datetime refVal_setModifiedDateUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("modified_date_utc"))), refVal_setModifiedDateUtc );
        setModifiedDateUtc(refVal_setModifiedDateUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("last_modified_by"))))
    {
        utility::string_t refVal_setLastModifiedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("last_modified_by"))), refVal_setLastModifiedBy );
        setLastModifiedBy(refVal_setLastModifiedBy);
    }
    return ok;
}

utility::string_t MailLogDto::getId() const
{
    return m_Id;
}

void MailLogDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool MailLogDto::idIsSet() const
{
    return m_IdIsSet;
}

void MailLogDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t MailLogDto::getReceivers() const
{
    return m_Receivers;
}

void MailLogDto::setReceivers(const utility::string_t& value)
{
    m_Receivers = value;
    m_ReceiversIsSet = true;
}

bool MailLogDto::receiversIsSet() const
{
    return m_ReceiversIsSet;
}

void MailLogDto::unsetReceivers()
{
    m_ReceiversIsSet = false;
}
utility::string_t MailLogDto::getCcs() const
{
    return m_Ccs;
}

void MailLogDto::setCcs(const utility::string_t& value)
{
    m_Ccs = value;
    m_CcsIsSet = true;
}

bool MailLogDto::ccsIsSet() const
{
    return m_CcsIsSet;
}

void MailLogDto::unsetCcs()
{
    m_CcsIsSet = false;
}
utility::string_t MailLogDto::getSubject() const
{
    return m_Subject;
}

void MailLogDto::setSubject(const utility::string_t& value)
{
    m_Subject = value;
    m_SubjectIsSet = true;
}

bool MailLogDto::subjectIsSet() const
{
    return m_SubjectIsSet;
}

void MailLogDto::unsetSubject()
{
    m_SubjectIsSet = false;
}
utility::string_t MailLogDto::getBody() const
{
    return m_Body;
}

void MailLogDto::setBody(const utility::string_t& value)
{
    m_Body = value;
    m_BodyIsSet = true;
}

bool MailLogDto::bodyIsSet() const
{
    return m_BodyIsSet;
}

void MailLogDto::unsetBody()
{
    m_BodyIsSet = false;
}
bool MailLogDto::isWasLicenseFileAttached() const
{
    return m_Was_license_file_attached;
}

void MailLogDto::setWasLicenseFileAttached(bool value)
{
    m_Was_license_file_attached = value;
    m_Was_license_file_attachedIsSet = true;
}

bool MailLogDto::wasLicenseFileAttachedIsSet() const
{
    return m_Was_license_file_attachedIsSet;
}

void MailLogDto::unsetWas_license_file_attached()
{
    m_Was_license_file_attachedIsSet = false;
}
utility::string_t MailLogDto::getCustomerContactId() const
{
    return m_Customer_contact_id;
}

void MailLogDto::setCustomerContactId(const utility::string_t& value)
{
    m_Customer_contact_id = value;
    m_Customer_contact_idIsSet = true;
}

bool MailLogDto::customerContactIdIsSet() const
{
    return m_Customer_contact_idIsSet;
}

void MailLogDto::unsetCustomer_contact_id()
{
    m_Customer_contact_idIsSet = false;
}
std::shared_ptr<CustomerContactDto> MailLogDto::getCustomerContact() const
{
    return m_Customer_contact;
}

void MailLogDto::setCustomerContact(const std::shared_ptr<CustomerContactDto>& value)
{
    m_Customer_contact = value;
    m_Customer_contactIsSet = true;
}

bool MailLogDto::customerContactIsSet() const
{
    return m_Customer_contactIsSet;
}

void MailLogDto::unsetCustomer_contact()
{
    m_Customer_contactIsSet = false;
}
utility::string_t MailLogDto::getLicenseId() const
{
    return m_License_id;
}

void MailLogDto::setLicenseId(const utility::string_t& value)
{
    m_License_id = value;
    m_License_idIsSet = true;
}

bool MailLogDto::licenseIdIsSet() const
{
    return m_License_idIsSet;
}

void MailLogDto::unsetLicense_id()
{
    m_License_idIsSet = false;
}
utility::string_t MailLogDto::getEmailTemplateId() const
{
    return m_Email_template_id;
}

void MailLogDto::setEmailTemplateId(const utility::string_t& value)
{
    m_Email_template_id = value;
    m_Email_template_idIsSet = true;
}

bool MailLogDto::emailTemplateIdIsSet() const
{
    return m_Email_template_idIsSet;
}

void MailLogDto::unsetEmail_template_id()
{
    m_Email_template_idIsSet = false;
}
std::shared_ptr<EmailTemplateDto> MailLogDto::getEmailTemplate() const
{
    return m_Email_template;
}

void MailLogDto::setEmailTemplate(const std::shared_ptr<EmailTemplateDto>& value)
{
    m_Email_template = value;
    m_Email_templateIsSet = true;
}

bool MailLogDto::emailTemplateIsSet() const
{
    return m_Email_templateIsSet;
}

void MailLogDto::unsetEmail_template()
{
    m_Email_templateIsSet = false;
}
utility::string_t MailLogDto::getAlertId() const
{
    return m_Alert_id;
}

void MailLogDto::setAlertId(const utility::string_t& value)
{
    m_Alert_id = value;
    m_Alert_idIsSet = true;
}

bool MailLogDto::alertIdIsSet() const
{
    return m_Alert_idIsSet;
}

void MailLogDto::unsetAlert_id()
{
    m_Alert_idIsSet = false;
}
std::shared_ptr<AlertDto> MailLogDto::getAlert() const
{
    return m_Alert;
}

void MailLogDto::setAlert(const std::shared_ptr<AlertDto>& value)
{
    m_Alert = value;
    m_AlertIsSet = true;
}

bool MailLogDto::alertIsSet() const
{
    return m_AlertIsSet;
}

void MailLogDto::unsetAlert()
{
    m_AlertIsSet = false;
}
utility::datetime MailLogDto::getCreatedDateUtc() const
{
    return m_Created_date_utc;
}

void MailLogDto::setCreatedDateUtc(const utility::datetime& value)
{
    m_Created_date_utc = value;
    m_Created_date_utcIsSet = true;
}

bool MailLogDto::createdDateUtcIsSet() const
{
    return m_Created_date_utcIsSet;
}

void MailLogDto::unsetCreated_date_utc()
{
    m_Created_date_utcIsSet = false;
}
utility::datetime MailLogDto::getModifiedDateUtc() const
{
    return m_Modified_date_utc;
}

void MailLogDto::setModifiedDateUtc(const utility::datetime& value)
{
    m_Modified_date_utc = value;
    m_Modified_date_utcIsSet = true;
}

bool MailLogDto::modifiedDateUtcIsSet() const
{
    return m_Modified_date_utcIsSet;
}

void MailLogDto::unsetModified_date_utc()
{
    m_Modified_date_utcIsSet = false;
}
utility::string_t MailLogDto::getLastModifiedBy() const
{
    return m_Last_modified_by;
}

void MailLogDto::setLastModifiedBy(const utility::string_t& value)
{
    m_Last_modified_by = value;
    m_Last_modified_byIsSet = true;
}

bool MailLogDto::lastModifiedByIsSet() const
{
    return m_Last_modified_byIsSet;
}

void MailLogDto::unsetLast_modified_by()
{
    m_Last_modified_byIsSet = false;
}
}
}
}
}


