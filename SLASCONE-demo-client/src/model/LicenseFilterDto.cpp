/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/LicenseFilterDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



LicenseFilterDto::LicenseFilterDto()
{
    m_Page_size = 0;
    m_Page_sizeIsSet = false;
    m_Page = 0;
    m_PageIsSet = false;
    m_Is_active = false;
    m_Is_activeIsSet = false;
    m_Key_search = utility::conversions::to_string_t("");
    m_Key_searchIsSet = false;
    m_Product_filter = utility::conversions::to_string_t("");
    m_Product_filterIsSet = false;
    m_Customer_filter = utility::conversions::to_string_t("");
    m_Customer_filterIsSet = false;
    m_Customer_number_filterIsSet = false;
    m_Customer_type_filterIsSet = false;
    m_Reseller_type_filterIsSet = false;
    m_Template_filterIsSet = false;
    m_License_type_filterIsSet = false;
    m_Operating_system_filterIsSet = false;
    m_Software_version_filterIsSet = false;
    m_Is_software_version_valid = false;
    m_Is_software_version_validIsSet = false;
    m_Feature_filterIsSet = false;
    m_Is_feature_active = false;
    m_Is_feature_activeIsSet = false;
    m_Date_filter = utility::datetime();
    m_Date_filterIsSet = false;
    m_Date_filter_mode = utility::conversions::to_string_t("");
    m_Date_filter_modeIsSet = false;
    m_Is_normal_token = false;
    m_Is_normal_tokenIsSet = false;
    m_Is_goodwill_token = false;
    m_Is_goodwill_tokenIsSet = false;
    m_Is_group_valid = false;
    m_Is_group_validIsSet = false;
    m_Is_assigned_token = false;
    m_Is_assigned_tokenIsSet = false;
    m_Group_count_filter = 0;
    m_Group_count_filterIsSet = false;
    m_Group_count_mode = utility::conversions::to_string_t("");
    m_Group_count_modeIsSet = false;
    m_Sort_typeIsSet = false;
    m_Sort_order = false;
    m_Sort_orderIsSet = false;
    m_License_tag_filterIsSet = false;
    m_Token_tag_filterIsSet = false;
    m_Customer_tag_filterIsSet = false;
    m_Analytical_field_filterIsSet = false;
}

LicenseFilterDto::~LicenseFilterDto()
{
}

void LicenseFilterDto::validate()
{
    // TODO: implement validation
}

web::json::value LicenseFilterDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Page_sizeIsSet)
    {
        val[utility::conversions::to_string_t(U("page_size"))] = ModelBase::toJson(m_Page_size);
    }
    if(m_PageIsSet)
    {
        val[utility::conversions::to_string_t(U("page"))] = ModelBase::toJson(m_Page);
    }
    if(m_Is_activeIsSet)
    {
        val[utility::conversions::to_string_t(U("is_active"))] = ModelBase::toJson(m_Is_active);
    }
    if(m_Key_searchIsSet)
    {
        val[utility::conversions::to_string_t(U("key_search"))] = ModelBase::toJson(m_Key_search);
    }
    if(m_Product_filterIsSet)
    {
        val[utility::conversions::to_string_t(U("product_filter"))] = ModelBase::toJson(m_Product_filter);
    }
    if(m_Customer_filterIsSet)
    {
        val[utility::conversions::to_string_t(U("customer_filter"))] = ModelBase::toJson(m_Customer_filter);
    }
    if(m_Customer_number_filterIsSet)
    {
        val[utility::conversions::to_string_t(U("customer_number_filter"))] = ModelBase::toJson(m_Customer_number_filter);
    }
    if(m_Customer_type_filterIsSet)
    {
        val[utility::conversions::to_string_t(U("customer_type_filter"))] = ModelBase::toJson(m_Customer_type_filter);
    }
    if(m_Reseller_type_filterIsSet)
    {
        val[utility::conversions::to_string_t(U("reseller_type_filter"))] = ModelBase::toJson(m_Reseller_type_filter);
    }
    if(m_Template_filterIsSet)
    {
        val[utility::conversions::to_string_t(U("template_filter"))] = ModelBase::toJson(m_Template_filter);
    }
    if(m_License_type_filterIsSet)
    {
        val[utility::conversions::to_string_t(U("license_type_filter"))] = ModelBase::toJson(m_License_type_filter);
    }
    if(m_Operating_system_filterIsSet)
    {
        val[utility::conversions::to_string_t(U("operating_system_filter"))] = ModelBase::toJson(m_Operating_system_filter);
    }
    if(m_Software_version_filterIsSet)
    {
        val[utility::conversions::to_string_t(U("software_version_filter"))] = ModelBase::toJson(m_Software_version_filter);
    }
    if(m_Is_software_version_validIsSet)
    {
        val[utility::conversions::to_string_t(U("is_software_version_valid"))] = ModelBase::toJson(m_Is_software_version_valid);
    }
    if(m_Feature_filterIsSet)
    {
        val[utility::conversions::to_string_t(U("feature_filter"))] = ModelBase::toJson(m_Feature_filter);
    }
    if(m_Is_feature_activeIsSet)
    {
        val[utility::conversions::to_string_t(U("is_feature_active"))] = ModelBase::toJson(m_Is_feature_active);
    }
    if(m_Date_filterIsSet)
    {
        val[utility::conversions::to_string_t(U("date_filter"))] = ModelBase::toJson(m_Date_filter);
    }
    if(m_Date_filter_modeIsSet)
    {
        val[utility::conversions::to_string_t(U("date_filter_mode"))] = ModelBase::toJson(m_Date_filter_mode);
    }
    if(m_Is_normal_tokenIsSet)
    {
        val[utility::conversions::to_string_t(U("is_normal_token"))] = ModelBase::toJson(m_Is_normal_token);
    }
    if(m_Is_goodwill_tokenIsSet)
    {
        val[utility::conversions::to_string_t(U("is_goodwill_token"))] = ModelBase::toJson(m_Is_goodwill_token);
    }
    if(m_Is_group_validIsSet)
    {
        val[utility::conversions::to_string_t(U("is_group_valid"))] = ModelBase::toJson(m_Is_group_valid);
    }
    if(m_Is_assigned_tokenIsSet)
    {
        val[utility::conversions::to_string_t(U("is_assigned_token"))] = ModelBase::toJson(m_Is_assigned_token);
    }
    if(m_Group_count_filterIsSet)
    {
        val[utility::conversions::to_string_t(U("group_count_filter"))] = ModelBase::toJson(m_Group_count_filter);
    }
    if(m_Group_count_modeIsSet)
    {
        val[utility::conversions::to_string_t(U("group_count_mode"))] = ModelBase::toJson(m_Group_count_mode);
    }
    if(m_Sort_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("sort_type"))] = ModelBase::toJson(m_Sort_type);
    }
    if(m_Sort_orderIsSet)
    {
        val[utility::conversions::to_string_t(U("sort_order"))] = ModelBase::toJson(m_Sort_order);
    }
    if(m_License_tag_filterIsSet)
    {
        val[utility::conversions::to_string_t(U("license_tag_filter"))] = ModelBase::toJson(m_License_tag_filter);
    }
    if(m_Token_tag_filterIsSet)
    {
        val[utility::conversions::to_string_t(U("token_tag_filter"))] = ModelBase::toJson(m_Token_tag_filter);
    }
    if(m_Customer_tag_filterIsSet)
    {
        val[utility::conversions::to_string_t(U("customer_tag_filter"))] = ModelBase::toJson(m_Customer_tag_filter);
    }
    if(m_Analytical_field_filterIsSet)
    {
        val[utility::conversions::to_string_t(U("analytical_field_filter"))] = ModelBase::toJson(m_Analytical_field_filter);
    }

    return val;
}

bool LicenseFilterDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("page_size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("page_size")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPageSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPageSize);
            setPageSize(refVal_setPageSize);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("page"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("page")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPage);
            setPage(refVal_setPage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_active"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_active")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsActive;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsActive);
            setIsActive(refVal_setIsActive);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("key_search"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("key_search")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setKeySearch;
            ok &= ModelBase::fromJson(fieldValue, refVal_setKeySearch);
            setKeySearch(refVal_setKeySearch);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("product_filter"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("product_filter")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProductFilter;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProductFilter);
            setProductFilter(refVal_setProductFilter);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("customer_filter"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("customer_filter")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCustomerFilter;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomerFilter);
            setCustomerFilter(refVal_setCustomerFilter);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("customer_number_filter"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("customer_number_filter")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setCustomerNumberFilter;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomerNumberFilter);
            setCustomerNumberFilter(refVal_setCustomerNumberFilter);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("customer_type_filter"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("customer_type_filter")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setCustomerTypeFilter;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomerTypeFilter);
            setCustomerTypeFilter(refVal_setCustomerTypeFilter);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reseller_type_filter"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reseller_type_filter")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setResellerTypeFilter;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResellerTypeFilter);
            setResellerTypeFilter(refVal_setResellerTypeFilter);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("template_filter"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("template_filter")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setTemplateFilter;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTemplateFilter);
            setTemplateFilter(refVal_setTemplateFilter);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("license_type_filter"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("license_type_filter")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setLicenseTypeFilter;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenseTypeFilter);
            setLicenseTypeFilter(refVal_setLicenseTypeFilter);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("operating_system_filter"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("operating_system_filter")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setOperatingSystemFilter;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOperatingSystemFilter);
            setOperatingSystemFilter(refVal_setOperatingSystemFilter);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("software_version_filter"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("software_version_filter")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setSoftwareVersionFilter;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSoftwareVersionFilter);
            setSoftwareVersionFilter(refVal_setSoftwareVersionFilter);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_software_version_valid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_software_version_valid")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsSoftwareVersionValid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsSoftwareVersionValid);
            setIsSoftwareVersionValid(refVal_setIsSoftwareVersionValid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("feature_filter"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("feature_filter")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setFeatureFilter;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFeatureFilter);
            setFeatureFilter(refVal_setFeatureFilter);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_feature_active"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_feature_active")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsFeatureActive;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsFeatureActive);
            setIsFeatureActive(refVal_setIsFeatureActive);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("date_filter"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("date_filter")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDateFilter;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateFilter);
            setDateFilter(refVal_setDateFilter);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("date_filter_mode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("date_filter_mode")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDateFilterMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateFilterMode);
            setDateFilterMode(refVal_setDateFilterMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_normal_token"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_normal_token")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsNormalToken;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsNormalToken);
            setIsNormalToken(refVal_setIsNormalToken);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_goodwill_token"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_goodwill_token")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsGoodwillToken;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsGoodwillToken);
            setIsGoodwillToken(refVal_setIsGoodwillToken);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_group_valid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_group_valid")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsGroupValid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsGroupValid);
            setIsGroupValid(refVal_setIsGroupValid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_assigned_token"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_assigned_token")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsAssignedToken;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsAssignedToken);
            setIsAssignedToken(refVal_setIsAssignedToken);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("group_count_filter"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("group_count_filter")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setGroupCountFilter;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGroupCountFilter);
            setGroupCountFilter(refVal_setGroupCountFilter);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("group_count_mode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("group_count_mode")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGroupCountMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGroupCountMode);
            setGroupCountMode(refVal_setGroupCountMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sort_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sort_type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<LicenseFilterSortType> refVal_setSortType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSortType);
            setSortType(refVal_setSortType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sort_order"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sort_order")));
        if(!fieldValue.is_null())
        {
            bool refVal_setSortOrder;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSortOrder);
            setSortOrder(refVal_setSortOrder);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("license_tag_filter"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("license_tag_filter")));
        if(!fieldValue.is_null())
        {
            std::vector<int32_t> refVal_setLicenseTagFilter;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenseTagFilter);
            setLicenseTagFilter(refVal_setLicenseTagFilter);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("token_tag_filter"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("token_tag_filter")));
        if(!fieldValue.is_null())
        {
            std::vector<int32_t> refVal_setTokenTagFilter;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTokenTagFilter);
            setTokenTagFilter(refVal_setTokenTagFilter);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("customer_tag_filter"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("customer_tag_filter")));
        if(!fieldValue.is_null())
        {
            std::vector<int32_t> refVal_setCustomerTagFilter;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomerTagFilter);
            setCustomerTagFilter(refVal_setCustomerTagFilter);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("analytical_field_filter"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("analytical_field_filter")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnalyticalFieldFilterDto> refVal_setAnalyticalFieldFilter;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAnalyticalFieldFilter);
            setAnalyticalFieldFilter(refVal_setAnalyticalFieldFilter);
        }
    }
    return ok;
}

void LicenseFilterDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Page_sizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("page_size")), m_Page_size));
    }
    if(m_PageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("page")), m_Page));
    }
    if(m_Is_activeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_active")), m_Is_active));
    }
    if(m_Key_searchIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("key_search")), m_Key_search));
    }
    if(m_Product_filterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("product_filter")), m_Product_filter));
    }
    if(m_Customer_filterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("customer_filter")), m_Customer_filter));
    }
    if(m_Customer_number_filterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("customer_number_filter")), m_Customer_number_filter));
    }
    if(m_Customer_type_filterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("customer_type_filter")), m_Customer_type_filter));
    }
    if(m_Reseller_type_filterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reseller_type_filter")), m_Reseller_type_filter));
    }
    if(m_Template_filterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("template_filter")), m_Template_filter));
    }
    if(m_License_type_filterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("license_type_filter")), m_License_type_filter));
    }
    if(m_Operating_system_filterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("operating_system_filter")), m_Operating_system_filter));
    }
    if(m_Software_version_filterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("software_version_filter")), m_Software_version_filter));
    }
    if(m_Is_software_version_validIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_software_version_valid")), m_Is_software_version_valid));
    }
    if(m_Feature_filterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("feature_filter")), m_Feature_filter));
    }
    if(m_Is_feature_activeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_feature_active")), m_Is_feature_active));
    }
    if(m_Date_filterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("date_filter")), m_Date_filter));
    }
    if(m_Date_filter_modeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("date_filter_mode")), m_Date_filter_mode));
    }
    if(m_Is_normal_tokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_normal_token")), m_Is_normal_token));
    }
    if(m_Is_goodwill_tokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_goodwill_token")), m_Is_goodwill_token));
    }
    if(m_Is_group_validIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_group_valid")), m_Is_group_valid));
    }
    if(m_Is_assigned_tokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_assigned_token")), m_Is_assigned_token));
    }
    if(m_Group_count_filterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("group_count_filter")), m_Group_count_filter));
    }
    if(m_Group_count_modeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("group_count_mode")), m_Group_count_mode));
    }
    if(m_Sort_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sort_type")), m_Sort_type));
    }
    if(m_Sort_orderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sort_order")), m_Sort_order));
    }
    if(m_License_tag_filterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("license_tag_filter")), m_License_tag_filter));
    }
    if(m_Token_tag_filterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("token_tag_filter")), m_Token_tag_filter));
    }
    if(m_Customer_tag_filterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("customer_tag_filter")), m_Customer_tag_filter));
    }
    if(m_Analytical_field_filterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("analytical_field_filter")), m_Analytical_field_filter));
    }
}

bool LicenseFilterDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("page_size"))))
    {
        int32_t refVal_setPageSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("page_size"))), refVal_setPageSize );
        setPageSize(refVal_setPageSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("page"))))
    {
        int32_t refVal_setPage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("page"))), refVal_setPage );
        setPage(refVal_setPage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_active"))))
    {
        bool refVal_setIsActive;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_active"))), refVal_setIsActive );
        setIsActive(refVal_setIsActive);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("key_search"))))
    {
        utility::string_t refVal_setKeySearch;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("key_search"))), refVal_setKeySearch );
        setKeySearch(refVal_setKeySearch);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("product_filter"))))
    {
        utility::string_t refVal_setProductFilter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("product_filter"))), refVal_setProductFilter );
        setProductFilter(refVal_setProductFilter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("customer_filter"))))
    {
        utility::string_t refVal_setCustomerFilter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("customer_filter"))), refVal_setCustomerFilter );
        setCustomerFilter(refVal_setCustomerFilter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("customer_number_filter"))))
    {
        std::vector<utility::string_t> refVal_setCustomerNumberFilter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("customer_number_filter"))), refVal_setCustomerNumberFilter );
        setCustomerNumberFilter(refVal_setCustomerNumberFilter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("customer_type_filter"))))
    {
        std::vector<utility::string_t> refVal_setCustomerTypeFilter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("customer_type_filter"))), refVal_setCustomerTypeFilter );
        setCustomerTypeFilter(refVal_setCustomerTypeFilter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reseller_type_filter"))))
    {
        std::vector<utility::string_t> refVal_setResellerTypeFilter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reseller_type_filter"))), refVal_setResellerTypeFilter );
        setResellerTypeFilter(refVal_setResellerTypeFilter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("template_filter"))))
    {
        std::vector<utility::string_t> refVal_setTemplateFilter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("template_filter"))), refVal_setTemplateFilter );
        setTemplateFilter(refVal_setTemplateFilter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("license_type_filter"))))
    {
        std::vector<utility::string_t> refVal_setLicenseTypeFilter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("license_type_filter"))), refVal_setLicenseTypeFilter );
        setLicenseTypeFilter(refVal_setLicenseTypeFilter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("operating_system_filter"))))
    {
        std::vector<utility::string_t> refVal_setOperatingSystemFilter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("operating_system_filter"))), refVal_setOperatingSystemFilter );
        setOperatingSystemFilter(refVal_setOperatingSystemFilter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("software_version_filter"))))
    {
        std::vector<utility::string_t> refVal_setSoftwareVersionFilter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("software_version_filter"))), refVal_setSoftwareVersionFilter );
        setSoftwareVersionFilter(refVal_setSoftwareVersionFilter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_software_version_valid"))))
    {
        bool refVal_setIsSoftwareVersionValid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_software_version_valid"))), refVal_setIsSoftwareVersionValid );
        setIsSoftwareVersionValid(refVal_setIsSoftwareVersionValid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("feature_filter"))))
    {
        std::vector<utility::string_t> refVal_setFeatureFilter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("feature_filter"))), refVal_setFeatureFilter );
        setFeatureFilter(refVal_setFeatureFilter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_feature_active"))))
    {
        bool refVal_setIsFeatureActive;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_feature_active"))), refVal_setIsFeatureActive );
        setIsFeatureActive(refVal_setIsFeatureActive);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("date_filter"))))
    {
        utility::datetime refVal_setDateFilter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("date_filter"))), refVal_setDateFilter );
        setDateFilter(refVal_setDateFilter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("date_filter_mode"))))
    {
        utility::string_t refVal_setDateFilterMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("date_filter_mode"))), refVal_setDateFilterMode );
        setDateFilterMode(refVal_setDateFilterMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_normal_token"))))
    {
        bool refVal_setIsNormalToken;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_normal_token"))), refVal_setIsNormalToken );
        setIsNormalToken(refVal_setIsNormalToken);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_goodwill_token"))))
    {
        bool refVal_setIsGoodwillToken;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_goodwill_token"))), refVal_setIsGoodwillToken );
        setIsGoodwillToken(refVal_setIsGoodwillToken);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_group_valid"))))
    {
        bool refVal_setIsGroupValid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_group_valid"))), refVal_setIsGroupValid );
        setIsGroupValid(refVal_setIsGroupValid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_assigned_token"))))
    {
        bool refVal_setIsAssignedToken;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_assigned_token"))), refVal_setIsAssignedToken );
        setIsAssignedToken(refVal_setIsAssignedToken);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("group_count_filter"))))
    {
        int32_t refVal_setGroupCountFilter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("group_count_filter"))), refVal_setGroupCountFilter );
        setGroupCountFilter(refVal_setGroupCountFilter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("group_count_mode"))))
    {
        utility::string_t refVal_setGroupCountMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("group_count_mode"))), refVal_setGroupCountMode );
        setGroupCountMode(refVal_setGroupCountMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sort_type"))))
    {
        std::shared_ptr<LicenseFilterSortType> refVal_setSortType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sort_type"))), refVal_setSortType );
        setSortType(refVal_setSortType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sort_order"))))
    {
        bool refVal_setSortOrder;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sort_order"))), refVal_setSortOrder );
        setSortOrder(refVal_setSortOrder);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("license_tag_filter"))))
    {
        std::vector<int32_t> refVal_setLicenseTagFilter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("license_tag_filter"))), refVal_setLicenseTagFilter );
        setLicenseTagFilter(refVal_setLicenseTagFilter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("token_tag_filter"))))
    {
        std::vector<int32_t> refVal_setTokenTagFilter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("token_tag_filter"))), refVal_setTokenTagFilter );
        setTokenTagFilter(refVal_setTokenTagFilter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("customer_tag_filter"))))
    {
        std::vector<int32_t> refVal_setCustomerTagFilter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("customer_tag_filter"))), refVal_setCustomerTagFilter );
        setCustomerTagFilter(refVal_setCustomerTagFilter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("analytical_field_filter"))))
    {
        std::shared_ptr<AnalyticalFieldFilterDto> refVal_setAnalyticalFieldFilter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("analytical_field_filter"))), refVal_setAnalyticalFieldFilter );
        setAnalyticalFieldFilter(refVal_setAnalyticalFieldFilter);
    }
    return ok;
}

int32_t LicenseFilterDto::getPageSize() const
{
    return m_Page_size;
}

void LicenseFilterDto::setPageSize(int32_t value)
{
    m_Page_size = value;
    m_Page_sizeIsSet = true;
}

bool LicenseFilterDto::pageSizeIsSet() const
{
    return m_Page_sizeIsSet;
}

void LicenseFilterDto::unsetPage_size()
{
    m_Page_sizeIsSet = false;
}
int32_t LicenseFilterDto::getPage() const
{
    return m_Page;
}

void LicenseFilterDto::setPage(int32_t value)
{
    m_Page = value;
    m_PageIsSet = true;
}

bool LicenseFilterDto::pageIsSet() const
{
    return m_PageIsSet;
}

void LicenseFilterDto::unsetPage()
{
    m_PageIsSet = false;
}
bool LicenseFilterDto::isIsActive() const
{
    return m_Is_active;
}

void LicenseFilterDto::setIsActive(bool value)
{
    m_Is_active = value;
    m_Is_activeIsSet = true;
}

bool LicenseFilterDto::isActiveIsSet() const
{
    return m_Is_activeIsSet;
}

void LicenseFilterDto::unsetIs_active()
{
    m_Is_activeIsSet = false;
}
utility::string_t LicenseFilterDto::getKeySearch() const
{
    return m_Key_search;
}

void LicenseFilterDto::setKeySearch(const utility::string_t& value)
{
    m_Key_search = value;
    m_Key_searchIsSet = true;
}

bool LicenseFilterDto::keySearchIsSet() const
{
    return m_Key_searchIsSet;
}

void LicenseFilterDto::unsetKey_search()
{
    m_Key_searchIsSet = false;
}
utility::string_t LicenseFilterDto::getProductFilter() const
{
    return m_Product_filter;
}

void LicenseFilterDto::setProductFilter(const utility::string_t& value)
{
    m_Product_filter = value;
    m_Product_filterIsSet = true;
}

bool LicenseFilterDto::productFilterIsSet() const
{
    return m_Product_filterIsSet;
}

void LicenseFilterDto::unsetProduct_filter()
{
    m_Product_filterIsSet = false;
}
utility::string_t LicenseFilterDto::getCustomerFilter() const
{
    return m_Customer_filter;
}

void LicenseFilterDto::setCustomerFilter(const utility::string_t& value)
{
    m_Customer_filter = value;
    m_Customer_filterIsSet = true;
}

bool LicenseFilterDto::customerFilterIsSet() const
{
    return m_Customer_filterIsSet;
}

void LicenseFilterDto::unsetCustomer_filter()
{
    m_Customer_filterIsSet = false;
}
std::vector<utility::string_t>& LicenseFilterDto::getCustomerNumberFilter()
{
    return m_Customer_number_filter;
}

void LicenseFilterDto::setCustomerNumberFilter(const std::vector<utility::string_t>& value)
{
    m_Customer_number_filter = value;
    m_Customer_number_filterIsSet = true;
}

bool LicenseFilterDto::customerNumberFilterIsSet() const
{
    return m_Customer_number_filterIsSet;
}

void LicenseFilterDto::unsetCustomer_number_filter()
{
    m_Customer_number_filterIsSet = false;
}
std::vector<utility::string_t>& LicenseFilterDto::getCustomerTypeFilter()
{
    return m_Customer_type_filter;
}

void LicenseFilterDto::setCustomerTypeFilter(const std::vector<utility::string_t>& value)
{
    m_Customer_type_filter = value;
    m_Customer_type_filterIsSet = true;
}

bool LicenseFilterDto::customerTypeFilterIsSet() const
{
    return m_Customer_type_filterIsSet;
}

void LicenseFilterDto::unsetCustomer_type_filter()
{
    m_Customer_type_filterIsSet = false;
}
std::vector<utility::string_t>& LicenseFilterDto::getResellerTypeFilter()
{
    return m_Reseller_type_filter;
}

void LicenseFilterDto::setResellerTypeFilter(const std::vector<utility::string_t>& value)
{
    m_Reseller_type_filter = value;
    m_Reseller_type_filterIsSet = true;
}

bool LicenseFilterDto::resellerTypeFilterIsSet() const
{
    return m_Reseller_type_filterIsSet;
}

void LicenseFilterDto::unsetReseller_type_filter()
{
    m_Reseller_type_filterIsSet = false;
}
std::vector<utility::string_t>& LicenseFilterDto::getTemplateFilter()
{
    return m_Template_filter;
}

void LicenseFilterDto::setTemplateFilter(const std::vector<utility::string_t>& value)
{
    m_Template_filter = value;
    m_Template_filterIsSet = true;
}

bool LicenseFilterDto::templateFilterIsSet() const
{
    return m_Template_filterIsSet;
}

void LicenseFilterDto::unsetTemplate_filter()
{
    m_Template_filterIsSet = false;
}
std::vector<utility::string_t>& LicenseFilterDto::getLicenseTypeFilter()
{
    return m_License_type_filter;
}

void LicenseFilterDto::setLicenseTypeFilter(const std::vector<utility::string_t>& value)
{
    m_License_type_filter = value;
    m_License_type_filterIsSet = true;
}

bool LicenseFilterDto::licenseTypeFilterIsSet() const
{
    return m_License_type_filterIsSet;
}

void LicenseFilterDto::unsetLicense_type_filter()
{
    m_License_type_filterIsSet = false;
}
std::vector<utility::string_t>& LicenseFilterDto::getOperatingSystemFilter()
{
    return m_Operating_system_filter;
}

void LicenseFilterDto::setOperatingSystemFilter(const std::vector<utility::string_t>& value)
{
    m_Operating_system_filter = value;
    m_Operating_system_filterIsSet = true;
}

bool LicenseFilterDto::operatingSystemFilterIsSet() const
{
    return m_Operating_system_filterIsSet;
}

void LicenseFilterDto::unsetOperating_system_filter()
{
    m_Operating_system_filterIsSet = false;
}
std::vector<utility::string_t>& LicenseFilterDto::getSoftwareVersionFilter()
{
    return m_Software_version_filter;
}

void LicenseFilterDto::setSoftwareVersionFilter(const std::vector<utility::string_t>& value)
{
    m_Software_version_filter = value;
    m_Software_version_filterIsSet = true;
}

bool LicenseFilterDto::softwareVersionFilterIsSet() const
{
    return m_Software_version_filterIsSet;
}

void LicenseFilterDto::unsetSoftware_version_filter()
{
    m_Software_version_filterIsSet = false;
}
bool LicenseFilterDto::isIsSoftwareVersionValid() const
{
    return m_Is_software_version_valid;
}

void LicenseFilterDto::setIsSoftwareVersionValid(bool value)
{
    m_Is_software_version_valid = value;
    m_Is_software_version_validIsSet = true;
}

bool LicenseFilterDto::isSoftwareVersionValidIsSet() const
{
    return m_Is_software_version_validIsSet;
}

void LicenseFilterDto::unsetIs_software_version_valid()
{
    m_Is_software_version_validIsSet = false;
}
std::vector<utility::string_t>& LicenseFilterDto::getFeatureFilter()
{
    return m_Feature_filter;
}

void LicenseFilterDto::setFeatureFilter(const std::vector<utility::string_t>& value)
{
    m_Feature_filter = value;
    m_Feature_filterIsSet = true;
}

bool LicenseFilterDto::featureFilterIsSet() const
{
    return m_Feature_filterIsSet;
}

void LicenseFilterDto::unsetFeature_filter()
{
    m_Feature_filterIsSet = false;
}
bool LicenseFilterDto::isIsFeatureActive() const
{
    return m_Is_feature_active;
}

void LicenseFilterDto::setIsFeatureActive(bool value)
{
    m_Is_feature_active = value;
    m_Is_feature_activeIsSet = true;
}

bool LicenseFilterDto::isFeatureActiveIsSet() const
{
    return m_Is_feature_activeIsSet;
}

void LicenseFilterDto::unsetIs_feature_active()
{
    m_Is_feature_activeIsSet = false;
}
utility::datetime LicenseFilterDto::getDateFilter() const
{
    return m_Date_filter;
}

void LicenseFilterDto::setDateFilter(const utility::datetime& value)
{
    m_Date_filter = value;
    m_Date_filterIsSet = true;
}

bool LicenseFilterDto::dateFilterIsSet() const
{
    return m_Date_filterIsSet;
}

void LicenseFilterDto::unsetDate_filter()
{
    m_Date_filterIsSet = false;
}
utility::string_t LicenseFilterDto::getDateFilterMode() const
{
    return m_Date_filter_mode;
}

void LicenseFilterDto::setDateFilterMode(const utility::string_t& value)
{
    m_Date_filter_mode = value;
    m_Date_filter_modeIsSet = true;
}

bool LicenseFilterDto::dateFilterModeIsSet() const
{
    return m_Date_filter_modeIsSet;
}

void LicenseFilterDto::unsetDate_filter_mode()
{
    m_Date_filter_modeIsSet = false;
}
bool LicenseFilterDto::isIsNormalToken() const
{
    return m_Is_normal_token;
}

void LicenseFilterDto::setIsNormalToken(bool value)
{
    m_Is_normal_token = value;
    m_Is_normal_tokenIsSet = true;
}

bool LicenseFilterDto::isNormalTokenIsSet() const
{
    return m_Is_normal_tokenIsSet;
}

void LicenseFilterDto::unsetIs_normal_token()
{
    m_Is_normal_tokenIsSet = false;
}
bool LicenseFilterDto::isIsGoodwillToken() const
{
    return m_Is_goodwill_token;
}

void LicenseFilterDto::setIsGoodwillToken(bool value)
{
    m_Is_goodwill_token = value;
    m_Is_goodwill_tokenIsSet = true;
}

bool LicenseFilterDto::isGoodwillTokenIsSet() const
{
    return m_Is_goodwill_tokenIsSet;
}

void LicenseFilterDto::unsetIs_goodwill_token()
{
    m_Is_goodwill_tokenIsSet = false;
}
bool LicenseFilterDto::isIsGroupValid() const
{
    return m_Is_group_valid;
}

void LicenseFilterDto::setIsGroupValid(bool value)
{
    m_Is_group_valid = value;
    m_Is_group_validIsSet = true;
}

bool LicenseFilterDto::isGroupValidIsSet() const
{
    return m_Is_group_validIsSet;
}

void LicenseFilterDto::unsetIs_group_valid()
{
    m_Is_group_validIsSet = false;
}
bool LicenseFilterDto::isIsAssignedToken() const
{
    return m_Is_assigned_token;
}

void LicenseFilterDto::setIsAssignedToken(bool value)
{
    m_Is_assigned_token = value;
    m_Is_assigned_tokenIsSet = true;
}

bool LicenseFilterDto::isAssignedTokenIsSet() const
{
    return m_Is_assigned_tokenIsSet;
}

void LicenseFilterDto::unsetIs_assigned_token()
{
    m_Is_assigned_tokenIsSet = false;
}
int32_t LicenseFilterDto::getGroupCountFilter() const
{
    return m_Group_count_filter;
}

void LicenseFilterDto::setGroupCountFilter(int32_t value)
{
    m_Group_count_filter = value;
    m_Group_count_filterIsSet = true;
}

bool LicenseFilterDto::groupCountFilterIsSet() const
{
    return m_Group_count_filterIsSet;
}

void LicenseFilterDto::unsetGroup_count_filter()
{
    m_Group_count_filterIsSet = false;
}
utility::string_t LicenseFilterDto::getGroupCountMode() const
{
    return m_Group_count_mode;
}

void LicenseFilterDto::setGroupCountMode(const utility::string_t& value)
{
    m_Group_count_mode = value;
    m_Group_count_modeIsSet = true;
}

bool LicenseFilterDto::groupCountModeIsSet() const
{
    return m_Group_count_modeIsSet;
}

void LicenseFilterDto::unsetGroup_count_mode()
{
    m_Group_count_modeIsSet = false;
}
std::shared_ptr<LicenseFilterSortType> LicenseFilterDto::getSortType() const
{
    return m_Sort_type;
}

void LicenseFilterDto::setSortType(const std::shared_ptr<LicenseFilterSortType>& value)
{
    m_Sort_type = value;
    m_Sort_typeIsSet = true;
}

bool LicenseFilterDto::sortTypeIsSet() const
{
    return m_Sort_typeIsSet;
}

void LicenseFilterDto::unsetSort_type()
{
    m_Sort_typeIsSet = false;
}
bool LicenseFilterDto::isSortOrder() const
{
    return m_Sort_order;
}

void LicenseFilterDto::setSortOrder(bool value)
{
    m_Sort_order = value;
    m_Sort_orderIsSet = true;
}

bool LicenseFilterDto::sortOrderIsSet() const
{
    return m_Sort_orderIsSet;
}

void LicenseFilterDto::unsetSort_order()
{
    m_Sort_orderIsSet = false;
}
std::vector<int32_t>& LicenseFilterDto::getLicenseTagFilter()
{
    return m_License_tag_filter;
}

void LicenseFilterDto::setLicenseTagFilter(std::vector<int32_t> value)
{
    m_License_tag_filter = value;
    m_License_tag_filterIsSet = true;
}

bool LicenseFilterDto::licenseTagFilterIsSet() const
{
    return m_License_tag_filterIsSet;
}

void LicenseFilterDto::unsetLicense_tag_filter()
{
    m_License_tag_filterIsSet = false;
}
std::vector<int32_t>& LicenseFilterDto::getTokenTagFilter()
{
    return m_Token_tag_filter;
}

void LicenseFilterDto::setTokenTagFilter(std::vector<int32_t> value)
{
    m_Token_tag_filter = value;
    m_Token_tag_filterIsSet = true;
}

bool LicenseFilterDto::tokenTagFilterIsSet() const
{
    return m_Token_tag_filterIsSet;
}

void LicenseFilterDto::unsetToken_tag_filter()
{
    m_Token_tag_filterIsSet = false;
}
std::vector<int32_t>& LicenseFilterDto::getCustomerTagFilter()
{
    return m_Customer_tag_filter;
}

void LicenseFilterDto::setCustomerTagFilter(std::vector<int32_t> value)
{
    m_Customer_tag_filter = value;
    m_Customer_tag_filterIsSet = true;
}

bool LicenseFilterDto::customerTagFilterIsSet() const
{
    return m_Customer_tag_filterIsSet;
}

void LicenseFilterDto::unsetCustomer_tag_filter()
{
    m_Customer_tag_filterIsSet = false;
}
std::shared_ptr<AnalyticalFieldFilterDto> LicenseFilterDto::getAnalyticalFieldFilter() const
{
    return m_Analytical_field_filter;
}

void LicenseFilterDto::setAnalyticalFieldFilter(const std::shared_ptr<AnalyticalFieldFilterDto>& value)
{
    m_Analytical_field_filter = value;
    m_Analytical_field_filterIsSet = true;
}

bool LicenseFilterDto::analyticalFieldFilterIsSet() const
{
    return m_Analytical_field_filterIsSet;
}

void LicenseFilterDto::unsetAnalytical_field_filter()
{
    m_Analytical_field_filterIsSet = false;
}
}
}
}
}


