/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/SessionRequestDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



SessionRequestDto::SessionRequestDto()
{
    m_License_id = utility::conversions::to_string_t("");
    m_License_idIsSet = false;
    m_Client_id = utility::conversions::to_string_t("");
    m_Client_idIsSet = false;
    m_Session_id = utility::conversions::to_string_t("");
    m_Session_idIsSet = false;
    m_User_id = utility::conversions::to_string_t("");
    m_User_idIsSet = false;
    m_Checkout_period = 0.0;
    m_Checkout_periodIsSet = false;
}

SessionRequestDto::~SessionRequestDto()
{
}

void SessionRequestDto::validate()
{
    // TODO: implement validation
}

web::json::value SessionRequestDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_License_idIsSet)
    {
        val[utility::conversions::to_string_t(U("license_id"))] = ModelBase::toJson(m_License_id);
    }
    if(m_Client_idIsSet)
    {
        val[utility::conversions::to_string_t(U("client_id"))] = ModelBase::toJson(m_Client_id);
    }
    if(m_Session_idIsSet)
    {
        val[utility::conversions::to_string_t(U("session_id"))] = ModelBase::toJson(m_Session_id);
    }
    if(m_User_idIsSet)
    {
        val[utility::conversions::to_string_t(U("user_id"))] = ModelBase::toJson(m_User_id);
    }
    if(m_Checkout_periodIsSet)
    {
        val[utility::conversions::to_string_t(U("checkout_period"))] = ModelBase::toJson(m_Checkout_period);
    }

    return val;
}

bool SessionRequestDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("license_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("license_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLicenseId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenseId);
            setLicenseId(refVal_setLicenseId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("client_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("client_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClientId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClientId);
            setClientId(refVal_setClientId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("session_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("session_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSessionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSessionId);
            setSessionId(refVal_setSessionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("user_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("user_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserId);
            setUserId(refVal_setUserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("checkout_period"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("checkout_period")));
        if(!fieldValue.is_null())
        {
            double refVal_setCheckoutPeriod;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCheckoutPeriod);
            setCheckoutPeriod(refVal_setCheckoutPeriod);
        }
    }
    return ok;
}

void SessionRequestDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_License_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("license_id")), m_License_id));
    }
    if(m_Client_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("client_id")), m_Client_id));
    }
    if(m_Session_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("session_id")), m_Session_id));
    }
    if(m_User_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("user_id")), m_User_id));
    }
    if(m_Checkout_periodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("checkout_period")), m_Checkout_period));
    }
}

bool SessionRequestDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("license_id"))))
    {
        utility::string_t refVal_setLicenseId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("license_id"))), refVal_setLicenseId );
        setLicenseId(refVal_setLicenseId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("client_id"))))
    {
        utility::string_t refVal_setClientId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("client_id"))), refVal_setClientId );
        setClientId(refVal_setClientId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("session_id"))))
    {
        utility::string_t refVal_setSessionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("session_id"))), refVal_setSessionId );
        setSessionId(refVal_setSessionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("user_id"))))
    {
        utility::string_t refVal_setUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("user_id"))), refVal_setUserId );
        setUserId(refVal_setUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("checkout_period"))))
    {
        double refVal_setCheckoutPeriod;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("checkout_period"))), refVal_setCheckoutPeriod );
        setCheckoutPeriod(refVal_setCheckoutPeriod);
    }
    return ok;
}

utility::string_t SessionRequestDto::getLicenseId() const
{
    return m_License_id;
}

void SessionRequestDto::setLicenseId(const utility::string_t& value)
{
    m_License_id = value;
    m_License_idIsSet = true;
}

bool SessionRequestDto::licenseIdIsSet() const
{
    return m_License_idIsSet;
}

void SessionRequestDto::unsetLicense_id()
{
    m_License_idIsSet = false;
}
utility::string_t SessionRequestDto::getClientId() const
{
    return m_Client_id;
}

void SessionRequestDto::setClientId(const utility::string_t& value)
{
    m_Client_id = value;
    m_Client_idIsSet = true;
}

bool SessionRequestDto::clientIdIsSet() const
{
    return m_Client_idIsSet;
}

void SessionRequestDto::unsetClient_id()
{
    m_Client_idIsSet = false;
}
utility::string_t SessionRequestDto::getSessionId() const
{
    return m_Session_id;
}

void SessionRequestDto::setSessionId(const utility::string_t& value)
{
    m_Session_id = value;
    m_Session_idIsSet = true;
}

bool SessionRequestDto::sessionIdIsSet() const
{
    return m_Session_idIsSet;
}

void SessionRequestDto::unsetSession_id()
{
    m_Session_idIsSet = false;
}
utility::string_t SessionRequestDto::getUserId() const
{
    return m_User_id;
}

void SessionRequestDto::setUserId(const utility::string_t& value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}

bool SessionRequestDto::userIdIsSet() const
{
    return m_User_idIsSet;
}

void SessionRequestDto::unsetUser_id()
{
    m_User_idIsSet = false;
}
double SessionRequestDto::getCheckoutPeriod() const
{
    return m_Checkout_period;
}

void SessionRequestDto::setCheckoutPeriod(double value)
{
    m_Checkout_period = value;
    m_Checkout_periodIsSet = true;
}

bool SessionRequestDto::checkoutPeriodIsSet() const
{
    return m_Checkout_periodIsSet;
}

void SessionRequestDto::unsetCheckout_period()
{
    m_Checkout_periodIsSet = false;
}
}
}
}
}


