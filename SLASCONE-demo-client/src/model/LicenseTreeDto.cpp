/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/LicenseTreeDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



LicenseTreeDto::LicenseTreeDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Legacy_license_key = utility::conversions::to_string_t("");
    m_Legacy_license_keyIsSet = false;
    m_Is_active = false;
    m_Is_activeIsSet = false;
    m_Is_software_release_valid = false;
    m_Is_software_release_validIsSet = false;
    m_Is_group_valid = false;
    m_Is_group_validIsSet = false;
    m_Customer_id = utility::conversions::to_string_t("");
    m_Customer_idIsSet = false;
    m_Customer_number = utility::conversions::to_string_t("");
    m_Customer_numberIsSet = false;
    m_Customer_email = utility::conversions::to_string_t("");
    m_Customer_emailIsSet = false;
    m_Company_name = utility::conversions::to_string_t("");
    m_Company_nameIsSet = false;
    m_Customer_type = utility::conversions::to_string_t("");
    m_Customer_typeIsSet = false;
    m_Product_id = utility::conversions::to_string_t("");
    m_Product_idIsSet = false;
    m_Product_name = utility::conversions::to_string_t("");
    m_Product_nameIsSet = false;
    m_Template_id = utility::conversions::to_string_t("");
    m_Template_idIsSet = false;
    m_Template_name = utility::conversions::to_string_t("");
    m_Template_nameIsSet = false;
    m_Software_release = utility::conversions::to_string_t("");
    m_Software_releaseIsSet = false;
    m_License_type_name = utility::conversions::to_string_t("");
    m_License_type_nameIsSet = false;
    m_Expiration_modeIsSet = false;
    m_Token_limit = 0;
    m_Token_limitIsSet = false;
    m_Goodwill_token_limit = 0;
    m_Goodwill_token_limitIsSet = false;
    m_Floating_token_limit = 0;
    m_Floating_token_limitIsSet = false;
    m_User_limit = 0;
    m_User_limitIsSet = false;
    m_Active_users = 0;
    m_Active_usersIsSet = false;
    m_Active_floating_tokens = 0;
    m_Active_floating_tokensIsSet = false;
    m_Date_of_issue_utc = utility::datetime();
    m_Date_of_issue_utcIsSet = false;
    m_Expiration_date_utc = utility::datetime();
    m_Expiration_date_utcIsSet = false;
    m_Created_date_utc = utility::datetime();
    m_Created_date_utcIsSet = false;
    m_Last_modified_by = utility::conversions::to_string_t("");
    m_Last_modified_byIsSet = false;
    m_Modified_date_utc = utility::datetime();
    m_Modified_date_utcIsSet = false;
    m_Prioritized_keyIsSet = false;
    m_Offline_modeIsSet = false;
    m_Group_count = 0;
    m_Group_countIsSet = false;
    m_Is_temporary = false;
    m_Is_temporaryIsSet = false;
    m_Has_consumption_heartbeats = false;
    m_Has_consumption_heartbeatsIsSet = false;
    m_Provisioning_modeIsSet = false;
    m_Client_typeIsSet = false;
    m_Tag_assignmentsIsSet = false;
}

LicenseTreeDto::~LicenseTreeDto()
{
}

void LicenseTreeDto::validate()
{
    // TODO: implement validation
}

web::json::value LicenseTreeDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_Legacy_license_keyIsSet)
    {
        val[utility::conversions::to_string_t(U("legacy_license_key"))] = ModelBase::toJson(m_Legacy_license_key);
    }
    if(m_Is_activeIsSet)
    {
        val[utility::conversions::to_string_t(U("is_active"))] = ModelBase::toJson(m_Is_active);
    }
    if(m_Is_software_release_validIsSet)
    {
        val[utility::conversions::to_string_t(U("is_software_release_valid"))] = ModelBase::toJson(m_Is_software_release_valid);
    }
    if(m_Is_group_validIsSet)
    {
        val[utility::conversions::to_string_t(U("is_group_valid"))] = ModelBase::toJson(m_Is_group_valid);
    }
    if(m_Customer_idIsSet)
    {
        val[utility::conversions::to_string_t(U("customer_id"))] = ModelBase::toJson(m_Customer_id);
    }
    if(m_Customer_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("customer_number"))] = ModelBase::toJson(m_Customer_number);
    }
    if(m_Customer_emailIsSet)
    {
        val[utility::conversions::to_string_t(U("customer_email"))] = ModelBase::toJson(m_Customer_email);
    }
    if(m_Company_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("company_name"))] = ModelBase::toJson(m_Company_name);
    }
    if(m_Customer_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("customer_type"))] = ModelBase::toJson(m_Customer_type);
    }
    if(m_Product_idIsSet)
    {
        val[utility::conversions::to_string_t(U("product_id"))] = ModelBase::toJson(m_Product_id);
    }
    if(m_Product_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("product_name"))] = ModelBase::toJson(m_Product_name);
    }
    if(m_Template_idIsSet)
    {
        val[utility::conversions::to_string_t(U("template_id"))] = ModelBase::toJson(m_Template_id);
    }
    if(m_Template_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("template_name"))] = ModelBase::toJson(m_Template_name);
    }
    if(m_Software_releaseIsSet)
    {
        val[utility::conversions::to_string_t(U("software_release"))] = ModelBase::toJson(m_Software_release);
    }
    if(m_License_type_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("license_type_name"))] = ModelBase::toJson(m_License_type_name);
    }
    if(m_Expiration_modeIsSet)
    {
        val[utility::conversions::to_string_t(U("expiration_mode"))] = ModelBase::toJson(m_Expiration_mode);
    }
    if(m_Token_limitIsSet)
    {
        val[utility::conversions::to_string_t(U("token_limit"))] = ModelBase::toJson(m_Token_limit);
    }
    if(m_Goodwill_token_limitIsSet)
    {
        val[utility::conversions::to_string_t(U("goodwill_token_limit"))] = ModelBase::toJson(m_Goodwill_token_limit);
    }
    if(m_Floating_token_limitIsSet)
    {
        val[utility::conversions::to_string_t(U("floating_token_limit"))] = ModelBase::toJson(m_Floating_token_limit);
    }
    if(m_User_limitIsSet)
    {
        val[utility::conversions::to_string_t(U("user_limit"))] = ModelBase::toJson(m_User_limit);
    }
    if(m_Active_usersIsSet)
    {
        val[utility::conversions::to_string_t(U("active_users"))] = ModelBase::toJson(m_Active_users);
    }
    if(m_Active_floating_tokensIsSet)
    {
        val[utility::conversions::to_string_t(U("active_floating_tokens"))] = ModelBase::toJson(m_Active_floating_tokens);
    }
    if(m_Date_of_issue_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("date_of_issue_utc"))] = ModelBase::toJson(m_Date_of_issue_utc);
    }
    if(m_Expiration_date_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("expiration_date_utc"))] = ModelBase::toJson(m_Expiration_date_utc);
    }
    if(m_Created_date_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("created_date_utc"))] = ModelBase::toJson(m_Created_date_utc);
    }
    if(m_Last_modified_byIsSet)
    {
        val[utility::conversions::to_string_t(U("last_modified_by"))] = ModelBase::toJson(m_Last_modified_by);
    }
    if(m_Modified_date_utcIsSet)
    {
        val[utility::conversions::to_string_t(U("modified_date_utc"))] = ModelBase::toJson(m_Modified_date_utc);
    }
    if(m_Prioritized_keyIsSet)
    {
        val[utility::conversions::to_string_t(U("prioritized_key"))] = ModelBase::toJson(m_Prioritized_key);
    }
    if(m_Offline_modeIsSet)
    {
        val[utility::conversions::to_string_t(U("offline_mode"))] = ModelBase::toJson(m_Offline_mode);
    }
    if(m_Group_countIsSet)
    {
        val[utility::conversions::to_string_t(U("group_count"))] = ModelBase::toJson(m_Group_count);
    }
    if(m_Is_temporaryIsSet)
    {
        val[utility::conversions::to_string_t(U("is_temporary"))] = ModelBase::toJson(m_Is_temporary);
    }
    if(m_Has_consumption_heartbeatsIsSet)
    {
        val[utility::conversions::to_string_t(U("has_consumption_heartbeats"))] = ModelBase::toJson(m_Has_consumption_heartbeats);
    }
    if(m_Provisioning_modeIsSet)
    {
        val[utility::conversions::to_string_t(U("provisioning_mode"))] = ModelBase::toJson(m_Provisioning_mode);
    }
    if(m_Client_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("client_type"))] = ModelBase::toJson(m_Client_type);
    }
    if(m_Tag_assignmentsIsSet)
    {
        val[utility::conversions::to_string_t(U("tag_assignments"))] = ModelBase::toJson(m_Tag_assignments);
    }

    return val;
}

bool LicenseTreeDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("legacy_license_key"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("legacy_license_key")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLegacyLicenseKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLegacyLicenseKey);
            setLegacyLicenseKey(refVal_setLegacyLicenseKey);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_active"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_active")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsActive;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsActive);
            setIsActive(refVal_setIsActive);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_software_release_valid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_software_release_valid")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsSoftwareReleaseValid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsSoftwareReleaseValid);
            setIsSoftwareReleaseValid(refVal_setIsSoftwareReleaseValid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_group_valid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_group_valid")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsGroupValid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsGroupValid);
            setIsGroupValid(refVal_setIsGroupValid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("customer_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("customer_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCustomerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomerId);
            setCustomerId(refVal_setCustomerId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("customer_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("customer_number")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCustomerNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomerNumber);
            setCustomerNumber(refVal_setCustomerNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("customer_email"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("customer_email")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCustomerEmail;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomerEmail);
            setCustomerEmail(refVal_setCustomerEmail);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("company_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("company_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCompanyName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCompanyName);
            setCompanyName(refVal_setCompanyName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("customer_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("customer_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCustomerType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomerType);
            setCustomerType(refVal_setCustomerType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("product_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("product_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProductId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProductId);
            setProductId(refVal_setProductId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("product_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("product_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProductName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProductName);
            setProductName(refVal_setProductName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("template_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("template_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTemplateId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTemplateId);
            setTemplateId(refVal_setTemplateId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("template_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("template_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTemplateName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTemplateName);
            setTemplateName(refVal_setTemplateName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("software_release"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("software_release")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSoftwareRelease;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSoftwareRelease);
            setSoftwareRelease(refVal_setSoftwareRelease);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("license_type_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("license_type_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLicenseTypeName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenseTypeName);
            setLicenseTypeName(refVal_setLicenseTypeName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expiration_mode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expiration_mode")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ExpirationMode> refVal_setExpirationMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExpirationMode);
            setExpirationMode(refVal_setExpirationMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("token_limit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("token_limit")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTokenLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTokenLimit);
            setTokenLimit(refVal_setTokenLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("goodwill_token_limit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("goodwill_token_limit")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setGoodwillTokenLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGoodwillTokenLimit);
            setGoodwillTokenLimit(refVal_setGoodwillTokenLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("floating_token_limit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("floating_token_limit")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFloatingTokenLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFloatingTokenLimit);
            setFloatingTokenLimit(refVal_setFloatingTokenLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("user_limit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("user_limit")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setUserLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserLimit);
            setUserLimit(refVal_setUserLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("active_users"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("active_users")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setActiveUsers;
            ok &= ModelBase::fromJson(fieldValue, refVal_setActiveUsers);
            setActiveUsers(refVal_setActiveUsers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("active_floating_tokens"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("active_floating_tokens")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setActiveFloatingTokens;
            ok &= ModelBase::fromJson(fieldValue, refVal_setActiveFloatingTokens);
            setActiveFloatingTokens(refVal_setActiveFloatingTokens);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("date_of_issue_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("date_of_issue_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDateOfIssueUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateOfIssueUtc);
            setDateOfIssueUtc(refVal_setDateOfIssueUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expiration_date_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expiration_date_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setExpirationDateUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExpirationDateUtc);
            setExpirationDateUtc(refVal_setExpirationDateUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_date_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_date_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedDateUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedDateUtc);
            setCreatedDateUtc(refVal_setCreatedDateUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("last_modified_by"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("last_modified_by")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLastModifiedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastModifiedBy);
            setLastModifiedBy(refVal_setLastModifiedBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("modified_date_utc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("modified_date_utc")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setModifiedDateUtc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModifiedDateUtc);
            setModifiedDateUtc(refVal_setModifiedDateUtc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("prioritized_key"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("prioritized_key")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PrioritizedKeyMode> refVal_setPrioritizedKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrioritizedKey);
            setPrioritizedKey(refVal_setPrioritizedKey);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("offline_mode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("offline_mode")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OfflineLicensing> refVal_setOfflineMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOfflineMode);
            setOfflineMode(refVal_setOfflineMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("group_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("group_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setGroupCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGroupCount);
            setGroupCount(refVal_setGroupCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_temporary"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_temporary")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsTemporary;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsTemporary);
            setIsTemporary(refVal_setIsTemporary);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("has_consumption_heartbeats"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("has_consumption_heartbeats")));
        if(!fieldValue.is_null())
        {
            bool refVal_setHasConsumptionHeartbeats;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHasConsumptionHeartbeats);
            setHasConsumptionHeartbeats(refVal_setHasConsumptionHeartbeats);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("provisioning_mode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("provisioning_mode")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ProvisioningMode> refVal_setProvisioningMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProvisioningMode);
            setProvisioningMode(refVal_setProvisioningMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("client_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("client_type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ClientType> refVal_setClientType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClientType);
            setClientType(refVal_setClientType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tag_assignments"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tag_assignments")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<TagAssignmentDto>> refVal_setTagAssignments;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTagAssignments);
            setTagAssignments(refVal_setTagAssignments);
        }
    }
    return ok;
}

void LicenseTreeDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_Legacy_license_keyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("legacy_license_key")), m_Legacy_license_key));
    }
    if(m_Is_activeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_active")), m_Is_active));
    }
    if(m_Is_software_release_validIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_software_release_valid")), m_Is_software_release_valid));
    }
    if(m_Is_group_validIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_group_valid")), m_Is_group_valid));
    }
    if(m_Customer_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("customer_id")), m_Customer_id));
    }
    if(m_Customer_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("customer_number")), m_Customer_number));
    }
    if(m_Customer_emailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("customer_email")), m_Customer_email));
    }
    if(m_Company_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("company_name")), m_Company_name));
    }
    if(m_Customer_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("customer_type")), m_Customer_type));
    }
    if(m_Product_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("product_id")), m_Product_id));
    }
    if(m_Product_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("product_name")), m_Product_name));
    }
    if(m_Template_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("template_id")), m_Template_id));
    }
    if(m_Template_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("template_name")), m_Template_name));
    }
    if(m_Software_releaseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("software_release")), m_Software_release));
    }
    if(m_License_type_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("license_type_name")), m_License_type_name));
    }
    if(m_Expiration_modeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expiration_mode")), m_Expiration_mode));
    }
    if(m_Token_limitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("token_limit")), m_Token_limit));
    }
    if(m_Goodwill_token_limitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("goodwill_token_limit")), m_Goodwill_token_limit));
    }
    if(m_Floating_token_limitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("floating_token_limit")), m_Floating_token_limit));
    }
    if(m_User_limitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("user_limit")), m_User_limit));
    }
    if(m_Active_usersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("active_users")), m_Active_users));
    }
    if(m_Active_floating_tokensIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("active_floating_tokens")), m_Active_floating_tokens));
    }
    if(m_Date_of_issue_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("date_of_issue_utc")), m_Date_of_issue_utc));
    }
    if(m_Expiration_date_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expiration_date_utc")), m_Expiration_date_utc));
    }
    if(m_Created_date_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_date_utc")), m_Created_date_utc));
    }
    if(m_Last_modified_byIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("last_modified_by")), m_Last_modified_by));
    }
    if(m_Modified_date_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("modified_date_utc")), m_Modified_date_utc));
    }
    if(m_Prioritized_keyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("prioritized_key")), m_Prioritized_key));
    }
    if(m_Offline_modeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("offline_mode")), m_Offline_mode));
    }
    if(m_Group_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("group_count")), m_Group_count));
    }
    if(m_Is_temporaryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_temporary")), m_Is_temporary));
    }
    if(m_Has_consumption_heartbeatsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("has_consumption_heartbeats")), m_Has_consumption_heartbeats));
    }
    if(m_Provisioning_modeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("provisioning_mode")), m_Provisioning_mode));
    }
    if(m_Client_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("client_type")), m_Client_type));
    }
    if(m_Tag_assignmentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tag_assignments")), m_Tag_assignments));
    }
}

bool LicenseTreeDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("legacy_license_key"))))
    {
        utility::string_t refVal_setLegacyLicenseKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("legacy_license_key"))), refVal_setLegacyLicenseKey );
        setLegacyLicenseKey(refVal_setLegacyLicenseKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_active"))))
    {
        bool refVal_setIsActive;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_active"))), refVal_setIsActive );
        setIsActive(refVal_setIsActive);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_software_release_valid"))))
    {
        bool refVal_setIsSoftwareReleaseValid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_software_release_valid"))), refVal_setIsSoftwareReleaseValid );
        setIsSoftwareReleaseValid(refVal_setIsSoftwareReleaseValid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_group_valid"))))
    {
        bool refVal_setIsGroupValid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_group_valid"))), refVal_setIsGroupValid );
        setIsGroupValid(refVal_setIsGroupValid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("customer_id"))))
    {
        utility::string_t refVal_setCustomerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("customer_id"))), refVal_setCustomerId );
        setCustomerId(refVal_setCustomerId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("customer_number"))))
    {
        utility::string_t refVal_setCustomerNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("customer_number"))), refVal_setCustomerNumber );
        setCustomerNumber(refVal_setCustomerNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("customer_email"))))
    {
        utility::string_t refVal_setCustomerEmail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("customer_email"))), refVal_setCustomerEmail );
        setCustomerEmail(refVal_setCustomerEmail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("company_name"))))
    {
        utility::string_t refVal_setCompanyName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("company_name"))), refVal_setCompanyName );
        setCompanyName(refVal_setCompanyName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("customer_type"))))
    {
        utility::string_t refVal_setCustomerType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("customer_type"))), refVal_setCustomerType );
        setCustomerType(refVal_setCustomerType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("product_id"))))
    {
        utility::string_t refVal_setProductId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("product_id"))), refVal_setProductId );
        setProductId(refVal_setProductId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("product_name"))))
    {
        utility::string_t refVal_setProductName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("product_name"))), refVal_setProductName );
        setProductName(refVal_setProductName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("template_id"))))
    {
        utility::string_t refVal_setTemplateId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("template_id"))), refVal_setTemplateId );
        setTemplateId(refVal_setTemplateId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("template_name"))))
    {
        utility::string_t refVal_setTemplateName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("template_name"))), refVal_setTemplateName );
        setTemplateName(refVal_setTemplateName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("software_release"))))
    {
        utility::string_t refVal_setSoftwareRelease;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("software_release"))), refVal_setSoftwareRelease );
        setSoftwareRelease(refVal_setSoftwareRelease);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("license_type_name"))))
    {
        utility::string_t refVal_setLicenseTypeName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("license_type_name"))), refVal_setLicenseTypeName );
        setLicenseTypeName(refVal_setLicenseTypeName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expiration_mode"))))
    {
        std::shared_ptr<ExpirationMode> refVal_setExpirationMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expiration_mode"))), refVal_setExpirationMode );
        setExpirationMode(refVal_setExpirationMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("token_limit"))))
    {
        int32_t refVal_setTokenLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("token_limit"))), refVal_setTokenLimit );
        setTokenLimit(refVal_setTokenLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("goodwill_token_limit"))))
    {
        int32_t refVal_setGoodwillTokenLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("goodwill_token_limit"))), refVal_setGoodwillTokenLimit );
        setGoodwillTokenLimit(refVal_setGoodwillTokenLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("floating_token_limit"))))
    {
        int32_t refVal_setFloatingTokenLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("floating_token_limit"))), refVal_setFloatingTokenLimit );
        setFloatingTokenLimit(refVal_setFloatingTokenLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("user_limit"))))
    {
        int32_t refVal_setUserLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("user_limit"))), refVal_setUserLimit );
        setUserLimit(refVal_setUserLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("active_users"))))
    {
        int32_t refVal_setActiveUsers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("active_users"))), refVal_setActiveUsers );
        setActiveUsers(refVal_setActiveUsers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("active_floating_tokens"))))
    {
        int32_t refVal_setActiveFloatingTokens;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("active_floating_tokens"))), refVal_setActiveFloatingTokens );
        setActiveFloatingTokens(refVal_setActiveFloatingTokens);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("date_of_issue_utc"))))
    {
        utility::datetime refVal_setDateOfIssueUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("date_of_issue_utc"))), refVal_setDateOfIssueUtc );
        setDateOfIssueUtc(refVal_setDateOfIssueUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expiration_date_utc"))))
    {
        utility::datetime refVal_setExpirationDateUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expiration_date_utc"))), refVal_setExpirationDateUtc );
        setExpirationDateUtc(refVal_setExpirationDateUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_date_utc"))))
    {
        utility::datetime refVal_setCreatedDateUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_date_utc"))), refVal_setCreatedDateUtc );
        setCreatedDateUtc(refVal_setCreatedDateUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("last_modified_by"))))
    {
        utility::string_t refVal_setLastModifiedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("last_modified_by"))), refVal_setLastModifiedBy );
        setLastModifiedBy(refVal_setLastModifiedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("modified_date_utc"))))
    {
        utility::datetime refVal_setModifiedDateUtc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("modified_date_utc"))), refVal_setModifiedDateUtc );
        setModifiedDateUtc(refVal_setModifiedDateUtc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("prioritized_key"))))
    {
        std::shared_ptr<PrioritizedKeyMode> refVal_setPrioritizedKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("prioritized_key"))), refVal_setPrioritizedKey );
        setPrioritizedKey(refVal_setPrioritizedKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("offline_mode"))))
    {
        std::shared_ptr<OfflineLicensing> refVal_setOfflineMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("offline_mode"))), refVal_setOfflineMode );
        setOfflineMode(refVal_setOfflineMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("group_count"))))
    {
        int32_t refVal_setGroupCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("group_count"))), refVal_setGroupCount );
        setGroupCount(refVal_setGroupCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_temporary"))))
    {
        bool refVal_setIsTemporary;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_temporary"))), refVal_setIsTemporary );
        setIsTemporary(refVal_setIsTemporary);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("has_consumption_heartbeats"))))
    {
        bool refVal_setHasConsumptionHeartbeats;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("has_consumption_heartbeats"))), refVal_setHasConsumptionHeartbeats );
        setHasConsumptionHeartbeats(refVal_setHasConsumptionHeartbeats);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("provisioning_mode"))))
    {
        std::shared_ptr<ProvisioningMode> refVal_setProvisioningMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("provisioning_mode"))), refVal_setProvisioningMode );
        setProvisioningMode(refVal_setProvisioningMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("client_type"))))
    {
        std::shared_ptr<ClientType> refVal_setClientType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("client_type"))), refVal_setClientType );
        setClientType(refVal_setClientType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tag_assignments"))))
    {
        std::vector<std::shared_ptr<TagAssignmentDto>> refVal_setTagAssignments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tag_assignments"))), refVal_setTagAssignments );
        setTagAssignments(refVal_setTagAssignments);
    }
    return ok;
}

utility::string_t LicenseTreeDto::getId() const
{
    return m_Id;
}

void LicenseTreeDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool LicenseTreeDto::idIsSet() const
{
    return m_IdIsSet;
}

void LicenseTreeDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t LicenseTreeDto::getDescription() const
{
    return m_Description;
}

void LicenseTreeDto::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool LicenseTreeDto::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void LicenseTreeDto::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t LicenseTreeDto::getLegacyLicenseKey() const
{
    return m_Legacy_license_key;
}

void LicenseTreeDto::setLegacyLicenseKey(const utility::string_t& value)
{
    m_Legacy_license_key = value;
    m_Legacy_license_keyIsSet = true;
}

bool LicenseTreeDto::legacyLicenseKeyIsSet() const
{
    return m_Legacy_license_keyIsSet;
}

void LicenseTreeDto::unsetLegacy_license_key()
{
    m_Legacy_license_keyIsSet = false;
}
bool LicenseTreeDto::isIsActive() const
{
    return m_Is_active;
}

void LicenseTreeDto::setIsActive(bool value)
{
    m_Is_active = value;
    m_Is_activeIsSet = true;
}

bool LicenseTreeDto::isActiveIsSet() const
{
    return m_Is_activeIsSet;
}

void LicenseTreeDto::unsetIs_active()
{
    m_Is_activeIsSet = false;
}
bool LicenseTreeDto::isIsSoftwareReleaseValid() const
{
    return m_Is_software_release_valid;
}

void LicenseTreeDto::setIsSoftwareReleaseValid(bool value)
{
    m_Is_software_release_valid = value;
    m_Is_software_release_validIsSet = true;
}

bool LicenseTreeDto::isSoftwareReleaseValidIsSet() const
{
    return m_Is_software_release_validIsSet;
}

void LicenseTreeDto::unsetIs_software_release_valid()
{
    m_Is_software_release_validIsSet = false;
}
bool LicenseTreeDto::isIsGroupValid() const
{
    return m_Is_group_valid;
}

void LicenseTreeDto::setIsGroupValid(bool value)
{
    m_Is_group_valid = value;
    m_Is_group_validIsSet = true;
}

bool LicenseTreeDto::isGroupValidIsSet() const
{
    return m_Is_group_validIsSet;
}

void LicenseTreeDto::unsetIs_group_valid()
{
    m_Is_group_validIsSet = false;
}
utility::string_t LicenseTreeDto::getCustomerId() const
{
    return m_Customer_id;
}

void LicenseTreeDto::setCustomerId(const utility::string_t& value)
{
    m_Customer_id = value;
    m_Customer_idIsSet = true;
}

bool LicenseTreeDto::customerIdIsSet() const
{
    return m_Customer_idIsSet;
}

void LicenseTreeDto::unsetCustomer_id()
{
    m_Customer_idIsSet = false;
}
utility::string_t LicenseTreeDto::getCustomerNumber() const
{
    return m_Customer_number;
}

void LicenseTreeDto::setCustomerNumber(const utility::string_t& value)
{
    m_Customer_number = value;
    m_Customer_numberIsSet = true;
}

bool LicenseTreeDto::customerNumberIsSet() const
{
    return m_Customer_numberIsSet;
}

void LicenseTreeDto::unsetCustomer_number()
{
    m_Customer_numberIsSet = false;
}
utility::string_t LicenseTreeDto::getCustomerEmail() const
{
    return m_Customer_email;
}

void LicenseTreeDto::setCustomerEmail(const utility::string_t& value)
{
    m_Customer_email = value;
    m_Customer_emailIsSet = true;
}

bool LicenseTreeDto::customerEmailIsSet() const
{
    return m_Customer_emailIsSet;
}

void LicenseTreeDto::unsetCustomer_email()
{
    m_Customer_emailIsSet = false;
}
utility::string_t LicenseTreeDto::getCompanyName() const
{
    return m_Company_name;
}

void LicenseTreeDto::setCompanyName(const utility::string_t& value)
{
    m_Company_name = value;
    m_Company_nameIsSet = true;
}

bool LicenseTreeDto::companyNameIsSet() const
{
    return m_Company_nameIsSet;
}

void LicenseTreeDto::unsetCompany_name()
{
    m_Company_nameIsSet = false;
}
utility::string_t LicenseTreeDto::getCustomerType() const
{
    return m_Customer_type;
}

void LicenseTreeDto::setCustomerType(const utility::string_t& value)
{
    m_Customer_type = value;
    m_Customer_typeIsSet = true;
}

bool LicenseTreeDto::customerTypeIsSet() const
{
    return m_Customer_typeIsSet;
}

void LicenseTreeDto::unsetCustomer_type()
{
    m_Customer_typeIsSet = false;
}
utility::string_t LicenseTreeDto::getProductId() const
{
    return m_Product_id;
}

void LicenseTreeDto::setProductId(const utility::string_t& value)
{
    m_Product_id = value;
    m_Product_idIsSet = true;
}

bool LicenseTreeDto::productIdIsSet() const
{
    return m_Product_idIsSet;
}

void LicenseTreeDto::unsetProduct_id()
{
    m_Product_idIsSet = false;
}
utility::string_t LicenseTreeDto::getProductName() const
{
    return m_Product_name;
}

void LicenseTreeDto::setProductName(const utility::string_t& value)
{
    m_Product_name = value;
    m_Product_nameIsSet = true;
}

bool LicenseTreeDto::productNameIsSet() const
{
    return m_Product_nameIsSet;
}

void LicenseTreeDto::unsetProduct_name()
{
    m_Product_nameIsSet = false;
}
utility::string_t LicenseTreeDto::getTemplateId() const
{
    return m_Template_id;
}

void LicenseTreeDto::setTemplateId(const utility::string_t& value)
{
    m_Template_id = value;
    m_Template_idIsSet = true;
}

bool LicenseTreeDto::templateIdIsSet() const
{
    return m_Template_idIsSet;
}

void LicenseTreeDto::unsetTemplate_id()
{
    m_Template_idIsSet = false;
}
utility::string_t LicenseTreeDto::getTemplateName() const
{
    return m_Template_name;
}

void LicenseTreeDto::setTemplateName(const utility::string_t& value)
{
    m_Template_name = value;
    m_Template_nameIsSet = true;
}

bool LicenseTreeDto::templateNameIsSet() const
{
    return m_Template_nameIsSet;
}

void LicenseTreeDto::unsetTemplate_name()
{
    m_Template_nameIsSet = false;
}
utility::string_t LicenseTreeDto::getSoftwareRelease() const
{
    return m_Software_release;
}

void LicenseTreeDto::setSoftwareRelease(const utility::string_t& value)
{
    m_Software_release = value;
    m_Software_releaseIsSet = true;
}

bool LicenseTreeDto::softwareReleaseIsSet() const
{
    return m_Software_releaseIsSet;
}

void LicenseTreeDto::unsetSoftware_release()
{
    m_Software_releaseIsSet = false;
}
utility::string_t LicenseTreeDto::getLicenseTypeName() const
{
    return m_License_type_name;
}

void LicenseTreeDto::setLicenseTypeName(const utility::string_t& value)
{
    m_License_type_name = value;
    m_License_type_nameIsSet = true;
}

bool LicenseTreeDto::licenseTypeNameIsSet() const
{
    return m_License_type_nameIsSet;
}

void LicenseTreeDto::unsetLicense_type_name()
{
    m_License_type_nameIsSet = false;
}
std::shared_ptr<ExpirationMode> LicenseTreeDto::getExpirationMode() const
{
    return m_Expiration_mode;
}

void LicenseTreeDto::setExpirationMode(const std::shared_ptr<ExpirationMode>& value)
{
    m_Expiration_mode = value;
    m_Expiration_modeIsSet = true;
}

bool LicenseTreeDto::expirationModeIsSet() const
{
    return m_Expiration_modeIsSet;
}

void LicenseTreeDto::unsetExpiration_mode()
{
    m_Expiration_modeIsSet = false;
}
int32_t LicenseTreeDto::getTokenLimit() const
{
    return m_Token_limit;
}

void LicenseTreeDto::setTokenLimit(int32_t value)
{
    m_Token_limit = value;
    m_Token_limitIsSet = true;
}

bool LicenseTreeDto::tokenLimitIsSet() const
{
    return m_Token_limitIsSet;
}

void LicenseTreeDto::unsetToken_limit()
{
    m_Token_limitIsSet = false;
}
int32_t LicenseTreeDto::getGoodwillTokenLimit() const
{
    return m_Goodwill_token_limit;
}

void LicenseTreeDto::setGoodwillTokenLimit(int32_t value)
{
    m_Goodwill_token_limit = value;
    m_Goodwill_token_limitIsSet = true;
}

bool LicenseTreeDto::goodwillTokenLimitIsSet() const
{
    return m_Goodwill_token_limitIsSet;
}

void LicenseTreeDto::unsetGoodwill_token_limit()
{
    m_Goodwill_token_limitIsSet = false;
}
int32_t LicenseTreeDto::getFloatingTokenLimit() const
{
    return m_Floating_token_limit;
}

void LicenseTreeDto::setFloatingTokenLimit(int32_t value)
{
    m_Floating_token_limit = value;
    m_Floating_token_limitIsSet = true;
}

bool LicenseTreeDto::floatingTokenLimitIsSet() const
{
    return m_Floating_token_limitIsSet;
}

void LicenseTreeDto::unsetFloating_token_limit()
{
    m_Floating_token_limitIsSet = false;
}
int32_t LicenseTreeDto::getUserLimit() const
{
    return m_User_limit;
}

void LicenseTreeDto::setUserLimit(int32_t value)
{
    m_User_limit = value;
    m_User_limitIsSet = true;
}

bool LicenseTreeDto::userLimitIsSet() const
{
    return m_User_limitIsSet;
}

void LicenseTreeDto::unsetUser_limit()
{
    m_User_limitIsSet = false;
}
int32_t LicenseTreeDto::getActiveUsers() const
{
    return m_Active_users;
}

void LicenseTreeDto::setActiveUsers(int32_t value)
{
    m_Active_users = value;
    m_Active_usersIsSet = true;
}

bool LicenseTreeDto::activeUsersIsSet() const
{
    return m_Active_usersIsSet;
}

void LicenseTreeDto::unsetActive_users()
{
    m_Active_usersIsSet = false;
}
int32_t LicenseTreeDto::getActiveFloatingTokens() const
{
    return m_Active_floating_tokens;
}

void LicenseTreeDto::setActiveFloatingTokens(int32_t value)
{
    m_Active_floating_tokens = value;
    m_Active_floating_tokensIsSet = true;
}

bool LicenseTreeDto::activeFloatingTokensIsSet() const
{
    return m_Active_floating_tokensIsSet;
}

void LicenseTreeDto::unsetActive_floating_tokens()
{
    m_Active_floating_tokensIsSet = false;
}
utility::datetime LicenseTreeDto::getDateOfIssueUtc() const
{
    return m_Date_of_issue_utc;
}

void LicenseTreeDto::setDateOfIssueUtc(const utility::datetime& value)
{
    m_Date_of_issue_utc = value;
    m_Date_of_issue_utcIsSet = true;
}

bool LicenseTreeDto::dateOfIssueUtcIsSet() const
{
    return m_Date_of_issue_utcIsSet;
}

void LicenseTreeDto::unsetDate_of_issue_utc()
{
    m_Date_of_issue_utcIsSet = false;
}
utility::datetime LicenseTreeDto::getExpirationDateUtc() const
{
    return m_Expiration_date_utc;
}

void LicenseTreeDto::setExpirationDateUtc(const utility::datetime& value)
{
    m_Expiration_date_utc = value;
    m_Expiration_date_utcIsSet = true;
}

bool LicenseTreeDto::expirationDateUtcIsSet() const
{
    return m_Expiration_date_utcIsSet;
}

void LicenseTreeDto::unsetExpiration_date_utc()
{
    m_Expiration_date_utcIsSet = false;
}
utility::datetime LicenseTreeDto::getCreatedDateUtc() const
{
    return m_Created_date_utc;
}

void LicenseTreeDto::setCreatedDateUtc(const utility::datetime& value)
{
    m_Created_date_utc = value;
    m_Created_date_utcIsSet = true;
}

bool LicenseTreeDto::createdDateUtcIsSet() const
{
    return m_Created_date_utcIsSet;
}

void LicenseTreeDto::unsetCreated_date_utc()
{
    m_Created_date_utcIsSet = false;
}
utility::string_t LicenseTreeDto::getLastModifiedBy() const
{
    return m_Last_modified_by;
}

void LicenseTreeDto::setLastModifiedBy(const utility::string_t& value)
{
    m_Last_modified_by = value;
    m_Last_modified_byIsSet = true;
}

bool LicenseTreeDto::lastModifiedByIsSet() const
{
    return m_Last_modified_byIsSet;
}

void LicenseTreeDto::unsetLast_modified_by()
{
    m_Last_modified_byIsSet = false;
}
utility::datetime LicenseTreeDto::getModifiedDateUtc() const
{
    return m_Modified_date_utc;
}

void LicenseTreeDto::setModifiedDateUtc(const utility::datetime& value)
{
    m_Modified_date_utc = value;
    m_Modified_date_utcIsSet = true;
}

bool LicenseTreeDto::modifiedDateUtcIsSet() const
{
    return m_Modified_date_utcIsSet;
}

void LicenseTreeDto::unsetModified_date_utc()
{
    m_Modified_date_utcIsSet = false;
}
std::shared_ptr<PrioritizedKeyMode> LicenseTreeDto::getPrioritizedKey() const
{
    return m_Prioritized_key;
}

void LicenseTreeDto::setPrioritizedKey(const std::shared_ptr<PrioritizedKeyMode>& value)
{
    m_Prioritized_key = value;
    m_Prioritized_keyIsSet = true;
}

bool LicenseTreeDto::prioritizedKeyIsSet() const
{
    return m_Prioritized_keyIsSet;
}

void LicenseTreeDto::unsetPrioritized_key()
{
    m_Prioritized_keyIsSet = false;
}
std::shared_ptr<OfflineLicensing> LicenseTreeDto::getOfflineMode() const
{
    return m_Offline_mode;
}

void LicenseTreeDto::setOfflineMode(const std::shared_ptr<OfflineLicensing>& value)
{
    m_Offline_mode = value;
    m_Offline_modeIsSet = true;
}

bool LicenseTreeDto::offlineModeIsSet() const
{
    return m_Offline_modeIsSet;
}

void LicenseTreeDto::unsetOffline_mode()
{
    m_Offline_modeIsSet = false;
}
int32_t LicenseTreeDto::getGroupCount() const
{
    return m_Group_count;
}

void LicenseTreeDto::setGroupCount(int32_t value)
{
    m_Group_count = value;
    m_Group_countIsSet = true;
}

bool LicenseTreeDto::groupCountIsSet() const
{
    return m_Group_countIsSet;
}

void LicenseTreeDto::unsetGroup_count()
{
    m_Group_countIsSet = false;
}
bool LicenseTreeDto::isIsTemporary() const
{
    return m_Is_temporary;
}

void LicenseTreeDto::setIsTemporary(bool value)
{
    m_Is_temporary = value;
    m_Is_temporaryIsSet = true;
}

bool LicenseTreeDto::isTemporaryIsSet() const
{
    return m_Is_temporaryIsSet;
}

void LicenseTreeDto::unsetIs_temporary()
{
    m_Is_temporaryIsSet = false;
}
bool LicenseTreeDto::isHasConsumptionHeartbeats() const
{
    return m_Has_consumption_heartbeats;
}

void LicenseTreeDto::setHasConsumptionHeartbeats(bool value)
{
    m_Has_consumption_heartbeats = value;
    m_Has_consumption_heartbeatsIsSet = true;
}

bool LicenseTreeDto::hasConsumptionHeartbeatsIsSet() const
{
    return m_Has_consumption_heartbeatsIsSet;
}

void LicenseTreeDto::unsetHas_consumption_heartbeats()
{
    m_Has_consumption_heartbeatsIsSet = false;
}
std::shared_ptr<ProvisioningMode> LicenseTreeDto::getProvisioningMode() const
{
    return m_Provisioning_mode;
}

void LicenseTreeDto::setProvisioningMode(const std::shared_ptr<ProvisioningMode>& value)
{
    m_Provisioning_mode = value;
    m_Provisioning_modeIsSet = true;
}

bool LicenseTreeDto::provisioningModeIsSet() const
{
    return m_Provisioning_modeIsSet;
}

void LicenseTreeDto::unsetProvisioning_mode()
{
    m_Provisioning_modeIsSet = false;
}
std::shared_ptr<ClientType> LicenseTreeDto::getClientType() const
{
    return m_Client_type;
}

void LicenseTreeDto::setClientType(const std::shared_ptr<ClientType>& value)
{
    m_Client_type = value;
    m_Client_typeIsSet = true;
}

bool LicenseTreeDto::clientTypeIsSet() const
{
    return m_Client_typeIsSet;
}

void LicenseTreeDto::unsetClient_type()
{
    m_Client_typeIsSet = false;
}
std::vector<std::shared_ptr<TagAssignmentDto>>& LicenseTreeDto::getTagAssignments()
{
    return m_Tag_assignments;
}

void LicenseTreeDto::setTagAssignments(const std::vector<std::shared_ptr<TagAssignmentDto>>& value)
{
    m_Tag_assignments = value;
    m_Tag_assignmentsIsSet = true;
}

bool LicenseTreeDto::tagAssignmentsIsSet() const
{
    return m_Tag_assignmentsIsSet;
}

void LicenseTreeDto::unsetTag_assignments()
{
    m_Tag_assignmentsIsSet = false;
}
}
}
}
}


