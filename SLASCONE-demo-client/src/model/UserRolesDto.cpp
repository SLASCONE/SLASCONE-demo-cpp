/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SlasconeOpenApiClient/model/UserRolesDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



UserRolesDto::UserRolesDto()
{
    m_UserRolesIsSet = false;
    m_UserRoleContextIsSet = false;
}

UserRolesDto::~UserRolesDto()
{
}

void UserRolesDto::validate()
{
    // TODO: implement validation
}

web::json::value UserRolesDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_UserRolesIsSet)
    {
        val[utility::conversions::to_string_t(U("userRoles"))] = ModelBase::toJson(m_UserRoles);
    }
    if(m_UserRoleContextIsSet)
    {
        val[utility::conversions::to_string_t(U("userRoleContext"))] = ModelBase::toJson(m_UserRoleContext);
    }

    return val;
}

bool UserRolesDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("userRoles"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("userRoles")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<IsvUserRolesDto>> refVal_setUserRoles;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserRoles);
            setUserRoles(refVal_setUserRoles);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("userRoleContext"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("userRoleContext")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<UserRoleContextDto> refVal_setUserRoleContext;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserRoleContext);
            setUserRoleContext(refVal_setUserRoleContext);
        }
    }
    return ok;
}

void UserRolesDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_UserRolesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("userRoles")), m_UserRoles));
    }
    if(m_UserRoleContextIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("userRoleContext")), m_UserRoleContext));
    }
}

bool UserRolesDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("userRoles"))))
    {
        std::vector<std::shared_ptr<IsvUserRolesDto>> refVal_setUserRoles;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("userRoles"))), refVal_setUserRoles );
        setUserRoles(refVal_setUserRoles);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("userRoleContext"))))
    {
        std::shared_ptr<UserRoleContextDto> refVal_setUserRoleContext;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("userRoleContext"))), refVal_setUserRoleContext );
        setUserRoleContext(refVal_setUserRoleContext);
    }
    return ok;
}

std::vector<std::shared_ptr<IsvUserRolesDto>>& UserRolesDto::getUserRoles()
{
    return m_UserRoles;
}

void UserRolesDto::setUserRoles(const std::vector<std::shared_ptr<IsvUserRolesDto>>& value)
{
    m_UserRoles = value;
    m_UserRolesIsSet = true;
}

bool UserRolesDto::userRolesIsSet() const
{
    return m_UserRolesIsSet;
}

void UserRolesDto::unsetUserRoles()
{
    m_UserRolesIsSet = false;
}
std::shared_ptr<UserRoleContextDto> UserRolesDto::getUserRoleContext() const
{
    return m_UserRoleContext;
}

void UserRolesDto::setUserRoleContext(const std::shared_ptr<UserRoleContextDto>& value)
{
    m_UserRoleContext = value;
    m_UserRoleContextIsSet = true;
}

bool UserRolesDto::userRoleContextIsSet() const
{
    return m_UserRoleContextIsSet;
}

void UserRolesDto::unsetUserRoleContext()
{
    m_UserRoleContextIsSet = false;
}
}
}
}
}


