/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * NotificationApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_NotificationApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_NotificationApi_H_



#include "SlasconeOpenApiClient/ApiClient.h"

#include "SlasconeOpenApiClient/model/EmailConfigurationDto.h"
#include "SlasconeOpenApiClient/model/LicenseMailDto.h"
#include "SlasconeOpenApiClient/model/ProblemDetails.h"
#include "SlasconeOpenApiClient/model/UserEmailTemplateDto.h"
#include <vector>
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  NotificationApi 
{
public:

    explicit NotificationApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~NotificationApi();

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="userEmailTemplateDto"></param>
    pplx::task<std::shared_ptr<UserEmailTemplateDto>> addUserEmailTemplate(
        utility::string_t isvId,
        std::shared_ptr<UserEmailTemplateDto> userEmailTemplateDto
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="emailTemplateId"></param>
    pplx::task<void> deleteUserEmailTemplate(
        utility::string_t isvId,
        utility::string_t emailTemplateId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    pplx::task<std::vector<std::shared_ptr<UserEmailTemplateDto>>> getAllUserEmailTemplates(
        utility::string_t isvId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    pplx::task<std::shared_ptr<EmailConfigurationDto>> getNotificationSettings(
        utility::string_t isvId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="emailTemplateId"></param>
    pplx::task<std::shared_ptr<UserEmailTemplateDto>> getUserEmailTemplate(
        utility::string_t isvId,
        utility::string_t emailTemplateId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="purpose"></param>
    pplx::task<std::vector<std::shared_ptr<UserEmailTemplateDto>>> getUserEmailTemplatesByPurpose(
        utility::string_t isvId,
        utility::string_t purpose
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="emailTemplateId"></param>
    /// <param name="userEmailTemplateDto"></param>
    pplx::task<std::shared_ptr<UserEmailTemplateDto>> patchUserEmailTemplate(
        utility::string_t isvId,
        utility::string_t emailTemplateId,
        std::shared_ptr<UserEmailTemplateDto> userEmailTemplateDto
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="licenseMailDto"></param>
    pplx::task<utility::string_t> sendLicenseMail(
        utility::string_t isvId,
        std::shared_ptr<LicenseMailDto> licenseMailDto
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="toEmail"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<utility::string_t> sendTestEmail(
        utility::string_t isvId,
        boost::optional<utility::string_t> toEmail
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="emailConfigurationDto"></param>
    pplx::task<utility::string_t> updateNotificationSettings(
        utility::string_t isvId,
        std::shared_ptr<EmailConfigurationDto> emailConfigurationDto
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="userEmailTemplateDto"></param>
    pplx::task<std::shared_ptr<UserEmailTemplateDto>> updateUserEmailTemplate(
        utility::string_t isvId,
        std::shared_ptr<UserEmailTemplateDto> userEmailTemplateDto
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_NotificationApi_H_ */

