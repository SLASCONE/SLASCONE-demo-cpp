/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CustomerApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_CustomerApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_CustomerApi_H_



#include "SlasconeOpenApiClient/ApiClient.h"

#include "SlasconeOpenApiClient/AnyType.h"
#include "SlasconeOpenApiClient/model/CustomerContactDto.h"
#include "SlasconeOpenApiClient/model/CustomerDto.h"
#include "SlasconeOpenApiClient/model/CustomerFilterDto.h"
#include "SlasconeOpenApiClient/model/CustomerLazyLoadDto.h"
#include "SlasconeOpenApiClient/model/CustomerLightDto.h"
#include "SlasconeOpenApiClient/model/CustomerTypeDto.h"
#include "SlasconeOpenApiClient/model/ItemTagAssignmentDto.h"
#include "SlasconeOpenApiClient/model/ProblemDetails.h"
#include <vector>
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  CustomerApi 
{
public:

    explicit CustomerApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~CustomerApi();

    /// <summary>
    /// Creates a customer
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="customerDto"></param>
    pplx::task<std::shared_ptr<CustomerDto>> addCustomer(
        utility::string_t isvId,
        std::shared_ptr<CustomerDto> customerDto
    ) const;
    /// <summary>
    /// Creates a customer contact
    /// </summary>
    /// <remarks>
    /// Sends also an invitation email to the contact address
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="customerId"></param>
    /// <param name="customerContactDto"></param>
    pplx::task<std::shared_ptr<CustomerContactDto>> addCustomerContact(
        utility::string_t isvId,
        utility::string_t customerId,
        std::shared_ptr<CustomerContactDto> customerContactDto
    ) const;
    /// <summary>
    /// Creates a customer type
    /// </summary>
    /// <remarks>
    /// More information about &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016150318-CUSTOM-TYPES-AND-TAGS\&quot;&gt;custom types and tags&lt;/a&gt;.
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="customerTypeDto"></param>
    pplx::task<std::shared_ptr<CustomerTypeDto>> addCustomerType(
        utility::string_t isvId,
        std::shared_ptr<CustomerTypeDto> customerTypeDto
    ) const;
    /// <summary>
    /// Returns a specific customer (deprecated; use api/v2/isv/{isv_id}/customers/by_number instead)
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="customerNumber"></param>
    pplx::task<std::shared_ptr<CustomerDto>> customerGetCustomerByCustomerNumberDeprecated(
        utility::string_t isvId,
        utility::string_t customerNumber
    ) const;
    /// <summary>
    /// Deletes a customer
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="customerId"></param>
    pplx::task<std::shared_ptr<CustomerDto>> deleteCustomer(
        utility::string_t isvId,
        utility::string_t customerId
    ) const;
    /// <summary>
    /// Deletes a customer contact
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="customerId"></param>
    /// <param name="contactId"></param>
    /// <param name="removeIdentity"> (optional, default to false)</param>
    pplx::task<std::shared_ptr<CustomerContactDto>> deleteCustomerContact(
        utility::string_t isvId,
        utility::string_t customerId,
        utility::string_t contactId,
        boost::optional<bool> removeIdentity
    ) const;
    /// <summary>
    /// Returns all customers
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    pplx::task<std::vector<std::shared_ptr<CustomerDto>>> getAllCustomers(
        utility::string_t isvId
    ) const;
    /// <summary>
    /// Returns all customers with reduced information
    /// </summary>
    /// <remarks>
    /// Returns only Id, Name, CustomerNumber, and Email address.
    /// </remarks>
    /// <param name="isvId"></param>
    pplx::task<std::vector<std::shared_ptr<CustomerLightDto>>> getAllCustomersLight(
        utility::string_t isvId
    ) const;
    /// <summary>
    /// Returns a specific customer
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="customerId"></param>
    pplx::task<std::shared_ptr<CustomerDto>> getCustomer(
        utility::string_t isvId,
        utility::string_t customerId
    ) const;
    /// <summary>
    /// Returns a specific customer
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="customerNumber"></param>
    pplx::task<std::shared_ptr<CustomerDto>> getCustomerByNumber(
        utility::string_t isvId,
        utility::string_t customerNumber
    ) const;
    /// <summary>
    /// Returns the customer contact matching the id of the logged in user
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    pplx::task<std::vector<std::shared_ptr<CustomerContactDto>>> getCustomerContactByUserId(
        utility::string_t isvId
    ) const;
    /// <summary>
    /// Returns the available customer contact languages
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    pplx::task<std::vector<utility::string_t>> getCustomerContactLanguages(
        utility::string_t isvId
    ) const;
    /// <summary>
    /// Returns a customer&#39;s contacts
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="customerId"></param>
    pplx::task<std::vector<std::shared_ptr<CustomerContactDto>>> getCustomerContacts(
        utility::string_t isvId,
        utility::string_t customerId
    ) const;
    /// <summary>
    /// Returns the number of customers
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    pplx::task<std::vector<std::shared_ptr<AnyType>>> getCustomerCount(
        utility::string_t isvId
    ) const;
    /// <summary>
    /// Returns all tags of a customer
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="customerId"></param>
    pplx::task<std::vector<std::shared_ptr<ItemTagAssignmentDto>>> getCustomerTagAssignments(
        utility::string_t isvId,
        utility::string_t customerId
    ) const;
    /// <summary>
    /// Returns all customer types
    /// </summary>
    /// <remarks>
    /// More information about &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016150318-CUSTOM-TYPES-AND-TAGS\&quot;&gt;custom types and tags&lt;/a&gt;.
    /// </remarks>
    /// <param name="isvId"></param>
    pplx::task<std::vector<std::shared_ptr<CustomerTypeDto>>> getCustomerTypes(
        utility::string_t isvId
    ) const;
    /// <summary>
    /// Returns all customers matching a filter
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="customerFilterDto"></param>
    pplx::task<std::shared_ptr<CustomerLazyLoadDto>> getFilteredCustomers(
        utility::string_t isvId,
        std::shared_ptr<CustomerFilterDto> customerFilterDto
    ) const;
    /// <summary>
    /// Deletes a customer type
    /// </summary>
    /// <remarks>
    /// More information about &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016150318-CUSTOM-TYPES-AND-TAGS\&quot;&gt;custom types and tags&lt;/a&gt;.
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="typeId"></param>
    /// <param name="newTypeId"></param>
    pplx::task<std::shared_ptr<CustomerTypeDto>> removeCustomerType(
        utility::string_t isvId,
        utility::string_t typeId,
        utility::string_t newTypeId
    ) const;
    /// <summary>
    /// Sends a new invitation email to a customer contact
    /// </summary>
    /// <remarks>
    /// A first invitation is send during creation of a contact
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="customerId"></param>
    /// <param name="contactId"></param>
    pplx::task<void> resendCustomerContactInvitation(
        utility::string_t isvId,
        utility::string_t customerId,
        utility::string_t contactId
    ) const;
    /// <summary>
    /// Toggles a customer contact state
    /// </summary>
    /// <remarks>
    /// Toggles &#39;isActive&#39; state of a customer contact
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="customerId"></param>
    /// <param name="contactId"></param>
    pplx::task<std::shared_ptr<CustomerContactDto>> toggleCustomerContactState(
        utility::string_t isvId,
        utility::string_t customerId,
        utility::string_t contactId
    ) const;
    /// <summary>
    /// Updates a customer
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="customerDto"></param>
    pplx::task<std::shared_ptr<CustomerDto>> updateCustomer(
        utility::string_t isvId,
        std::shared_ptr<CustomerDto> customerDto
    ) const;
    /// <summary>
    /// Updates a customer contact
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="customerId"></param>
    /// <param name="customerContactDto"></param>
    pplx::task<std::shared_ptr<CustomerContactDto>> updateCustomerContact(
        utility::string_t isvId,
        utility::string_t customerId,
        std::shared_ptr<CustomerContactDto> customerContactDto
    ) const;
    /// <summary>
    /// Updates the tags of a customer
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="customerId"></param>
    /// <param name="itemTagAssignmentDto"></param>
    pplx::task<std::vector<std::shared_ptr<ItemTagAssignmentDto>>> updateCustomerTagAssignments(
        utility::string_t isvId,
        utility::string_t customerId,
        std::vector<std::shared_ptr<ItemTagAssignmentDto>> itemTagAssignmentDto
    ) const;
    /// <summary>
    /// Updates a customer type
    /// </summary>
    /// <remarks>
    /// More information about &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016150318-CUSTOM-TYPES-AND-TAGS\&quot;&gt;custom types and tags&lt;/a&gt;.
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="customerTypeDto"></param>
    pplx::task<std::shared_ptr<CustomerTypeDto>> updateCustomerType(
        utility::string_t isvId,
        std::shared_ptr<CustomerTypeDto> customerTypeDto
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_CustomerApi_H_ */

