/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * LicenseApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_LicenseApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_LicenseApi_H_



#include "SlasconeOpenApiClient/ApiClient.h"

#include "SlasconeOpenApiClient/model/AddLicenseUserErrorExamples.h"
#include "SlasconeOpenApiClient/model/BulkDeleteUserResultDto.h"
#include "SlasconeOpenApiClient/model/ConsumptionBalanceDto.h"
#include "SlasconeOpenApiClient/model/ConsumptionHeartbeatLazyLoadDto.h"
#include "SlasconeOpenApiClient/model/DeviceLicenseAssignmentDto.h"
#include "SlasconeOpenApiClient/model/DevicesSortEnum.h"
#include "SlasconeOpenApiClient/model/ExceptionEndDateBeforeStartDateError.h"
#include "SlasconeOpenApiClient/model/GetLicenseUsersErrorExamples.h"
#include "SlasconeOpenApiClient/model/HistoryDto.h"
#include "SlasconeOpenApiClient/model/ItemTagAssignmentDto.h"
#include "SlasconeOpenApiClient/model/LicenseDto.h"
#include "SlasconeOpenApiClient/model/LicenseFilterDto.h"
#include "SlasconeOpenApiClient/model/LicenseLazyLoadDto.h"
#include "SlasconeOpenApiClient/model/LicenseTypeDto.h"
#include "SlasconeOpenApiClient/model/LicenseUserDto.h"
#include "SlasconeOpenApiClient/model/LicenseUserGroupDto.h"
#include "SlasconeOpenApiClient/model/ProblemDetails.h"
#include "SlasconeOpenApiClient/model/RemoveLicenseUsersErrorExamples.h"
#include "SlasconeOpenApiClient/model/SessionDto.h"
#include "SlasconeOpenApiClient/model/UpdateLicenseUserErrorExamples.h"
#include <vector>
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  LicenseApi 
{
public:

    explicit LicenseApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~LicenseApi();

    /// <summary>
    /// Creates a license
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="licenseDto"></param>
    pplx::task<std::shared_ptr<LicenseDto>> addLicense(
        utility::string_t isvId,
        std::shared_ptr<LicenseDto> licenseDto
    ) const;
    /// <summary>
    /// Creates a license type
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="licenseTypeDto"></param>
    pplx::task<std::shared_ptr<LicenseTypeDto>> addLicenseType(
        utility::string_t isvId,
        std::shared_ptr<LicenseTypeDto> licenseTypeDto
    ) const;
    /// <summary>
    /// Creates a license user
    /// </summary>
    /// <remarks>
    /// More information about &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360017647817-NAMED-USER-LICENSES\&quot;&gt;named user licenses&lt;/a&gt;
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="licenseId"></param>
    /// <param name="licenseUserDto"></param>
    pplx::task<std::shared_ptr<LicenseUserDto>> addLicenseUserAsync(
        utility::string_t isvId,
        utility::string_t licenseId,
        std::shared_ptr<LicenseUserDto> licenseUserDto
    ) const;
    /// <summary>
    /// Creates a license user group
    /// </summary>
    /// <remarks>
    /// More information about &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360017647817-NAMED-USER-LICENSES\&quot;&gt;named user licenses&lt;/a&gt;
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="licenseId"></param>
    /// <param name="licenseUserGroupDto"></param>
    pplx::task<std::shared_ptr<LicenseUserGroupDto>> addLicenseUserGroupAsync(
        utility::string_t isvId,
        utility::string_t licenseId,
        std::shared_ptr<LicenseUserGroupDto> licenseUserGroupDto
    ) const;
    /// <summary>
    /// Deletes a license
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="licenseId"></param>
    pplx::task<std::shared_ptr<LicenseDto>> deleteLicense(
        utility::string_t isvId,
        utility::string_t licenseId
    ) const;
    /// <summary>
    /// Deletes a license assignment
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="licenseId"></param>
    /// <param name="assignmentId"></param>
    pplx::task<std::vector<std::shared_ptr<DeviceLicenseAssignmentDto>>> deleteLicenseAssignment(
        utility::string_t isvId,
        utility::string_t licenseId,
        utility::string_t assignmentId
    ) const;
    /// <summary>
    /// Deletes a license user
    /// </summary>
    /// <remarks>
    /// More information about &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360017647817-NAMED-USER-LICENSES\&quot;&gt;named user licenses&lt;/a&gt;
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="userId"></param>
    /// <param name="licenseId"></param>
    pplx::task<std::shared_ptr<LicenseUserDto>> deleteLicenseUserAsync(
        utility::string_t isvId,
        utility::string_t userId,
        utility::string_t licenseId
    ) const;
    /// <summary>
    /// Deletes a license user group
    /// </summary>
    /// <remarks>
    /// More information about &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360017647817-NAMED-USER-LICENSES\&quot;&gt;named user licenses&lt;/a&gt;
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="userGroupId"></param>
    /// <param name="licenseId"></param>
    /// <param name="removeUsers"> (optional, default to false)</param>
    pplx::task<std::shared_ptr<LicenseUserGroupDto>> deleteLicenseUserGroupAsync(
        utility::string_t isvId,
        utility::string_t userGroupId,
        utility::string_t licenseId,
        boost::optional<bool> removeUsers
    ) const;
    /// <summary>
    /// Deletes many license users
    /// </summary>
    /// <remarks>
    /// More information about &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360017647817-NAMED-USER-LICENSES\&quot;&gt;named user licenses&lt;/a&gt;
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="licenseId"></param>
    /// <param name="utilityStringT"></param>
    pplx::task<std::vector<std::shared_ptr<BulkDeleteUserResultDto>>> deleteLicenseUsersAsync(
        utility::string_t isvId,
        utility::string_t licenseId,
        std::vector<utility::string_t> utilityStringT
    ) const;
    /// <summary>
    /// Downloads an XML license file
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="licenseId"></param>
    /// <param name="tokenKey"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<void> downloadLicenseFileXml(
        utility::string_t isvId,
        utility::string_t licenseId,
        boost::optional<utility::string_t> tokenKey
    ) const;
    /// <summary>
    /// Returns the entire history of a license
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="licenseId"></param>
    pplx::task<std::vector<std::shared_ptr<HistoryDto>>> getAllLicenseHistory(
        utility::string_t isvId,
        utility::string_t licenseId
    ) const;
    /// <summary>
    /// Returns a license assignment
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="licenseId"></param>
    /// <param name="assignmentId"></param>
    pplx::task<std::shared_ptr<DeviceLicenseAssignmentDto>> getAssignmentAsync(
        utility::string_t isvId,
        utility::string_t licenseId,
        utility::string_t assignmentId
    ) const;
    /// <summary>
    /// Returns a consumption balance
    /// </summary>
    /// <remarks>
    /// More information about &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/10506993302557-UNDERSTANDING-CONSUMPTION-BASED-ASPECTS\&quot;&gt;consumption based aspects&lt;/a&gt;
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="licenseId"></param>
    pplx::task<std::vector<std::shared_ptr<ConsumptionBalanceDto>>> getConsumptionBalance(
        utility::string_t isvId,
        utility::string_t licenseId
    ) const;
    /// <summary>
    /// Returns all consumption heartbeats
    /// </summary>
    /// <remarks>
    /// More information about &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/10506993302557-UNDERSTANDING-CONSUMPTION-BASED-ASPECTS\&quot;&gt;consumption based aspects&lt;/a&gt;
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="licenseId"></param>
    /// <param name="dateFrom"> (optional, default to utility::datetime())</param>
    /// <param name="dateTo"> (optional, default to utility::datetime())</param>
    /// <param name="limitations"> (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    pplx::task<std::shared_ptr<ConsumptionHeartbeatLazyLoadDto>> getConsumptionHeartbeats(
        utility::string_t isvId,
        utility::string_t licenseId,
        boost::optional<utility::datetime> dateFrom,
        boost::optional<utility::datetime> dateTo,
        boost::optional<std::vector<utility::string_t>> limitations
    ) const;
    /// <summary>
    /// Returns a license
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="licenseId"></param>
    pplx::task<std::shared_ptr<LicenseDto>> getLicense(
        utility::string_t isvId,
        utility::string_t licenseId
    ) const;
    /// <summary>
    /// Returns all license assignments
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="licenseId"></param>
    /// <param name="sortOption"> (optional, default to new DevicesSortEnum())</param>
    /// <param name="descending"> (optional, default to false)</param>
    /// <param name="includeAnalyticalHeartbeats"> (optional, default to false)</param>
    /// <param name="operatingSystems"> (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    /// <param name="versionNumber"> (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    /// <param name="page"> (optional, default to 0)</param>
    /// <param name="pageSize"> (optional, default to 0)</param>
    pplx::task<std::vector<std::shared_ptr<DeviceLicenseAssignmentDto>>> getLicenseAssignments(
        utility::string_t isvId,
        utility::string_t licenseId,
        boost::optional<std::shared_ptr<DevicesSortEnum>> sortOption,
        boost::optional<bool> descending,
        boost::optional<bool> includeAnalyticalHeartbeats,
        boost::optional<std::vector<utility::string_t>> operatingSystems,
        boost::optional<std::vector<utility::string_t>> versionNumber,
        boost::optional<int32_t> page,
        boost::optional<int32_t> pageSize
    ) const;
    /// <summary>
    /// Returns a specific license snapshot
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="licenseId"></param>
    /// <param name="historyId"></param>
    pplx::task<std::shared_ptr<HistoryDto>> getLicenseHistory(
        utility::string_t isvId,
        utility::string_t licenseId,
        utility::string_t historyId
    ) const;
    /// <summary>
    /// Returns all license tags
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="licenseId"></param>
    pplx::task<std::vector<std::shared_ptr<ItemTagAssignmentDto>>> getLicenseTagAssignments(
        utility::string_t isvId,
        utility::string_t licenseId
    ) const;
    /// <summary>
    /// Returns all license types
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    pplx::task<std::vector<std::shared_ptr<LicenseTypeDto>>> getLicenseTypes(
        utility::string_t isvId
    ) const;
    /// <summary>
    /// Returns all user groups
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="licenseId"></param>
    pplx::task<std::vector<std::shared_ptr<LicenseUserGroupDto>>> getLicenseUserGroupsAsync(
        utility::string_t isvId,
        utility::string_t licenseId
    ) const;
    /// <summary>
    /// Returns license users
    /// </summary>
    /// <remarks>
    /// More information about &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360017647817-NAMED-USER-LICENSES\&quot;&gt;named user licenses&lt;/a&gt;
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="licenseId"></param>
    pplx::task<std::vector<std::shared_ptr<LicenseUserDto>>> getLicenseUsersAsync(
        utility::string_t isvId,
        utility::string_t licenseId
    ) const;
    /// <summary>
    /// Returns all licenses matching a filter setting (detailed)
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="licenseFilterDto"></param>
    pplx::task<std::vector<std::shared_ptr<LicenseDto>>> getLicensesByFilter(
        utility::string_t isvId,
        std::shared_ptr<LicenseFilterDto> licenseFilterDto
    ) const;
    /// <summary>
    /// Returns all licenses matching a filter setting (light)
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="licenseFilterDto"></param>
    pplx::task<std::shared_ptr<LicenseLazyLoadDto>> getLicensesByFilterSettings(
        utility::string_t isvId,
        std::shared_ptr<LicenseFilterDto> licenseFilterDto
    ) const;
    /// <summary>
    /// Returns all open sessions
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="licenseId"></param>
    pplx::task<std::vector<std::shared_ptr<SessionDto>>> getOpenSessionsAsync(
        utility::string_t isvId,
        utility::string_t licenseId
    ) const;
    /// <summary>
    /// Recalculates a consumption balance
    /// </summary>
    /// <remarks>
    /// More information about &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/10506993302557-UNDERSTANDING-CONSUMPTION-BASED-ASPECTS\&quot;&gt;consumption based aspects&lt;/a&gt;
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="licenseId"></param>
    /// <param name="limitationId"></param>
    pplx::task<void> recalculateConsumptionBalance(
        utility::string_t isvId,
        utility::string_t licenseId,
        utility::string_t limitationId
    ) const;
    /// <summary>
    /// Deletes a license type
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="typeId"></param>
    /// <param name="newTypeId"></param>
    pplx::task<std::shared_ptr<LicenseTypeDto>> removeLicenseType(
        utility::string_t isvId,
        utility::string_t typeId,
        utility::string_t newTypeId
    ) const;
    /// <summary>
    /// Resets a consumption balance
    /// </summary>
    /// <remarks>
    /// More information about &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/10506993302557-UNDERSTANDING-CONSUMPTION-BASED-ASPECTS\&quot;&gt;consumption based aspects&lt;/a&gt;
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="licenseId"></param>
    /// <param name="limitationId"></param>
    pplx::task<void> resetConsumptionBalance(
        utility::string_t isvId,
        utility::string_t licenseId,
        utility::string_t limitationId
    ) const;
    /// <summary>
    /// Toggles the state of a license
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="licenseId"></param>
    pplx::task<std::shared_ptr<LicenseDto>> toggleLicenseStateAsync(
        utility::string_t isvId,
        utility::string_t licenseId
    ) const;
    /// <summary>
    /// Updates a license assignment
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="licenseId"></param>
    /// <param name="deviceLicenseAssignmentDto"></param>
    pplx::task<std::shared_ptr<DeviceLicenseAssignmentDto>> updateAssignmentAsync(
        utility::string_t isvId,
        utility::string_t licenseId,
        std::shared_ptr<DeviceLicenseAssignmentDto> deviceLicenseAssignmentDto
    ) const;
    /// <summary>
    /// Updates a license
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="licenseDto"></param>
    pplx::task<std::shared_ptr<LicenseDto>> updateLicense(
        utility::string_t isvId,
        std::shared_ptr<LicenseDto> licenseDto
    ) const;
    /// <summary>
    /// Updates the tags of a license
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="licenseId"></param>
    /// <param name="itemTagAssignmentDto"></param>
    pplx::task<std::vector<std::shared_ptr<ItemTagAssignmentDto>>> updateLicenseTagAssignments(
        utility::string_t isvId,
        utility::string_t licenseId,
        std::vector<std::shared_ptr<ItemTagAssignmentDto>> itemTagAssignmentDto
    ) const;
    /// <summary>
    /// Updates a license type
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="licenseTypeDto"></param>
    pplx::task<std::shared_ptr<LicenseTypeDto>> updateLicenseType(
        utility::string_t isvId,
        std::shared_ptr<LicenseTypeDto> licenseTypeDto
    ) const;
    /// <summary>
    /// Updates a license user
    /// </summary>
    /// <remarks>
    /// More information about &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360017647817-NAMED-USER-LICENSES\&quot;&gt;named user licenses&lt;/a&gt;
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="licenseId"></param>
    /// <param name="licenseUserDto"></param>
    pplx::task<std::shared_ptr<LicenseUserDto>> updateLicenseUserAsync(
        utility::string_t isvId,
        utility::string_t licenseId,
        std::shared_ptr<LicenseUserDto> licenseUserDto
    ) const;
    /// <summary>
    /// Updates a license user group
    /// </summary>
    /// <remarks>
    /// More information about &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360017647817-NAMED-USER-LICENSES\&quot;&gt;named user licenses&lt;/a&gt;
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="licenseId"></param>
    /// <param name="licenseUserGroupDto"></param>
    pplx::task<std::shared_ptr<LicenseUserGroupDto>> updateLicenseUserGroupAsync(
        utility::string_t isvId,
        utility::string_t licenseId,
        std::shared_ptr<LicenseUserGroupDto> licenseUserGroupDto
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_LicenseApi_H_ */

