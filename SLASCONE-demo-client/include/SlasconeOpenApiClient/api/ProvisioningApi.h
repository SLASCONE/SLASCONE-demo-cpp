/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ProvisioningApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_ProvisioningApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_ProvisioningApi_H_



#include "SlasconeOpenApiClient/ApiClient.h"

#include "SlasconeOpenApiClient/model/ActivateClientDto.h"
#include "SlasconeOpenApiClient/model/ActivateLicenseResponseErrors.h"
#include "SlasconeOpenApiClient/model/AddHeartbeatDto.h"
#include "SlasconeOpenApiClient/model/BaseErrorResponse.h"
#include "SlasconeOpenApiClient/model/CloseSessionErrors.h"
#include "SlasconeOpenApiClient/model/ConsumptionDto.h"
#include "SlasconeOpenApiClient/model/DeactivateDeviceLicenseResponseError.h"
#include "SlasconeOpenApiClient/model/GetAssignmentsErrorExamples.h"
#include "SlasconeOpenApiClient/model/GetConsumptionStatusErrors.h"
#include "SlasconeOpenApiClient/model/GetLicensesByCustomerDto.h"
#include "SlasconeOpenApiClient/model/GetLicensesByLicenseKeyDto.h"
#include "SlasconeOpenApiClient/model/GetLicensesByUserDto.h"
#include "SlasconeOpenApiClient/model/HeartbeatResponseErrors.h"
#include "SlasconeOpenApiClient/model/LicenseDto.h"
#include "SlasconeOpenApiClient/model/LicenseInfoDto.h"
#include "SlasconeOpenApiClient/model/LicenseStateDto.h"
#include "SlasconeOpenApiClient/model/LicensesByCustomerErrors.h"
#include "SlasconeOpenApiClient/model/LicensesByKeyErrors.h"
#include "SlasconeOpenApiClient/model/LicensesByUserErrors.h"
#include "SlasconeOpenApiClient/model/OpenSessionErrors.h"
#include "SlasconeOpenApiClient/model/ProblemDetails.h"
#include "SlasconeOpenApiClient/model/SessionRequestDto.h"
#include "SlasconeOpenApiClient/model/SessionStatusDto.h"
#include "SlasconeOpenApiClient/model/ToggleLicenseStateDto.h"
#include "SlasconeOpenApiClient/model/ToggleLicenseStateErrors.h"
#include "SlasconeOpenApiClient/model/UnassignDto.h"
#include "SlasconeOpenApiClient/model/ValidateConsumptionStatusDto.h"
#include "SlasconeOpenApiClient/model/ValidateLicenseDto.h"
#include <vector>
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  ProvisioningApi 
{
public:

    explicit ProvisioningApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~ProvisioningApi();

    /// <summary>
    /// Activates a client (assigns a token to a client)
    /// </summary>
    /// <remarks>
    /// Typically used in named device scenarios. &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016001677-CORE-API\&quot;&gt;More Information&lt;/a&gt;.
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="activateClientDto"></param>
    pplx::task<std::shared_ptr<LicenseInfoDto>> activateLicense(
        utility::string_t isvId,
        std::shared_ptr<ActivateClientDto> activateClientDto
    ) const;
    /// <summary>
    /// Activates an offline client (assigns a token to a offline client)
    /// </summary>
    /// <remarks>
    /// Typically used in offline device scenarios. &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016001677-CORE-API\&quot;&gt;More Information&lt;/a&gt;.
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="productId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="licenseKey"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="clientId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="softwareVersion"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="fileName"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<void> activateOfflineLicense(
        utility::string_t isvId,
        boost::optional<utility::string_t> productId,
        boost::optional<utility::string_t> licenseKey,
        boost::optional<utility::string_t> clientId,
        boost::optional<utility::string_t> softwareVersion,
        boost::optional<utility::string_t> fileName
    ) const;
    /// <summary>
    /// Creates a license heartbeat
    /// </summary>
    /// <remarks>
    /// &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016001677-CORE-API\&quot;&gt;More Information&lt;/a&gt;.
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="addHeartbeatDto"></param>
    pplx::task<std::shared_ptr<LicenseInfoDto>> addHeartbeat(
        utility::string_t isvId,
        std::shared_ptr<AddHeartbeatDto> addHeartbeatDto
    ) const;
    /// <summary>
    /// Closes a (floating) session
    /// </summary>
    /// <remarks>
    /// &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016152858-FLOATING-LICENSES\&quot;&gt;More Information&lt;/a&gt;.
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="sessionRequestDto"></param>
    pplx::task<utility::string_t> closeSession(
        utility::string_t isvId,
        std::shared_ptr<SessionRequestDto> sessionRequestDto
    ) const;
    /// <summary>
    /// Returns the number of actively used floating tokens.
    /// </summary>
    /// <remarks>
    /// &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016152858-FLOATING-DEVICE-LICENSES\&quot;&gt;More Information&lt;/a&gt;.
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="licenseId"></param>
    pplx::task<int32_t> getActiveFloatingTokensCount(
        utility::string_t isvId,
        utility::string_t licenseId
    ) const;
    /// <summary>
    /// Checks the consumption status of a limitation
    /// </summary>
    /// <remarks>
    /// &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016057197-CONSUMPTION-BASED-LIMITATIONS\&quot;&gt;More Information&lt;/a&gt;.
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="validateConsumptionStatusDto"></param>
    pplx::task<std::shared_ptr<ConsumptionDto>> getConsumptionStatus(
        utility::string_t isvId,
        std::shared_ptr<ValidateConsumptionStatusDto> validateConsumptionStatusDto
    ) const;
    /// <summary>
    /// Checks the validity of a license
    /// </summary>
    /// <remarks>
    /// Checks the validity of a license.
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="validateLicenseDto"></param>
    pplx::task<std::shared_ptr<LicenseInfoDto>> getDeviceInfo(
        utility::string_t isvId,
        std::shared_ptr<ValidateLicenseDto> validateLicenseDto
    ) const;
    /// <summary>
    /// Returns all licenses of a customer
    /// </summary>
    /// <remarks>
    /// Typically used in SaaS scenarios. &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360017647817-NAMED-USER-LICENSES\&quot;&gt;More Information&lt;/a&gt;.
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="getLicensesByCustomerDto"></param>
    pplx::task<std::vector<std::shared_ptr<LicenseDto>>> getLicensesByCustomerAsync(
        utility::string_t isvId,
        std::shared_ptr<GetLicensesByCustomerDto> getLicensesByCustomerDto
    ) const;
    /// <summary>
    /// Returns all licenses of a (legacy) key
    /// </summary>
    /// <remarks>
    /// Typically used in order to map a license/key/subscription of a backoffice system to the SLASCONE license. &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360017647817-NAMED-USER-LICENSES\&quot;&gt;More Information&lt;/a&gt;.
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="getLicensesByLicenseKeyDto"></param>
    pplx::task<std::vector<std::shared_ptr<LicenseDto>>> getLicensesByLicenseKeyAsync(
        utility::string_t isvId,
        std::shared_ptr<GetLicensesByLicenseKeyDto> getLicensesByLicenseKeyDto
    ) const;
    /// <summary>
    /// Returns all licenses of a named user
    /// </summary>
    /// <remarks>
    /// Typically used in SaaS/Web scenarios. &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360017647817-NAMED-USER-LICENSES\&quot;&gt;More Information&lt;/a&gt;.
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="getLicensesByUserDto"></param>
    pplx::task<std::vector<std::shared_ptr<LicenseDto>>> getLicensesByUserAsync(
        utility::string_t isvId,
        std::shared_ptr<GetLicensesByUserDto> getLicensesByUserDto
    ) const;
    /// <summary>
    /// Opens a (floating) session
    /// </summary>
    /// <remarks>
    /// &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016152858-FLOATING-LICENSES\&quot;&gt;More Information&lt;/a&gt;.
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="sessionRequestDto"></param>
    pplx::task<std::shared_ptr<SessionStatusDto>> openSession(
        utility::string_t isvId,
        std::shared_ptr<SessionRequestDto> sessionRequestDto
    ) const;
    /// <summary>
    /// Toggles the license state (active/inactive)
    /// </summary>
    /// <remarks>
    /// Toggles the license state (active/inactive).
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="toggleLicenseStateDto"></param>
    pplx::task<std::shared_ptr<LicenseStateDto>> toogleLicenseStateAsync(
        utility::string_t isvId,
        std::shared_ptr<ToggleLicenseStateDto> toggleLicenseStateDto
    ) const;
    /// <summary>
    /// Unassigns a token from a client
    /// </summary>
    /// <remarks>
    /// Typically used in named device scenarios. &lt;a href&#x3D;\&quot;https://support.slascone.com/hc/en-us/articles/360016001677-CORE-API\&quot;&gt;More Information&lt;/a&gt;.
    /// </remarks>
    /// <param name="isvId"></param>
    /// <param name="unassignDto"></param>
    pplx::task<utility::string_t> unassignLicense(
        utility::string_t isvId,
        std::shared_ptr<UnassignDto> unassignDto
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_ProvisioningApi_H_ */

