/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * LicenseSubscriptionPlanDto.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_LicenseSubscriptionPlanDto_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_LicenseSubscriptionPlanDto_H_


#include "SlasconeOpenApiClient/ModelBase.h"

#include "SlasconeOpenApiClient/model/ExpirationMode.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// 
/// </summary>
class  LicenseSubscriptionPlanDto
    : public ModelBase
{
public:
    LicenseSubscriptionPlanDto();
    virtual ~LicenseSubscriptionPlanDto();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// LicenseSubscriptionPlanDto members

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getExpirationDateUtc() const;
    bool expirationDateUtcIsSet() const;
    void unsetExpiration_date_utc();

    void setExpirationDateUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ExpirationMode> getExpirationMode() const;
    bool expirationModeIsSet() const;
    void unsetExpiration_mode();

    void setExpirationMode(const std::shared_ptr<ExpirationMode>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getValidDaysCount() const;
    bool validDaysCountIsSet() const;
    void unsetValid_days_count();

    void setValidDaysCount(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTrialDaysCount() const;
    bool trialDaysCountIsSet() const;
    void unsetTrial_days_count();

    void setTrialDaysCount(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsActive() const;
    bool isActiveIsSet() const;
    void unsetIs_active();

    void setIsActive(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsExpired() const;
    bool isExpiredIsSet() const;
    void unsetIs_expired();

    void setIsExpired(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsValid() const;
    bool isValidIsSet() const;
    void unsetIs_valid();

    void setIsValid(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsSoftwareReleaseValid() const;
    bool isSoftwareReleaseValidIsSet() const;
    void unsetIs_software_release_valid();

    void setIsSoftwareReleaseValid(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsGroupValid() const;
    bool isGroupValidIsSet() const;
    void unsetIs_group_valid();

    void setIsGroupValid(bool value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getGroupCount() const;
    bool groupCountIsSet() const;
    void unsetGroup_count();

    void setGroupCount(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getDateOfIssueUtc() const;
    bool dateOfIssueUtcIsSet() const;
    void unsetDate_of_issue_utc();

    void setDateOfIssueUtc(const utility::datetime& value);


protected:
    utility::datetime m_Expiration_date_utc;
    bool m_Expiration_date_utcIsSet;
    std::shared_ptr<ExpirationMode> m_Expiration_mode;
    bool m_Expiration_modeIsSet;
    int32_t m_Valid_days_count;
    bool m_Valid_days_countIsSet;
    int32_t m_Trial_days_count;
    bool m_Trial_days_countIsSet;
    bool m_Is_active;
    bool m_Is_activeIsSet;
    bool m_Is_expired;
    bool m_Is_expiredIsSet;
    bool m_Is_valid;
    bool m_Is_validIsSet;
    bool m_Is_software_release_valid;
    bool m_Is_software_release_validIsSet;
    bool m_Is_group_valid;
    bool m_Is_group_validIsSet;
    int32_t m_Group_count;
    bool m_Group_countIsSet;
    utility::datetime m_Date_of_issue_utc;
    bool m_Date_of_issue_utcIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_LicenseSubscriptionPlanDto_H_ */
