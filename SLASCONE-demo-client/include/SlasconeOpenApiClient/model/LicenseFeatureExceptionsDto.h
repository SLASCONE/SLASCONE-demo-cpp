/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * LicenseFeatureExceptionsDto.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_LicenseFeatureExceptionsDto_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_LicenseFeatureExceptionsDto_H_


#include "SlasconeOpenApiClient/ModelBase.h"

#include "SlasconeOpenApiClient/model/LicenseFeatureExceptionDto.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class LicenseFeatureExceptionDto;


/// <summary>
/// 
/// </summary>
class  LicenseFeatureExceptionsDto
    : public ModelBase
{
public:
    LicenseFeatureExceptionsDto();
    virtual ~LicenseFeatureExceptionsDto();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// LicenseFeatureExceptionsDto members

    /// <summary>
    /// 
    /// </summary>
    bool isOriginalIsActive() const;
    bool originalIsActiveIsSet() const;
    void unsetOriginal_is_active();

    void setOriginalIsActive(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<LicenseFeatureExceptionDto>>& getExceptions();
    bool exceptionsIsSet() const;
    void unsetExceptions();

    void setExceptions(const std::vector<std::shared_ptr<LicenseFeatureExceptionDto>>& value);


protected:
    bool m_Original_is_active;
    bool m_Original_is_activeIsSet;
    std::vector<std::shared_ptr<LicenseFeatureExceptionDto>> m_Exceptions;
    bool m_ExceptionsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_LicenseFeatureExceptionsDto_H_ */
