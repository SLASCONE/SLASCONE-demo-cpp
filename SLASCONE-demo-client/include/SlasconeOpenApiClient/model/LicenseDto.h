/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * LicenseDto.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_LicenseDto_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_LicenseDto_H_


#include "SlasconeOpenApiClient/ModelBase.h"

#include "SlasconeOpenApiClient/model/LicenseVariableDto.h"
#include "SlasconeOpenApiClient/model/ProductDto.h"
#include <vector>
#include "SlasconeOpenApiClient/model/ExpirationMode.h"
#include "SlasconeOpenApiClient/model/LicenseConstrainedVariableDto.h"
#include "SlasconeOpenApiClient/model/LicenseUserDto.h"
#include "SlasconeOpenApiClient/model/LicenseTypeDto.h"
#include "SlasconeOpenApiClient/model/LicenseUserGroupDto.h"
#include "SlasconeOpenApiClient/model/LicenseLimitationDto.h"
#include "SlasconeOpenApiClient/model/MailLogDto.h"
#include <cpprest/details/basic_types.h>
#include "SlasconeOpenApiClient/model/TemplateDto.h"
#include "SlasconeOpenApiClient/model/LicenseFeatureDto.h"
#include "SlasconeOpenApiClient/model/SoftwareReleaseLimitationDto.h"
#include "SlasconeOpenApiClient/model/CustomerDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class LicenseFeatureDto;
class LicenseLimitationDto;
class LicenseConstrainedVariableDto;
class LicenseVariableDto;
class LicenseUserGroupDto;
class LicenseUserDto;
class CustomerDto;
class ProductDto;
class TemplateDto;
class LicenseTypeDto;
class SoftwareReleaseLimitationDto;
class MailLogDto;


/// <summary>
/// 
/// </summary>
class  LicenseDto
    : public ModelBase
{
public:
    LicenseDto();
    virtual ~LicenseDto();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// LicenseDto members

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getExpirationDateUtc() const;
    bool expirationDateUtcIsSet() const;
    void unsetExpiration_date_utc();

    void setExpirationDateUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ExpirationMode> getExpirationMode() const;
    bool expirationModeIsSet() const;
    void unsetExpiration_mode();

    void setExpirationMode(const std::shared_ptr<ExpirationMode>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getValidDaysCount() const;
    bool validDaysCountIsSet() const;
    void unsetValid_days_count();

    void setValidDaysCount(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTrialDaysCount() const;
    bool trialDaysCountIsSet() const;
    void unsetTrial_days_count();

    void setTrialDaysCount(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsActive() const;
    bool isActiveIsSet() const;
    void unsetIs_active();

    void setIsActive(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsExpired() const;
    bool isExpiredIsSet() const;
    void unsetIs_expired();

    void setIsExpired(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsValid() const;
    bool isValidIsSet() const;
    void unsetIs_valid();

    void setIsValid(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsSoftwareReleaseValid() const;
    bool isSoftwareReleaseValidIsSet() const;
    void unsetIs_software_release_valid();

    void setIsSoftwareReleaseValid(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsGroupValid() const;
    bool isGroupValidIsSet() const;
    void unsetIs_group_valid();

    void setIsGroupValid(bool value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getGroupCount() const;
    bool groupCountIsSet() const;
    void unsetGroup_count();

    void setGroupCount(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getDateOfIssueUtc() const;
    bool dateOfIssueUtcIsSet() const;
    void unsetDate_of_issue_utc();

    void setDateOfIssueUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCustomerId() const;
    bool customerIdIsSet() const;
    void unsetCustomer_id();

    void setCustomerId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getProductId() const;
    bool productIdIsSet() const;
    void unsetProduct_id();

    void setProductId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTemplateId() const;
    bool templateIdIsSet() const;
    void unsetTemplate_id();

    void setTemplateId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLicenseTypeId() const;
    bool licenseTypeIdIsSet() const;
    void unsetLicense_type_id();

    void setLicenseTypeId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLegacyLicenseKey() const;
    bool legacyLicenseKeyIsSet() const;
    void unsetLegacy_license_key();

    void setLegacyLicenseKey(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTokenLimit() const;
    bool tokenLimitIsSet() const;
    void unsetToken_limit();

    void setTokenLimit(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getGoodwillTokenLimit() const;
    bool goodwillTokenLimitIsSet() const;
    void unsetGoodwill_token_limit();

    void setGoodwillTokenLimit(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getFloatingTokenLimit() const;
    bool floatingTokenLimitIsSet() const;
    void unsetFloating_token_limit();

    void setFloatingTokenLimit(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getUserLimit() const;
    bool userLimitIsSet() const;
    void unsetUser_limit();

    void setUserLimit(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSoftwareReleaseLimitationId() const;
    bool softwareReleaseLimitationIdIsSet() const;
    void unsetSoftware_release_limitation_id();

    void setSoftwareReleaseLimitationId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsTemporary() const;
    bool isTemporaryIsSet() const;
    void unsetIs_temporary();

    void setIsTemporary(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<LicenseFeatureDto>>& getLicenseFeatures();
    bool licenseFeaturesIsSet() const;
    void unsetLicense_features();

    void setLicenseFeatures(const std::vector<std::shared_ptr<LicenseFeatureDto>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<LicenseLimitationDto>>& getLicenseLimitations();
    bool licenseLimitationsIsSet() const;
    void unsetLicense_limitations();

    void setLicenseLimitations(const std::vector<std::shared_ptr<LicenseLimitationDto>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<LicenseConstrainedVariableDto>>& getLicenseConstrainedVariables();
    bool licenseConstrainedVariablesIsSet() const;
    void unsetLicense_constrained_variables();

    void setLicenseConstrainedVariables(const std::vector<std::shared_ptr<LicenseConstrainedVariableDto>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<LicenseVariableDto>>& getLicenseVariables();
    bool licenseVariablesIsSet() const;
    void unsetLicense_variables();

    void setLicenseVariables(const std::vector<std::shared_ptr<LicenseVariableDto>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<LicenseUserGroupDto>>& getLicenseUsersGroups();
    bool licenseUsersGroupsIsSet() const;
    void unsetLicense_users_groups();

    void setLicenseUsersGroups(const std::vector<std::shared_ptr<LicenseUserGroupDto>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<LicenseUserDto>>& getLicenseUsers();
    bool licenseUsersIsSet() const;
    void unsetLicense_users();

    void setLicenseUsers(const std::vector<std::shared_ptr<LicenseUserDto>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getCreatedDateUtc() const;
    bool createdDateUtcIsSet() const;
    void unsetCreated_date_utc();

    void setCreatedDateUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getModifiedDateUtc() const;
    bool modifiedDateUtcIsSet() const;
    void unsetModified_date_utc();

    void setModifiedDateUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLastModifiedBy() const;
    bool lastModifiedByIsSet() const;
    void unsetLast_modified_by();

    void setLastModifiedBy(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CustomerDto> getCustomer() const;
    bool customerIsSet() const;
    void unsetCustomer();

    void setCustomer(const std::shared_ptr<CustomerDto>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ProductDto> getProduct() const;
    bool productIsSet() const;
    void unsetProduct();

    void setProduct(const std::shared_ptr<ProductDto>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TemplateDto> getRTemplate() const;
    bool rTemplateIsSet() const;
    void unsetr_template();

    void setRTemplate(const std::shared_ptr<TemplateDto>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<LicenseTypeDto> getLicenseType() const;
    bool licenseTypeIsSet() const;
    void unsetLicense_type();

    void setLicenseType(const std::shared_ptr<LicenseTypeDto>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SoftwareReleaseLimitationDto> getSoftwareReleaseLimitation() const;
    bool softwareReleaseLimitationIsSet() const;
    void unsetSoftware_release_limitation();

    void setSoftwareReleaseLimitation(const std::shared_ptr<SoftwareReleaseLimitationDto>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPrioritizedSoftwareRelease() const;
    bool prioritizedSoftwareReleaseIsSet() const;
    void unsetPrioritized_software_release();

    void setPrioritizedSoftwareRelease(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<MailLogDto>>& getMailLogs();
    bool mailLogsIsSet() const;
    void unsetMail_logs();

    void setMailLogs(const std::vector<std::shared_ptr<MailLogDto>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getClientId() const;
    bool clientIdIsSet() const;
    void unsetClient_id();

    void setClientId(const utility::string_t& value);


protected:
    utility::datetime m_Expiration_date_utc;
    bool m_Expiration_date_utcIsSet;
    std::shared_ptr<ExpirationMode> m_Expiration_mode;
    bool m_Expiration_modeIsSet;
    int32_t m_Valid_days_count;
    bool m_Valid_days_countIsSet;
    int32_t m_Trial_days_count;
    bool m_Trial_days_countIsSet;
    bool m_Is_active;
    bool m_Is_activeIsSet;
    bool m_Is_expired;
    bool m_Is_expiredIsSet;
    bool m_Is_valid;
    bool m_Is_validIsSet;
    bool m_Is_software_release_valid;
    bool m_Is_software_release_validIsSet;
    bool m_Is_group_valid;
    bool m_Is_group_validIsSet;
    int32_t m_Group_count;
    bool m_Group_countIsSet;
    utility::datetime m_Date_of_issue_utc;
    bool m_Date_of_issue_utcIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Customer_id;
    bool m_Customer_idIsSet;
    utility::string_t m_Product_id;
    bool m_Product_idIsSet;
    utility::string_t m_Template_id;
    bool m_Template_idIsSet;
    utility::string_t m_License_type_id;
    bool m_License_type_idIsSet;
    utility::string_t m_Legacy_license_key;
    bool m_Legacy_license_keyIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    int32_t m_Token_limit;
    bool m_Token_limitIsSet;
    int32_t m_Goodwill_token_limit;
    bool m_Goodwill_token_limitIsSet;
    int32_t m_Floating_token_limit;
    bool m_Floating_token_limitIsSet;
    int32_t m_User_limit;
    bool m_User_limitIsSet;
    utility::string_t m_Software_release_limitation_id;
    bool m_Software_release_limitation_idIsSet;
    bool m_Is_temporary;
    bool m_Is_temporaryIsSet;
    std::vector<std::shared_ptr<LicenseFeatureDto>> m_License_features;
    bool m_License_featuresIsSet;
    std::vector<std::shared_ptr<LicenseLimitationDto>> m_License_limitations;
    bool m_License_limitationsIsSet;
    std::vector<std::shared_ptr<LicenseConstrainedVariableDto>> m_License_constrained_variables;
    bool m_License_constrained_variablesIsSet;
    std::vector<std::shared_ptr<LicenseVariableDto>> m_License_variables;
    bool m_License_variablesIsSet;
    std::vector<std::shared_ptr<LicenseUserGroupDto>> m_License_users_groups;
    bool m_License_users_groupsIsSet;
    std::vector<std::shared_ptr<LicenseUserDto>> m_License_users;
    bool m_License_usersIsSet;
    utility::datetime m_Created_date_utc;
    bool m_Created_date_utcIsSet;
    utility::datetime m_Modified_date_utc;
    bool m_Modified_date_utcIsSet;
    utility::string_t m_Last_modified_by;
    bool m_Last_modified_byIsSet;
    std::shared_ptr<CustomerDto> m_Customer;
    bool m_CustomerIsSet;
    std::shared_ptr<ProductDto> m_Product;
    bool m_ProductIsSet;
    std::shared_ptr<TemplateDto> m_r_template;
    bool m_r_templateIsSet;
    std::shared_ptr<LicenseTypeDto> m_License_type;
    bool m_License_typeIsSet;
    std::shared_ptr<SoftwareReleaseLimitationDto> m_Software_release_limitation;
    bool m_Software_release_limitationIsSet;
    utility::string_t m_Prioritized_software_release;
    bool m_Prioritized_software_releaseIsSet;
    std::vector<std::shared_ptr<MailLogDto>> m_Mail_logs;
    bool m_Mail_logsIsSet;
    utility::string_t m_Client_id;
    bool m_Client_idIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_LicenseDto_H_ */
