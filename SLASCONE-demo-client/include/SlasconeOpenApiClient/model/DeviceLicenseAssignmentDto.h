/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DeviceLicenseAssignmentDto.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_DeviceLicenseAssignmentDto_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_DeviceLicenseAssignmentDto_H_


#include "SlasconeOpenApiClient/ModelBase.h"

#include "SlasconeOpenApiClient/model/TagAssignmentDto.h"
#include "SlasconeOpenApiClient/model/DeviceAnalyticalHeartbeatDto.h"
#include <cpprest/details/basic_types.h>
#include "SlasconeOpenApiClient/model/DeviceHeartbeatDto.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class DeviceHeartbeatDto;
class DeviceAnalyticalHeartbeatDto;
class TagAssignmentDto;


/// <summary>
/// 
/// </summary>
class  DeviceLicenseAssignmentDto
    : public ModelBase
{
public:
    DeviceLicenseAssignmentDto();
    virtual ~DeviceLicenseAssignmentDto();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// DeviceLicenseAssignmentDto members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLicenseId() const;
    bool licenseIdIsSet() const;
    void unsetLicense_id();

    void setLicenseId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getProductId() const;
    bool productIdIsSet() const;
    void unsetProduct_id();

    void setProductId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDeviceName() const;
    bool deviceNameIsSet() const;
    void unsetDevice_name();

    void setDeviceName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDeviceDescription() const;
    bool deviceDescriptionIsSet() const;
    void unsetDevice_description();

    void setDeviceDescription(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTokenKey() const;
    bool tokenKeyIsSet() const;
    void unsetToken_key();

    void setTokenKey(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUserEmail() const;
    bool userEmailIsSet() const;
    void unsetUser_email();

    void setUserEmail(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUserId() const;
    bool userIdIsSet() const;
    void unsetUser_id();

    void setUserId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getClientId() const;
    bool clientIdIsSet() const;
    void unsetClient_id();

    void setClientId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isActivated() const;
    bool activatedIsSet() const;
    void unsetActivated();

    void setActivated(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsSoftwareVersionValid() const;
    bool isSoftwareVersionValidIsSet() const;
    void unsetIs_software_version_valid();

    void setIsSoftwareVersionValid(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsGoodwillLicense() const;
    bool isGoodwillLicenseIsSet() const;
    void unsetIs_goodwill_license();

    void setIsGoodwillLicense(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isHasHeartbeats() const;
    bool hasHeartbeatsIsSet() const;
    void unsetHas_heartbeats();

    void setHasHeartbeats(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isHasConsumptionHeartbeats() const;
    bool hasConsumptionHeartbeatsIsSet() const;
    void unsetHas_consumption_heartbeats();

    void setHasConsumptionHeartbeats(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getActivatedDateUtc() const;
    bool activatedDateUtcIsSet() const;
    void unsetActivated_date_utc();

    void setActivatedDateUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DeviceHeartbeatDto> getHeartbeatInfo() const;
    bool heartbeatInfoIsSet() const;
    void unsetHeartbeat_info();

    void setHeartbeatInfo(const std::shared_ptr<DeviceHeartbeatDto>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isEnforceSoftwareVersionUpgrade() const;
    bool enforceSoftwareVersionUpgradeIsSet() const;
    void unsetEnforce_software_version_upgrade();

    void setEnforceSoftwareVersionUpgrade(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<DeviceAnalyticalHeartbeatDto>>& getDeviceAnalyticalHeartbeats();
    bool deviceAnalyticalHeartbeatsIsSet() const;
    void unsetDevice_analytical_heartbeats();

    void setDeviceAnalyticalHeartbeats(const std::vector<std::shared_ptr<DeviceAnalyticalHeartbeatDto>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSoftwareVersion() const;
    bool softwareVersionIsSet() const;
    void unsetSoftware_version();

    void setSoftwareVersion(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOperatingSystem() const;
    bool operatingSystemIsSet() const;
    void unsetOperating_system();

    void setOperatingSystem(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<TagAssignmentDto>>& getTagAssignments();
    bool tagAssignmentsIsSet() const;
    void unsetTag_assignments();

    void setTagAssignments(const std::vector<std::shared_ptr<TagAssignmentDto>>& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_License_id;
    bool m_License_idIsSet;
    utility::string_t m_Product_id;
    bool m_Product_idIsSet;
    utility::string_t m_Device_name;
    bool m_Device_nameIsSet;
    utility::string_t m_Device_description;
    bool m_Device_descriptionIsSet;
    utility::string_t m_Token_key;
    bool m_Token_keyIsSet;
    utility::string_t m_User_email;
    bool m_User_emailIsSet;
    utility::string_t m_User_id;
    bool m_User_idIsSet;
    utility::string_t m_Client_id;
    bool m_Client_idIsSet;
    bool m_Activated;
    bool m_ActivatedIsSet;
    bool m_Is_software_version_valid;
    bool m_Is_software_version_validIsSet;
    bool m_Is_goodwill_license;
    bool m_Is_goodwill_licenseIsSet;
    bool m_Has_heartbeats;
    bool m_Has_heartbeatsIsSet;
    bool m_Has_consumption_heartbeats;
    bool m_Has_consumption_heartbeatsIsSet;
    utility::datetime m_Activated_date_utc;
    bool m_Activated_date_utcIsSet;
    std::shared_ptr<DeviceHeartbeatDto> m_Heartbeat_info;
    bool m_Heartbeat_infoIsSet;
    bool m_Enforce_software_version_upgrade;
    bool m_Enforce_software_version_upgradeIsSet;
    std::vector<std::shared_ptr<DeviceAnalyticalHeartbeatDto>> m_Device_analytical_heartbeats;
    bool m_Device_analytical_heartbeatsIsSet;
    utility::string_t m_Software_version;
    bool m_Software_versionIsSet;
    utility::string_t m_Operating_system;
    bool m_Operating_systemIsSet;
    std::vector<std::shared_ptr<TagAssignmentDto>> m_Tag_assignments;
    bool m_Tag_assignmentsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_DeviceLicenseAssignmentDto_H_ */
