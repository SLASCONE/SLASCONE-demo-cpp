/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * LicenseTreeDto.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_LicenseTreeDto_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_LicenseTreeDto_H_


#include "SlasconeOpenApiClient/ModelBase.h"

#include "SlasconeOpenApiClient/model/ExpirationMode.h"
#include "SlasconeOpenApiClient/model/OfflineLicensing.h"
#include "SlasconeOpenApiClient/model/TagAssignmentDto.h"
#include "SlasconeOpenApiClient/model/ClientType.h"
#include <cpprest/details/basic_types.h>
#include <vector>
#include "SlasconeOpenApiClient/model/PrioritizedKeyMode.h"
#include "SlasconeOpenApiClient/model/ProvisioningMode.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class TagAssignmentDto;


/// <summary>
/// 
/// </summary>
class  LicenseTreeDto
    : public ModelBase
{
public:
    LicenseTreeDto();
    virtual ~LicenseTreeDto();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// LicenseTreeDto members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLegacyLicenseKey() const;
    bool legacyLicenseKeyIsSet() const;
    void unsetLegacy_license_key();

    void setLegacyLicenseKey(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsActive() const;
    bool isActiveIsSet() const;
    void unsetIs_active();

    void setIsActive(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsSoftwareReleaseValid() const;
    bool isSoftwareReleaseValidIsSet() const;
    void unsetIs_software_release_valid();

    void setIsSoftwareReleaseValid(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsGroupValid() const;
    bool isGroupValidIsSet() const;
    void unsetIs_group_valid();

    void setIsGroupValid(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCustomerId() const;
    bool customerIdIsSet() const;
    void unsetCustomer_id();

    void setCustomerId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCustomerNumber() const;
    bool customerNumberIsSet() const;
    void unsetCustomer_number();

    void setCustomerNumber(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCustomerEmail() const;
    bool customerEmailIsSet() const;
    void unsetCustomer_email();

    void setCustomerEmail(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCompanyName() const;
    bool companyNameIsSet() const;
    void unsetCompany_name();

    void setCompanyName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCustomerType() const;
    bool customerTypeIsSet() const;
    void unsetCustomer_type();

    void setCustomerType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getProductId() const;
    bool productIdIsSet() const;
    void unsetProduct_id();

    void setProductId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getProductName() const;
    bool productNameIsSet() const;
    void unsetProduct_name();

    void setProductName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTemplateId() const;
    bool templateIdIsSet() const;
    void unsetTemplate_id();

    void setTemplateId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTemplateName() const;
    bool templateNameIsSet() const;
    void unsetTemplate_name();

    void setTemplateName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSoftwareRelease() const;
    bool softwareReleaseIsSet() const;
    void unsetSoftware_release();

    void setSoftwareRelease(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLicenseTypeName() const;
    bool licenseTypeNameIsSet() const;
    void unsetLicense_type_name();

    void setLicenseTypeName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ExpirationMode> getExpirationMode() const;
    bool expirationModeIsSet() const;
    void unsetExpiration_mode();

    void setExpirationMode(const std::shared_ptr<ExpirationMode>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTokenLimit() const;
    bool tokenLimitIsSet() const;
    void unsetToken_limit();

    void setTokenLimit(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getGoodwillTokenLimit() const;
    bool goodwillTokenLimitIsSet() const;
    void unsetGoodwill_token_limit();

    void setGoodwillTokenLimit(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getFloatingTokenLimit() const;
    bool floatingTokenLimitIsSet() const;
    void unsetFloating_token_limit();

    void setFloatingTokenLimit(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getUserLimit() const;
    bool userLimitIsSet() const;
    void unsetUser_limit();

    void setUserLimit(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getActiveUsers() const;
    bool activeUsersIsSet() const;
    void unsetActive_users();

    void setActiveUsers(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getActiveFloatingTokens() const;
    bool activeFloatingTokensIsSet() const;
    void unsetActive_floating_tokens();

    void setActiveFloatingTokens(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getDateOfIssueUtc() const;
    bool dateOfIssueUtcIsSet() const;
    void unsetDate_of_issue_utc();

    void setDateOfIssueUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getExpirationDateUtc() const;
    bool expirationDateUtcIsSet() const;
    void unsetExpiration_date_utc();

    void setExpirationDateUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getCreatedDateUtc() const;
    bool createdDateUtcIsSet() const;
    void unsetCreated_date_utc();

    void setCreatedDateUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLastModifiedBy() const;
    bool lastModifiedByIsSet() const;
    void unsetLast_modified_by();

    void setLastModifiedBy(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getModifiedDateUtc() const;
    bool modifiedDateUtcIsSet() const;
    void unsetModified_date_utc();

    void setModifiedDateUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PrioritizedKeyMode> getPrioritizedKey() const;
    bool prioritizedKeyIsSet() const;
    void unsetPrioritized_key();

    void setPrioritizedKey(const std::shared_ptr<PrioritizedKeyMode>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OfflineLicensing> getOfflineMode() const;
    bool offlineModeIsSet() const;
    void unsetOffline_mode();

    void setOfflineMode(const std::shared_ptr<OfflineLicensing>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getGroupCount() const;
    bool groupCountIsSet() const;
    void unsetGroup_count();

    void setGroupCount(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsTemporary() const;
    bool isTemporaryIsSet() const;
    void unsetIs_temporary();

    void setIsTemporary(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isHasConsumptionHeartbeats() const;
    bool hasConsumptionHeartbeatsIsSet() const;
    void unsetHas_consumption_heartbeats();

    void setHasConsumptionHeartbeats(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ProvisioningMode> getProvisioningMode() const;
    bool provisioningModeIsSet() const;
    void unsetProvisioning_mode();

    void setProvisioningMode(const std::shared_ptr<ProvisioningMode>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ClientType> getClientType() const;
    bool clientTypeIsSet() const;
    void unsetClient_type();

    void setClientType(const std::shared_ptr<ClientType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<TagAssignmentDto>>& getTagAssignments();
    bool tagAssignmentsIsSet() const;
    void unsetTag_assignments();

    void setTagAssignments(const std::vector<std::shared_ptr<TagAssignmentDto>>& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    utility::string_t m_Legacy_license_key;
    bool m_Legacy_license_keyIsSet;
    bool m_Is_active;
    bool m_Is_activeIsSet;
    bool m_Is_software_release_valid;
    bool m_Is_software_release_validIsSet;
    bool m_Is_group_valid;
    bool m_Is_group_validIsSet;
    utility::string_t m_Customer_id;
    bool m_Customer_idIsSet;
    utility::string_t m_Customer_number;
    bool m_Customer_numberIsSet;
    utility::string_t m_Customer_email;
    bool m_Customer_emailIsSet;
    utility::string_t m_Company_name;
    bool m_Company_nameIsSet;
    utility::string_t m_Customer_type;
    bool m_Customer_typeIsSet;
    utility::string_t m_Product_id;
    bool m_Product_idIsSet;
    utility::string_t m_Product_name;
    bool m_Product_nameIsSet;
    utility::string_t m_Template_id;
    bool m_Template_idIsSet;
    utility::string_t m_Template_name;
    bool m_Template_nameIsSet;
    utility::string_t m_Software_release;
    bool m_Software_releaseIsSet;
    utility::string_t m_License_type_name;
    bool m_License_type_nameIsSet;
    std::shared_ptr<ExpirationMode> m_Expiration_mode;
    bool m_Expiration_modeIsSet;
    int32_t m_Token_limit;
    bool m_Token_limitIsSet;
    int32_t m_Goodwill_token_limit;
    bool m_Goodwill_token_limitIsSet;
    int32_t m_Floating_token_limit;
    bool m_Floating_token_limitIsSet;
    int32_t m_User_limit;
    bool m_User_limitIsSet;
    int32_t m_Active_users;
    bool m_Active_usersIsSet;
    int32_t m_Active_floating_tokens;
    bool m_Active_floating_tokensIsSet;
    utility::datetime m_Date_of_issue_utc;
    bool m_Date_of_issue_utcIsSet;
    utility::datetime m_Expiration_date_utc;
    bool m_Expiration_date_utcIsSet;
    utility::datetime m_Created_date_utc;
    bool m_Created_date_utcIsSet;
    utility::string_t m_Last_modified_by;
    bool m_Last_modified_byIsSet;
    utility::datetime m_Modified_date_utc;
    bool m_Modified_date_utcIsSet;
    std::shared_ptr<PrioritizedKeyMode> m_Prioritized_key;
    bool m_Prioritized_keyIsSet;
    std::shared_ptr<OfflineLicensing> m_Offline_mode;
    bool m_Offline_modeIsSet;
    int32_t m_Group_count;
    bool m_Group_countIsSet;
    bool m_Is_temporary;
    bool m_Is_temporaryIsSet;
    bool m_Has_consumption_heartbeats;
    bool m_Has_consumption_heartbeatsIsSet;
    std::shared_ptr<ProvisioningMode> m_Provisioning_mode;
    bool m_Provisioning_modeIsSet;
    std::shared_ptr<ClientType> m_Client_type;
    bool m_Client_typeIsSet;
    std::vector<std::shared_ptr<TagAssignmentDto>> m_Tag_assignments;
    bool m_Tag_assignmentsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_LicenseTreeDto_H_ */
