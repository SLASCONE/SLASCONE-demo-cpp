/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ConsumptionHeartbeatDto.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ConsumptionHeartbeatDto_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ConsumptionHeartbeatDto_H_


#include "SlasconeOpenApiClient/ModelBase.h"

#include "SlasconeOpenApiClient/model/LicenseUserDto.h"
#include "SlasconeOpenApiClient/model/LimitationDto.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class LimitationDto;
class LicenseUserDto;


/// <summary>
/// 
/// </summary>
class  ConsumptionHeartbeatDto
    : public ModelBase
{
public:
    ConsumptionHeartbeatDto();
    virtual ~ConsumptionHeartbeatDto();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ConsumptionHeartbeatDto members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    double getValue() const;
    bool valueIsSet() const;
    void unsetValue();

    void setValue(double value);

    /// <summary>
    /// 
    /// </summary>
    double getRemaining() const;
    bool remainingIsSet() const;
    void unsetRemaining();

    void setRemaining(double value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAssignmentId() const;
    bool assignmentIdIsSet() const;
    void unsetAssignment_id();

    void setAssignmentId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getClientId() const;
    bool clientIdIsSet() const;
    void unsetClient_id();

    void setClientId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLicenseId() const;
    bool licenseIdIsSet() const;
    void unsetLicense_id();

    void setLicenseId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLimitationId() const;
    bool limitationIdIsSet() const;
    void unsetLimitation_id();

    void setLimitationId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<LimitationDto> getLimitation() const;
    bool limitationIsSet() const;
    void unsetLimitation();

    void setLimitation(const std::shared_ptr<LimitationDto>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUserId() const;
    bool userIdIsSet() const;
    void unsetUser_id();

    void setUserId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<LicenseUserDto> getLicenseUser() const;
    bool licenseUserIsSet() const;
    void unsetLicense_user();

    void setLicenseUser(const std::shared_ptr<LicenseUserDto>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getCreatedDateUtc() const;
    bool createdDateUtcIsSet() const;
    void unsetCreated_date_utc();

    void setCreatedDateUtc(const utility::datetime& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    double m_Value;
    bool m_ValueIsSet;
    double m_Remaining;
    bool m_RemainingIsSet;
    utility::string_t m_Assignment_id;
    bool m_Assignment_idIsSet;
    utility::string_t m_Client_id;
    bool m_Client_idIsSet;
    utility::string_t m_License_id;
    bool m_License_idIsSet;
    utility::string_t m_Limitation_id;
    bool m_Limitation_idIsSet;
    std::shared_ptr<LimitationDto> m_Limitation;
    bool m_LimitationIsSet;
    utility::string_t m_User_id;
    bool m_User_idIsSet;
    std::shared_ptr<LicenseUserDto> m_License_user;
    bool m_License_userIsSet;
    utility::datetime m_Created_date_utc;
    bool m_Created_date_utcIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ConsumptionHeartbeatDto_H_ */
