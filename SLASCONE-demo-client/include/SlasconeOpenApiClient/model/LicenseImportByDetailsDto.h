/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * LicenseImportByDetailsDto.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_LicenseImportByDetailsDto_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_LicenseImportByDetailsDto_H_


#include "SlasconeOpenApiClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "SlasconeOpenApiClient/model/LicenseImportConstrainedVariableDto.h"
#include "SlasconeOpenApiClient/model/LicenseImportLimitationDto.h"
#include <vector>
#include "SlasconeOpenApiClient/model/LicenseImportVariableDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class LicenseImportLimitationDto;
class LicenseImportVariableDto;
class LicenseImportConstrainedVariableDto;


/// <summary>
/// 
/// </summary>
class  LicenseImportByDetailsDto
    : public ModelBase
{
public:
    LicenseImportByDetailsDto();
    virtual ~LicenseImportByDetailsDto();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// LicenseImportByDetailsDto members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getProductId() const;
    bool productIdIsSet() const;
    void unsetProduct_id();

    void setProductId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCustomerNumber() const;
    bool customerNumberIsSet() const;
    void unsetCustomer_number();

    void setCustomerNumber(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRTemplate() const;
    bool rTemplateIsSet() const;
    void unsetr_template();

    void setRTemplate(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLegacyLicenseKey() const;
    bool legacyLicenseKeyIsSet() const;
    void unsetLegacy_license_key();

    void setLegacyLicenseKey(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTokenLimit() const;
    bool tokenLimitIsSet() const;
    void unsetToken_limit();

    void setTokenLimit(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getGoodwillTokenLimit() const;
    bool goodwillTokenLimitIsSet() const;
    void unsetGoodwill_token_limit();

    void setGoodwillTokenLimit(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getFloatingTokenLimit() const;
    bool floatingTokenLimitIsSet() const;
    void unsetFloating_token_limit();

    void setFloatingTokenLimit(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getUserLimit() const;
    bool userLimitIsSet() const;
    void unsetUser_limit();

    void setUserLimit(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getExpirationDate() const;
    bool expirationDateIsSet() const;
    void unsetExpiration_date();

    void setExpirationDate(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLicenseType() const;
    bool licenseTypeIsSet() const;
    void unsetLicense_type();

    void setLicenseType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSoftwareReleaseLimitation() const;
    bool softwareReleaseLimitationIsSet() const;
    void unsetSoftware_release_limitation();

    void setSoftwareReleaseLimitation(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getLicenseFeatures();
    bool licenseFeaturesIsSet() const;
    void unsetLicense_features();

    void setLicenseFeatures(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<LicenseImportLimitationDto>>& getLicenseLimitations();
    bool licenseLimitationsIsSet() const;
    void unsetLicense_limitations();

    void setLicenseLimitations(const std::vector<std::shared_ptr<LicenseImportLimitationDto>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<LicenseImportVariableDto>>& getLicenseVariables();
    bool licenseVariablesIsSet() const;
    void unsetLicense_variables();

    void setLicenseVariables(const std::vector<std::shared_ptr<LicenseImportVariableDto>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<LicenseImportConstrainedVariableDto>>& getLicenseConstrainedVariables();
    bool licenseConstrainedVariablesIsSet() const;
    void unsetLicense_constrained_variables();

    void setLicenseConstrainedVariables(const std::vector<std::shared_ptr<LicenseImportConstrainedVariableDto>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getTags();
    bool tagsIsSet() const;
    void unsetTags();

    void setTags(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsActive() const;
    bool isActiveIsSet() const;
    void unsetIs_active();

    void setIsActive(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isResumeOnError() const;
    bool resumeOnErrorIsSet() const;
    void unsetResume_on_error();

    void setResumeOnError(bool value);


protected:
    utility::string_t m_Product_id;
    bool m_Product_idIsSet;
    utility::string_t m_Customer_number;
    bool m_Customer_numberIsSet;
    utility::string_t m_r_template;
    bool m_r_templateIsSet;
    utility::string_t m_Legacy_license_key;
    bool m_Legacy_license_keyIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    int32_t m_Token_limit;
    bool m_Token_limitIsSet;
    int32_t m_Goodwill_token_limit;
    bool m_Goodwill_token_limitIsSet;
    int32_t m_Floating_token_limit;
    bool m_Floating_token_limitIsSet;
    int32_t m_User_limit;
    bool m_User_limitIsSet;
    utility::string_t m_Expiration_date;
    bool m_Expiration_dateIsSet;
    utility::string_t m_License_type;
    bool m_License_typeIsSet;
    utility::string_t m_Software_release_limitation;
    bool m_Software_release_limitationIsSet;
    std::vector<utility::string_t> m_License_features;
    bool m_License_featuresIsSet;
    std::vector<std::shared_ptr<LicenseImportLimitationDto>> m_License_limitations;
    bool m_License_limitationsIsSet;
    std::vector<std::shared_ptr<LicenseImportVariableDto>> m_License_variables;
    bool m_License_variablesIsSet;
    std::vector<std::shared_ptr<LicenseImportConstrainedVariableDto>> m_License_constrained_variables;
    bool m_License_constrained_variablesIsSet;
    std::vector<utility::string_t> m_Tags;
    bool m_TagsIsSet;
    bool m_Is_active;
    bool m_Is_activeIsSet;
    bool m_Resume_on_error;
    bool m_Resume_on_errorIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_LicenseImportByDetailsDto_H_ */
