/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ImportResultDto.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ImportResultDto_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ImportResultDto_H_


#include "SlasconeOpenApiClient/ModelBase.h"

#include <vector>
#include "SlasconeOpenApiClient/model/OmittedDataSet.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class OmittedDataSet;


/// <summary>
/// 
/// </summary>
class  ImportResultDto
    : public ModelBase
{
public:
    ImportResultDto();
    virtual ~ImportResultDto();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ImportResultDto members

    /// <summary>
    /// 
    /// </summary>
    int32_t getImportedRows() const;
    bool importedRowsIsSet() const;
    void unsetImported_rows();

    void setImportedRows(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<OmittedDataSet>>& getOmittedRows();
    bool omittedRowsIsSet() const;
    void unsetOmitted_rows();

    void setOmittedRows(const std::vector<std::shared_ptr<OmittedDataSet>>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getSkippedRows() const;
    bool skippedRowsIsSet() const;
    void unsetSkipped_rows();

    void setSkippedRows(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTotalRows() const;
    bool totalRowsIsSet() const;
    void unsetTotal_rows();

    void setTotalRows(int32_t value);


protected:
    int32_t m_Imported_rows;
    bool m_Imported_rowsIsSet;
    std::vector<std::shared_ptr<OmittedDataSet>> m_Omitted_rows;
    bool m_Omitted_rowsIsSet;
    int32_t m_Skipped_rows;
    bool m_Skipped_rowsIsSet;
    int32_t m_Total_rows;
    bool m_Total_rowsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ImportResultDto_H_ */
