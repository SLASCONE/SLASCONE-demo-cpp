/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * LicenseInfoDto.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_LicenseInfoDto_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_LicenseInfoDto_H_


#include "SlasconeOpenApiClient/ModelBase.h"

#include "SlasconeOpenApiClient/model/LicenseUserDto.h"
#include "SlasconeOpenApiClient/model/LicenseTypeDto.h"
#include "SlasconeOpenApiClient/model/ProvisioningLimitationDto.h"
#include "SlasconeOpenApiClient/model/ProvisioningFeatureDto.h"
#include "SlasconeOpenApiClient/model/ClientType.h"
#include "SlasconeOpenApiClient/model/CustomerAccountDto.h"
#include <cpprest/details/basic_types.h>
#include "SlasconeOpenApiClient/model/ProvisioningConstrainedVariableDto.h"
#include "SlasconeOpenApiClient/model/ProvisioningVariableDto.h"
#include "SlasconeOpenApiClient/model/SoftwareReleaseLimitationDto.h"
#include <vector>
#include "SlasconeOpenApiClient/model/ProvisioningMode.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class CustomerAccountDto;
class SoftwareReleaseLimitationDto;
class ProvisioningFeatureDto;
class ProvisioningLimitationDto;
class ProvisioningVariableDto;
class ProvisioningConstrainedVariableDto;
class LicenseUserDto;
class LicenseTypeDto;


/// <summary>
/// 
/// </summary>
class  LicenseInfoDto
    : public ModelBase
{
public:
    LicenseInfoDto();
    virtual ~LicenseInfoDto();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// LicenseInfoDto members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CustomerAccountDto> getCustomer() const;
    bool customerIsSet() const;
    void unsetCustomer();

    void setCustomer(const std::shared_ptr<CustomerAccountDto>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLicenseName() const;
    bool licenseNameIsSet() const;
    void unsetLicense_name();

    void setLicenseName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLicenseKey() const;
    bool licenseKeyIsSet() const;
    void unsetLicense_key();

    void setLicenseKey(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTokenKey() const;
    bool tokenKeyIsSet() const;
    void unsetToken_key();

    void setTokenKey(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLegacyLicenseKey() const;
    bool legacyLicenseKeyIsSet() const;
    void unsetLegacy_license_key();

    void setLegacyLicenseKey(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getClientId() const;
    bool clientIdIsSet() const;
    void unsetClient_id();

    void setClientId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getClientDescription() const;
    bool clientDescriptionIsSet() const;
    void unsetClient_description();

    void setClientDescription(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getProductName() const;
    bool productNameIsSet() const;
    void unsetProduct_name();

    void setProductName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getProductId() const;
    bool productIdIsSet() const;
    void unsetProduct_id();

    void setProductId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTemplateName() const;
    bool templateNameIsSet() const;
    void unsetTemplate_name();

    void setTemplateName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTemplateId() const;
    bool templateIdIsSet() const;
    void unsetTemplate_id();

    void setTemplateId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ProvisioningMode> getProvisioningMode() const;
    bool provisioningModeIsSet() const;
    void unsetProvisioning_mode();

    void setProvisioningMode(const std::shared_ptr<ProvisioningMode>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ClientType> getClientType() const;
    bool clientTypeIsSet() const;
    void unsetClient_type();

    void setClientType(const std::shared_ptr<ClientType>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsLicenseActive() const;
    bool isLicenseActiveIsSet() const;
    void unsetIs_license_active();

    void setIsLicenseActive(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsLicenseExpired() const;
    bool isLicenseExpiredIsSet() const;
    void unsetIs_license_expired();

    void setIsLicenseExpired(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsLicenseValid() const;
    bool isLicenseValidIsSet() const;
    void unsetIs_license_valid();

    void setIsLicenseValid(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getExpirationDateUtc() const;
    bool expirationDateUtcIsSet() const;
    void unsetExpiration_date_utc();

    void setExpirationDateUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTokenLimit() const;
    bool tokenLimitIsSet() const;
    void unsetToken_limit();

    void setTokenLimit(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getFloatingTokenLimit() const;
    bool floatingTokenLimitIsSet() const;
    void unsetFloating_token_limit();

    void setFloatingTokenLimit(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsTemporary() const;
    bool isTemporaryIsSet() const;
    void unsetIs_temporary();

    void setIsTemporary(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsSoftwareVersionValid() const;
    bool isSoftwareVersionValidIsSet() const;
    void unsetIs_software_version_valid();

    void setIsSoftwareVersionValid(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SoftwareReleaseLimitationDto> getSoftwareReleaseLimitation() const;
    bool softwareReleaseLimitationIsSet() const;
    void unsetSoftware_release_limitation();

    void setSoftwareReleaseLimitation(const std::shared_ptr<SoftwareReleaseLimitationDto>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getSessionPeriod() const;
    bool sessionPeriodIsSet() const;
    void unsetSession_period();

    void setSessionPeriod(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getHeartbeatPeriod() const;
    bool heartbeatPeriodIsSet() const;
    void unsetHeartbeat_period();

    void setHeartbeatPeriod(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getFreeride() const;
    bool freerideIsSet() const;
    void unsetFreeride();

    void setFreeride(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    bool isEnforceSoftwareVersionUpgrade() const;
    bool enforceSoftwareVersionUpgradeIsSet() const;
    void unsetEnforce_software_version_upgrade();

    void setEnforceSoftwareVersionUpgrade(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<ProvisioningFeatureDto>>& getFeatures();
    bool featuresIsSet() const;
    void unsetFeatures();

    void setFeatures(const std::vector<std::shared_ptr<ProvisioningFeatureDto>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<ProvisioningLimitationDto>>& getLimitations();
    bool limitationsIsSet() const;
    void unsetLimitations();

    void setLimitations(const std::vector<std::shared_ptr<ProvisioningLimitationDto>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<ProvisioningVariableDto>>& getVariables();
    bool variablesIsSet() const;
    void unsetVariables();

    void setVariables(const std::vector<std::shared_ptr<ProvisioningVariableDto>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<ProvisioningConstrainedVariableDto>>& getConstrainedVariables();
    bool constrainedVariablesIsSet() const;
    void unsetConstrained_variables();

    void setConstrainedVariables(const std::vector<std::shared_ptr<ProvisioningConstrainedVariableDto>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<LicenseUserDto>>& getLicenseUsers();
    bool licenseUsersIsSet() const;
    void unsetLicense_users();

    void setLicenseUsers(const std::vector<std::shared_ptr<LicenseUserDto>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getCreatedDateUtc() const;
    bool createdDateUtcIsSet() const;
    void unsetCreated_date_utc();

    void setCreatedDateUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<LicenseTypeDto> getLicenseType() const;
    bool licenseTypeIsSet() const;
    void unsetLicense_type();

    void setLicenseType(const std::shared_ptr<LicenseTypeDto>& value);


protected:
    std::shared_ptr<CustomerAccountDto> m_Customer;
    bool m_CustomerIsSet;
    utility::string_t m_License_name;
    bool m_License_nameIsSet;
    utility::string_t m_License_key;
    bool m_License_keyIsSet;
    utility::string_t m_Token_key;
    bool m_Token_keyIsSet;
    utility::string_t m_Legacy_license_key;
    bool m_Legacy_license_keyIsSet;
    utility::string_t m_Client_id;
    bool m_Client_idIsSet;
    utility::string_t m_Client_description;
    bool m_Client_descriptionIsSet;
    utility::string_t m_Product_name;
    bool m_Product_nameIsSet;
    utility::string_t m_Product_id;
    bool m_Product_idIsSet;
    utility::string_t m_Template_name;
    bool m_Template_nameIsSet;
    utility::string_t m_Template_id;
    bool m_Template_idIsSet;
    std::shared_ptr<ProvisioningMode> m_Provisioning_mode;
    bool m_Provisioning_modeIsSet;
    std::shared_ptr<ClientType> m_Client_type;
    bool m_Client_typeIsSet;
    bool m_Is_license_active;
    bool m_Is_license_activeIsSet;
    bool m_Is_license_expired;
    bool m_Is_license_expiredIsSet;
    bool m_Is_license_valid;
    bool m_Is_license_validIsSet;
    utility::datetime m_Expiration_date_utc;
    bool m_Expiration_date_utcIsSet;
    int32_t m_Token_limit;
    bool m_Token_limitIsSet;
    int32_t m_Floating_token_limit;
    bool m_Floating_token_limitIsSet;
    bool m_Is_temporary;
    bool m_Is_temporaryIsSet;
    bool m_Is_software_version_valid;
    bool m_Is_software_version_validIsSet;
    std::shared_ptr<SoftwareReleaseLimitationDto> m_Software_release_limitation;
    bool m_Software_release_limitationIsSet;
    int32_t m_Session_period;
    bool m_Session_periodIsSet;
    int32_t m_Heartbeat_period;
    bool m_Heartbeat_periodIsSet;
    int32_t m_Freeride;
    bool m_FreerideIsSet;
    bool m_Enforce_software_version_upgrade;
    bool m_Enforce_software_version_upgradeIsSet;
    std::vector<std::shared_ptr<ProvisioningFeatureDto>> m_Features;
    bool m_FeaturesIsSet;
    std::vector<std::shared_ptr<ProvisioningLimitationDto>> m_Limitations;
    bool m_LimitationsIsSet;
    std::vector<std::shared_ptr<ProvisioningVariableDto>> m_Variables;
    bool m_VariablesIsSet;
    std::vector<std::shared_ptr<ProvisioningConstrainedVariableDto>> m_Constrained_variables;
    bool m_Constrained_variablesIsSet;
    std::vector<std::shared_ptr<LicenseUserDto>> m_License_users;
    bool m_License_usersIsSet;
    utility::datetime m_Created_date_utc;
    bool m_Created_date_utcIsSet;
    std::shared_ptr<LicenseTypeDto> m_License_type;
    bool m_License_typeIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_LicenseInfoDto_H_ */
