/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * LicenseBundleDto.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_LicenseBundleDto_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_LicenseBundleDto_H_


#include "SlasconeOpenApiClient/ModelBase.h"

#include "SlasconeOpenApiClient/model/LicenseBundleAssignmentDto.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class LicenseBundleAssignmentDto;


/// <summary>
/// 
/// </summary>
class  LicenseBundleDto
    : public ModelBase
{
public:
    LicenseBundleDto();
    virtual ~LicenseBundleDto();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// LicenseBundleDto members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsActive() const;
    bool isActiveIsSet() const;
    void unsetIs_active();

    void setIsActive(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCustomerId() const;
    bool customerIdIsSet() const;
    void unsetCustomer_id();

    void setCustomerId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCustomerName() const;
    bool customerNameIsSet() const;
    void unsetCustomer_name();

    void setCustomerName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getCreatedDateUtc() const;
    bool createdDateUtcIsSet() const;
    void unsetCreated_date_utc();

    void setCreatedDateUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getModifiedDateUtc() const;
    bool modifiedDateUtcIsSet() const;
    void unsetModified_date_utc();

    void setModifiedDateUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLastModifiedBy() const;
    bool lastModifiedByIsSet() const;
    void unsetLast_modified_by();

    void setLastModifiedBy(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<LicenseBundleAssignmentDto>>& getAssignments();
    bool assignmentsIsSet() const;
    void unsetAssignments();

    void setAssignments(const std::vector<std::shared_ptr<LicenseBundleAssignmentDto>>& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    bool m_Is_active;
    bool m_Is_activeIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    utility::string_t m_Customer_id;
    bool m_Customer_idIsSet;
    utility::string_t m_Customer_name;
    bool m_Customer_nameIsSet;
    utility::datetime m_Created_date_utc;
    bool m_Created_date_utcIsSet;
    utility::datetime m_Modified_date_utc;
    bool m_Modified_date_utcIsSet;
    utility::string_t m_Last_modified_by;
    bool m_Last_modified_byIsSet;
    std::vector<std::shared_ptr<LicenseBundleAssignmentDto>> m_Assignments;
    bool m_AssignmentsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_LicenseBundleDto_H_ */
