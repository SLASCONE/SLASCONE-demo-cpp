/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ProductDto.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ProductDto_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ProductDto_H_


#include "SlasconeOpenApiClient/ModelBase.h"

#include "SlasconeOpenApiClient/model/OfflineLicensing.h"
#include "SlasconeOpenApiClient/model/UserIdType.h"
#include "SlasconeOpenApiClient/model/ClientIdMode.h"
#include "SlasconeOpenApiClient/model/ResourceDto.h"
#include <cpprest/details/basic_types.h>
#include "SlasconeOpenApiClient/model/SoftwareReleaseLimitationDto.h"
#include <vector>
#include "SlasconeOpenApiClient/model/PrioritizedKeyMode.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class SoftwareReleaseLimitationDto;
class ResourceDto;


/// <summary>
/// 
/// </summary>
class  ProductDto
    : public ModelBase
{
public:
    ProductDto();
    virtual ~ProductDto();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ProductDto members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getShortDescription() const;
    bool shortDescriptionIsSet() const;
    void unsetShort_description();

    void setShortDescription(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMinimumSoftwareReleaseId() const;
    bool minimumSoftwareReleaseIdIsSet() const;
    void unsetMinimum_software_release_id();

    void setMinimumSoftwareReleaseId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<SoftwareReleaseLimitationDto>>& getSoftwareRelease();
    bool softwareReleaseIsSet() const;
    void unsetSoftware_release();

    void setSoftwareRelease(const std::vector<std::shared_ptr<SoftwareReleaseLimitationDto>>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsGoodwillVisible() const;
    bool isGoodwillVisibleIsSet() const;
    void unsetIs_goodwill_visible();

    void setIsGoodwillVisible(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsUpgradeComplianceVisible() const;
    bool isUpgradeComplianceVisibleIsSet() const;
    void unsetIs_upgrade_compliance_visible();

    void setIsUpgradeComplianceVisible(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsGroupComplianceVisible() const;
    bool isGroupComplianceVisibleIsSet() const;
    void unsetIs_group_compliance_visible();

    void setIsGroupComplianceVisible(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsTemporaryLicenseRulesVisible() const;
    bool isTemporaryLicenseRulesVisibleIsSet() const;
    void unsetIs_temporary_license_rules_visible();

    void setIsTemporaryLicenseRulesVisible(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PrioritizedKeyMode> getPrioritizedKey() const;
    bool prioritizedKeyIsSet() const;
    void unsetPrioritized_key();

    void setPrioritizedKey(const std::shared_ptr<PrioritizedKeyMode>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OfflineLicensing> getOfflineLicensing() const;
    bool offlineLicensingIsSet() const;
    void unsetOffline_licensing();

    void setOfflineLicensing(const std::shared_ptr<OfflineLicensing>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLicenseFileName() const;
    bool licenseFileNameIsSet() const;
    void unsetLicense_file_name();

    void setLicenseFileName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<UserIdType> getUserIdType() const;
    bool userIdTypeIsSet() const;
    void unsetUser_id_type();

    void setUserIdType(const std::shared_ptr<UserIdType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ClientIdMode> getClientIdMode() const;
    bool clientIdModeIsSet() const;
    void unsetClient_id_mode();

    void setClientIdMode(const std::shared_ptr<ClientIdMode>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getMaximumInactiveDays() const;
    bool maximumInactiveDaysIsSet() const;
    void unsetMaximum_inactive_days();

    void setMaximumInactiveDays(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getMaxLicensesPerUser() const;
    bool maxLicensesPerUserIsSet() const;
    void unsetMax_licenses_per_user();

    void setMaxLicensesPerUser(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getCreatedDateUtc() const;
    bool createdDateUtcIsSet() const;
    void unsetCreated_date_utc();

    void setCreatedDateUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getModifiedDateUtc() const;
    bool modifiedDateUtcIsSet() const;
    void unsetModified_date_utc();

    void setModifiedDateUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLastModifiedBy() const;
    bool lastModifiedByIsSet() const;
    void unsetLast_modified_by();

    void setLastModifiedBy(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SoftwareReleaseLimitationDto> getMinimumSoftwareRelease() const;
    bool minimumSoftwareReleaseIsSet() const;
    void unsetMinimum_software_release();

    void setMinimumSoftwareRelease(const std::shared_ptr<SoftwareReleaseLimitationDto>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ResourceDto> getLogo() const;
    bool logoIsSet() const;
    void unsetLogo();

    void setLogo(const std::shared_ptr<ResourceDto>& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    utility::string_t m_Short_description;
    bool m_Short_descriptionIsSet;
    utility::string_t m_Minimum_software_release_id;
    bool m_Minimum_software_release_idIsSet;
    std::vector<std::shared_ptr<SoftwareReleaseLimitationDto>> m_Software_release;
    bool m_Software_releaseIsSet;
    bool m_Is_goodwill_visible;
    bool m_Is_goodwill_visibleIsSet;
    bool m_Is_upgrade_compliance_visible;
    bool m_Is_upgrade_compliance_visibleIsSet;
    bool m_Is_group_compliance_visible;
    bool m_Is_group_compliance_visibleIsSet;
    bool m_Is_temporary_license_rules_visible;
    bool m_Is_temporary_license_rules_visibleIsSet;
    std::shared_ptr<PrioritizedKeyMode> m_Prioritized_key;
    bool m_Prioritized_keyIsSet;
    std::shared_ptr<OfflineLicensing> m_Offline_licensing;
    bool m_Offline_licensingIsSet;
    utility::string_t m_License_file_name;
    bool m_License_file_nameIsSet;
    std::shared_ptr<UserIdType> m_User_id_type;
    bool m_User_id_typeIsSet;
    std::shared_ptr<ClientIdMode> m_Client_id_mode;
    bool m_Client_id_modeIsSet;
    int32_t m_Maximum_inactive_days;
    bool m_Maximum_inactive_daysIsSet;
    int32_t m_Max_licenses_per_user;
    bool m_Max_licenses_per_userIsSet;
    utility::datetime m_Created_date_utc;
    bool m_Created_date_utcIsSet;
    utility::datetime m_Modified_date_utc;
    bool m_Modified_date_utcIsSet;
    utility::string_t m_Last_modified_by;
    bool m_Last_modified_byIsSet;
    std::shared_ptr<SoftwareReleaseLimitationDto> m_Minimum_software_release;
    bool m_Minimum_software_releaseIsSet;
    std::shared_ptr<ResourceDto> m_Logo;
    bool m_LogoIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ProductDto_H_ */
