/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DeviceHeartbeatDto.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_DeviceHeartbeatDto_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_DeviceHeartbeatDto_H_


#include "SlasconeOpenApiClient/ModelBase.h"

#include "SlasconeOpenApiClient/model/HeartbeatTypeDto.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class HeartbeatTypeDto;


/// <summary>
/// 
/// </summary>
class  DeviceHeartbeatDto
    : public ModelBase
{
public:
    DeviceHeartbeatDto();
    virtual ~DeviceHeartbeatDto();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// DeviceHeartbeatDto members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSoftwareVersion() const;
    bool softwareVersionIsSet() const;
    void unsetSoftware_version();

    void setSoftwareVersion(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOperatingSystem() const;
    bool operatingSystemIsSet() const;
    void unsetOperating_system();

    void setOperatingSystem(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getIpAddress() const;
    bool ipAddressIsSet() const;
    void unsetIp_address();

    void setIpAddress(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getClientId() const;
    bool clientIdIsSet() const;
    void unsetClient_id();

    void setClientId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCountry() const;
    bool countryIsSet() const;
    void unsetCountry();

    void setCountry(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCity() const;
    bool cityIsSet() const;
    void unsetCity();

    void setCity(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getZip() const;
    bool zipIsSet() const;
    void unsetZip();

    void setZip(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLatitude() const;
    bool latitudeIsSet() const;
    void unsetLatitude();

    void setLatitude(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLongitude() const;
    bool longitudeIsSet() const;
    void unsetLongitude();

    void setLongitude(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getCreatedDateUtc() const;
    bool createdDateUtcIsSet() const;
    void unsetCreated_date_utc();

    void setCreatedDateUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDeviceLicenseAssignmentId() const;
    bool deviceLicenseAssignmentIdIsSet() const;
    void unsetDevice_license_assignment_id();

    void setDeviceLicenseAssignmentId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDeviceLicenseId() const;
    bool deviceLicenseIdIsSet() const;
    void unsetDevice_license_id();

    void setDeviceLicenseId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCustomerName() const;
    bool customerNameIsSet() const;
    void unsetCustomer_name();

    void setCustomerName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getHeartbeatTypeId() const;
    bool heartbeatTypeIdIsSet() const;
    void unsetHeartbeat_type_id();

    void setHeartbeatTypeId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<HeartbeatTypeDto> getHeartbeatType() const;
    bool heartbeatTypeIsSet() const;
    void unsetHeartbeat_type();

    void setHeartbeatType(const std::shared_ptr<HeartbeatTypeDto>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getGroupId() const;
    bool groupIdIsSet() const;
    void unsetGroup_id();

    void setGroupId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getValue() const;
    bool valueIsSet() const;
    void unsetValue();

    void setValue(int32_t value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Software_version;
    bool m_Software_versionIsSet;
    utility::string_t m_Operating_system;
    bool m_Operating_systemIsSet;
    utility::string_t m_Ip_address;
    bool m_Ip_addressIsSet;
    utility::string_t m_Client_id;
    bool m_Client_idIsSet;
    utility::string_t m_Country;
    bool m_CountryIsSet;
    utility::string_t m_City;
    bool m_CityIsSet;
    utility::string_t m_Zip;
    bool m_ZipIsSet;
    utility::string_t m_Latitude;
    bool m_LatitudeIsSet;
    utility::string_t m_Longitude;
    bool m_LongitudeIsSet;
    utility::datetime m_Created_date_utc;
    bool m_Created_date_utcIsSet;
    utility::string_t m_Device_license_assignment_id;
    bool m_Device_license_assignment_idIsSet;
    utility::string_t m_Device_license_id;
    bool m_Device_license_idIsSet;
    utility::string_t m_Customer_name;
    bool m_Customer_nameIsSet;
    utility::string_t m_Heartbeat_type_id;
    bool m_Heartbeat_type_idIsSet;
    std::shared_ptr<HeartbeatTypeDto> m_Heartbeat_type;
    bool m_Heartbeat_typeIsSet;
    utility::string_t m_Group_id;
    bool m_Group_idIsSet;
    int32_t m_Value;
    bool m_ValueIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_DeviceHeartbeatDto_H_ */
