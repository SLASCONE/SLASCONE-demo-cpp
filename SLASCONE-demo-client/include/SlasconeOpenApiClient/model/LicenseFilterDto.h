/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * LicenseFilterDto.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_LicenseFilterDto_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_LicenseFilterDto_H_


#include "SlasconeOpenApiClient/ModelBase.h"

#include "SlasconeOpenApiClient/model/AnalyticalFieldFilterDto.h"
#include "SlasconeOpenApiClient/model/LicenseFilterSortType.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class AnalyticalFieldFilterDto;


/// <summary>
/// 
/// </summary>
class  LicenseFilterDto
    : public ModelBase
{
public:
    LicenseFilterDto();
    virtual ~LicenseFilterDto();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// LicenseFilterDto members

    /// <summary>
    /// 
    /// </summary>
    int32_t getPageSize() const;
    bool pageSizeIsSet() const;
    void unsetPage_size();

    void setPageSize(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getPage() const;
    bool pageIsSet() const;
    void unsetPage();

    void setPage(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsActive() const;
    bool isActiveIsSet() const;
    void unsetIs_active();

    void setIsActive(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getKeySearch() const;
    bool keySearchIsSet() const;
    void unsetKey_search();

    void setKeySearch(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getProductFilter() const;
    bool productFilterIsSet() const;
    void unsetProduct_filter();

    void setProductFilter(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCustomerFilter() const;
    bool customerFilterIsSet() const;
    void unsetCustomer_filter();

    void setCustomerFilter(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getCustomerNumberFilter();
    bool customerNumberFilterIsSet() const;
    void unsetCustomer_number_filter();

    void setCustomerNumberFilter(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getCustomerTypeFilter();
    bool customerTypeFilterIsSet() const;
    void unsetCustomer_type_filter();

    void setCustomerTypeFilter(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getResellerTypeFilter();
    bool resellerTypeFilterIsSet() const;
    void unsetReseller_type_filter();

    void setResellerTypeFilter(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getTemplateFilter();
    bool templateFilterIsSet() const;
    void unsetTemplate_filter();

    void setTemplateFilter(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getLicenseTypeFilter();
    bool licenseTypeFilterIsSet() const;
    void unsetLicense_type_filter();

    void setLicenseTypeFilter(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getOperatingSystemFilter();
    bool operatingSystemFilterIsSet() const;
    void unsetOperating_system_filter();

    void setOperatingSystemFilter(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getSoftwareVersionFilter();
    bool softwareVersionFilterIsSet() const;
    void unsetSoftware_version_filter();

    void setSoftwareVersionFilter(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsSoftwareVersionValid() const;
    bool isSoftwareVersionValidIsSet() const;
    void unsetIs_software_version_valid();

    void setIsSoftwareVersionValid(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getFeatureFilter();
    bool featureFilterIsSet() const;
    void unsetFeature_filter();

    void setFeatureFilter(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsFeatureActive() const;
    bool isFeatureActiveIsSet() const;
    void unsetIs_feature_active();

    void setIsFeatureActive(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getDateFilter() const;
    bool dateFilterIsSet() const;
    void unsetDate_filter();

    void setDateFilter(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDateFilterMode() const;
    bool dateFilterModeIsSet() const;
    void unsetDate_filter_mode();

    void setDateFilterMode(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsNormalToken() const;
    bool isNormalTokenIsSet() const;
    void unsetIs_normal_token();

    void setIsNormalToken(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsGoodwillToken() const;
    bool isGoodwillTokenIsSet() const;
    void unsetIs_goodwill_token();

    void setIsGoodwillToken(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsGroupValid() const;
    bool isGroupValidIsSet() const;
    void unsetIs_group_valid();

    void setIsGroupValid(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsAssignedToken() const;
    bool isAssignedTokenIsSet() const;
    void unsetIs_assigned_token();

    void setIsAssignedToken(bool value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getGroupCountFilter() const;
    bool groupCountFilterIsSet() const;
    void unsetGroup_count_filter();

    void setGroupCountFilter(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getGroupCountMode() const;
    bool groupCountModeIsSet() const;
    void unsetGroup_count_mode();

    void setGroupCountMode(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<LicenseFilterSortType> getSortType() const;
    bool sortTypeIsSet() const;
    void unsetSort_type();

    void setSortType(const std::shared_ptr<LicenseFilterSortType>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isSortOrder() const;
    bool sortOrderIsSet() const;
    void unsetSort_order();

    void setSortOrder(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<int32_t>& getLicenseTagFilter();
    bool licenseTagFilterIsSet() const;
    void unsetLicense_tag_filter();

    void setLicenseTagFilter(std::vector<int32_t> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<int32_t>& getTokenTagFilter();
    bool tokenTagFilterIsSet() const;
    void unsetToken_tag_filter();

    void setTokenTagFilter(std::vector<int32_t> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<int32_t>& getCustomerTagFilter();
    bool customerTagFilterIsSet() const;
    void unsetCustomer_tag_filter();

    void setCustomerTagFilter(std::vector<int32_t> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnalyticalFieldFilterDto> getAnalyticalFieldFilter() const;
    bool analyticalFieldFilterIsSet() const;
    void unsetAnalytical_field_filter();

    void setAnalyticalFieldFilter(const std::shared_ptr<AnalyticalFieldFilterDto>& value);


protected:
    int32_t m_Page_size;
    bool m_Page_sizeIsSet;
    int32_t m_Page;
    bool m_PageIsSet;
    bool m_Is_active;
    bool m_Is_activeIsSet;
    utility::string_t m_Key_search;
    bool m_Key_searchIsSet;
    utility::string_t m_Product_filter;
    bool m_Product_filterIsSet;
    utility::string_t m_Customer_filter;
    bool m_Customer_filterIsSet;
    std::vector<utility::string_t> m_Customer_number_filter;
    bool m_Customer_number_filterIsSet;
    std::vector<utility::string_t> m_Customer_type_filter;
    bool m_Customer_type_filterIsSet;
    std::vector<utility::string_t> m_Reseller_type_filter;
    bool m_Reseller_type_filterIsSet;
    std::vector<utility::string_t> m_Template_filter;
    bool m_Template_filterIsSet;
    std::vector<utility::string_t> m_License_type_filter;
    bool m_License_type_filterIsSet;
    std::vector<utility::string_t> m_Operating_system_filter;
    bool m_Operating_system_filterIsSet;
    std::vector<utility::string_t> m_Software_version_filter;
    bool m_Software_version_filterIsSet;
    bool m_Is_software_version_valid;
    bool m_Is_software_version_validIsSet;
    std::vector<utility::string_t> m_Feature_filter;
    bool m_Feature_filterIsSet;
    bool m_Is_feature_active;
    bool m_Is_feature_activeIsSet;
    utility::datetime m_Date_filter;
    bool m_Date_filterIsSet;
    utility::string_t m_Date_filter_mode;
    bool m_Date_filter_modeIsSet;
    bool m_Is_normal_token;
    bool m_Is_normal_tokenIsSet;
    bool m_Is_goodwill_token;
    bool m_Is_goodwill_tokenIsSet;
    bool m_Is_group_valid;
    bool m_Is_group_validIsSet;
    bool m_Is_assigned_token;
    bool m_Is_assigned_tokenIsSet;
    int32_t m_Group_count_filter;
    bool m_Group_count_filterIsSet;
    utility::string_t m_Group_count_mode;
    bool m_Group_count_modeIsSet;
    std::shared_ptr<LicenseFilterSortType> m_Sort_type;
    bool m_Sort_typeIsSet;
    bool m_Sort_order;
    bool m_Sort_orderIsSet;
    std::vector<int32_t> m_License_tag_filter;
    bool m_License_tag_filterIsSet;
    std::vector<int32_t> m_Token_tag_filter;
    bool m_Token_tag_filterIsSet;
    std::vector<int32_t> m_Customer_tag_filter;
    bool m_Customer_tag_filterIsSet;
    std::shared_ptr<AnalyticalFieldFilterDto> m_Analytical_field_filter;
    bool m_Analytical_field_filterIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_LicenseFilterDto_H_ */
