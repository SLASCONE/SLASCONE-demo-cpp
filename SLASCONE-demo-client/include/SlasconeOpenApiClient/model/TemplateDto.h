/**
 * SLASCONE API
 * Please visit our official [Documentation](https://support.slascone.com/hc/en-us/sections/360004685737-API) and/or our [GitHub repository](https://github.com/slascone/) and/or our [NuGet package](https://www.nuget.org/packages/Slascone.Client/). Always use Version 2 of this API (Version 1.3 is deprecated).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TemplateDto.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_TemplateDto_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_TemplateDto_H_


#include "SlasconeOpenApiClient/ModelBase.h"

#include "SlasconeOpenApiClient/model/HeartBeatMode.h"
#include "SlasconeOpenApiClient/model/TokenUiMode.h"
#include "SlasconeOpenApiClient/model/TemplateFeatureDto.h"
#include <vector>
#include "SlasconeOpenApiClient/model/TemplateVariableDto.h"
#include "SlasconeOpenApiClient/model/ExpirationMode.h"
#include "SlasconeOpenApiClient/model/LicenseTypeDto.h"
#include "SlasconeOpenApiClient/model/ClientType.h"
#include <cpprest/details/basic_types.h>
#include "SlasconeOpenApiClient/model/TemplateLimitationDto.h"
#include "SlasconeOpenApiClient/model/ActivationUponLicenseCreation.h"
#include "SlasconeOpenApiClient/model/SoftwareReleaseLimitationDto.h"
#include "SlasconeOpenApiClient/model/ProvisioningMode.h"
#include "SlasconeOpenApiClient/model/TemplateConstrainedVariableDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class LicenseTypeDto;
class TemplateFeatureDto;
class TemplateLimitationDto;
class TemplateVariableDto;
class TemplateConstrainedVariableDto;
class SoftwareReleaseLimitationDto;


/// <summary>
/// 
/// </summary>
class  TemplateDto
    : public ModelBase
{
public:
    TemplateDto();
    virtual ~TemplateDto();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// TemplateDto members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getProductId() const;
    bool productIdIsSet() const;
    void unsetProduct_id();

    void setProductId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getProductName() const;
    bool productNameIsSet() const;
    void unsetProduct_name();

    void setProductName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getShortDescription() const;
    bool shortDescriptionIsSet() const;
    void unsetShort_description();

    void setShortDescription(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsActive() const;
    bool isActiveIsSet() const;
    void unsetIs_active();

    void setIsActive(bool value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTokenLimit() const;
    bool tokenLimitIsSet() const;
    void unsetToken_limit();

    void setTokenLimit(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getGoodwillTokenLimit() const;
    bool goodwillTokenLimitIsSet() const;
    void unsetGoodwill_token_limit();

    void setGoodwillTokenLimit(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getFloatingTokenLimit() const;
    bool floatingTokenLimitIsSet() const;
    void unsetFloating_token_limit();

    void setFloatingTokenLimit(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    bool isEnforceFloatingLimit() const;
    bool enforceFloatingLimitIsSet() const;
    void unsetEnforce_floating_limit();

    void setEnforceFloatingLimit(bool value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getUserLimit() const;
    bool userLimitIsSet() const;
    void unsetUser_limit();

    void setUserLimit(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLicenseTypeId() const;
    bool licenseTypeIdIsSet() const;
    void unsetLicense_type_id();

    void setLicenseTypeId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<LicenseTypeDto> getLicenseType() const;
    bool licenseTypeIsSet() const;
    void unsetLicense_type();

    void setLicenseType(const std::shared_ptr<LicenseTypeDto>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsSoftwareReleaseLimitationAdjustable() const;
    bool isSoftwareReleaseLimitationAdjustableIsSet() const;
    void unsetIs_software_release_limitation_adjustable();

    void setIsSoftwareReleaseLimitationAdjustable(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSoftwareReleaseLimitationId() const;
    bool softwareReleaseLimitationIdIsSet() const;
    void unsetSoftware_release_limitation_id();

    void setSoftwareReleaseLimitationId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isAllowsInvalidSoftwareRelease() const;
    bool allowsInvalidSoftwareReleaseIsSet() const;
    void unsetAllows_invalid_software_release();

    void setAllowsInvalidSoftwareRelease(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsExpirationModeAdjustable() const;
    bool isExpirationModeAdjustableIsSet() const;
    void unsetIs_expiration_mode_adjustable();

    void setIsExpirationModeAdjustable(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ExpirationMode> getExpirationMode() const;
    bool expirationModeIsSet() const;
    void unsetExpiration_mode();

    void setExpirationMode(const std::shared_ptr<ExpirationMode>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getExpirationDateUtc() const;
    bool expirationDateUtcIsSet() const;
    void unsetExpiration_date_utc();

    void setExpirationDateUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getValidDaysCount() const;
    bool validDaysCountIsSet() const;
    void unsetValid_days_count();

    void setValidDaysCount(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTrialDaysCount() const;
    bool trialDaysCountIsSet() const;
    void unsetTrial_days_count();

    void setTrialDaysCount(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<HeartBeatMode> getHeartbeatMode() const;
    bool heartbeatModeIsSet() const;
    void unsetHeartbeat_mode();

    void setHeartbeatMode(const std::shared_ptr<HeartBeatMode>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getHeartbeatPeriod() const;
    bool heartbeatPeriodIsSet() const;
    void unsetHeartbeat_period();

    void setHeartbeatPeriod(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getFreeRide() const;
    bool freeRideIsSet() const;
    void unsetFree_ride();

    void setFreeRide(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ClientType> getClientType() const;
    bool clientTypeIsSet() const;
    void unsetClient_type();

    void setClientType(const std::shared_ptr<ClientType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ActivationUponLicenseCreation> getActivationUponLicenseCreation() const;
    bool activationUponLicenseCreationIsSet() const;
    void unsetActivation_upon_license_creation();

    void setActivationUponLicenseCreation(const std::shared_ptr<ActivationUponLicenseCreation>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TokenUiMode> getTokenUiMode() const;
    bool tokenUiModeIsSet() const;
    void unsetToken_ui_mode();

    void setTokenUiMode(const std::shared_ptr<TokenUiMode>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<TemplateFeatureDto>>& getFeatures();
    bool featuresIsSet() const;
    void unsetFeatures();

    void setFeatures(const std::vector<std::shared_ptr<TemplateFeatureDto>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<TemplateLimitationDto>>& getLimitations();
    bool limitationsIsSet() const;
    void unsetLimitations();

    void setLimitations(const std::vector<std::shared_ptr<TemplateLimitationDto>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<TemplateVariableDto>>& getVariables();
    bool variablesIsSet() const;
    void unsetVariables();

    void setVariables(const std::vector<std::shared_ptr<TemplateVariableDto>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<TemplateConstrainedVariableDto>>& getConstrainedVariables();
    bool constrainedVariablesIsSet() const;
    void unsetConstrained_variables();

    void setConstrainedVariables(const std::vector<std::shared_ptr<TemplateConstrainedVariableDto>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ProvisioningMode> getProvisioningMode() const;
    bool provisioningModeIsSet() const;
    void unsetProvisioning_mode();

    void setProvisioningMode(const std::shared_ptr<ProvisioningMode>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getSessionPeriod() const;
    bool sessionPeriodIsSet() const;
    void unsetSession_period();

    void setSessionPeriod(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getMaxFloatingSessionsWithSameClientId() const;
    bool maxFloatingSessionsWithSameClientIdIsSet() const;
    void unsetMax_floating_sessions_with_same_client_id();

    void setMaxFloatingSessionsWithSameClientId(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsTemporary() const;
    bool isTemporaryIsSet() const;
    void unsetIs_temporary();

    void setIsTemporary(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isHasStrictHeartbeats() const;
    bool hasStrictHeartbeatsIsSet() const;
    void unsetHas_strict_heartbeats();

    void setHasStrictHeartbeats(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getCreatedDateUtc() const;
    bool createdDateUtcIsSet() const;
    void unsetCreated_date_utc();

    void setCreatedDateUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getModifiedDateUtc() const;
    bool modifiedDateUtcIsSet() const;
    void unsetModified_date_utc();

    void setModifiedDateUtc(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLastModifiedBy() const;
    bool lastModifiedByIsSet() const;
    void unsetLast_modified_by();

    void setLastModifiedBy(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SoftwareReleaseLimitationDto> getSoftwareReleaseLimitation() const;
    bool softwareReleaseLimitationIsSet() const;
    void unsetSoftware_release_limitation();

    void setSoftwareReleaseLimitation(const std::shared_ptr<SoftwareReleaseLimitationDto>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isSupportsLicenseUserGroups() const;
    bool supportsLicenseUserGroupsIsSet() const;
    void unsetSupports_license_user_groups();

    void setSupportsLicenseUserGroups(bool value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getHeartbeatSamplingRate() const;
    bool heartbeatSamplingRateIsSet() const;
    void unsetHeartbeat_sampling_rate();

    void setHeartbeatSamplingRate(int32_t value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Product_id;
    bool m_Product_idIsSet;
    utility::string_t m_Product_name;
    bool m_Product_nameIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    utility::string_t m_Short_description;
    bool m_Short_descriptionIsSet;
    bool m_Is_active;
    bool m_Is_activeIsSet;
    int32_t m_Token_limit;
    bool m_Token_limitIsSet;
    int32_t m_Goodwill_token_limit;
    bool m_Goodwill_token_limitIsSet;
    int32_t m_Floating_token_limit;
    bool m_Floating_token_limitIsSet;
    bool m_Enforce_floating_limit;
    bool m_Enforce_floating_limitIsSet;
    int32_t m_User_limit;
    bool m_User_limitIsSet;
    utility::string_t m_License_type_id;
    bool m_License_type_idIsSet;
    std::shared_ptr<LicenseTypeDto> m_License_type;
    bool m_License_typeIsSet;
    bool m_Is_software_release_limitation_adjustable;
    bool m_Is_software_release_limitation_adjustableIsSet;
    utility::string_t m_Software_release_limitation_id;
    bool m_Software_release_limitation_idIsSet;
    bool m_Allows_invalid_software_release;
    bool m_Allows_invalid_software_releaseIsSet;
    bool m_Is_expiration_mode_adjustable;
    bool m_Is_expiration_mode_adjustableIsSet;
    std::shared_ptr<ExpirationMode> m_Expiration_mode;
    bool m_Expiration_modeIsSet;
    utility::datetime m_Expiration_date_utc;
    bool m_Expiration_date_utcIsSet;
    int32_t m_Valid_days_count;
    bool m_Valid_days_countIsSet;
    int32_t m_Trial_days_count;
    bool m_Trial_days_countIsSet;
    std::shared_ptr<HeartBeatMode> m_Heartbeat_mode;
    bool m_Heartbeat_modeIsSet;
    int32_t m_Heartbeat_period;
    bool m_Heartbeat_periodIsSet;
    int32_t m_Free_ride;
    bool m_Free_rideIsSet;
    std::shared_ptr<ClientType> m_Client_type;
    bool m_Client_typeIsSet;
    std::shared_ptr<ActivationUponLicenseCreation> m_Activation_upon_license_creation;
    bool m_Activation_upon_license_creationIsSet;
    std::shared_ptr<TokenUiMode> m_Token_ui_mode;
    bool m_Token_ui_modeIsSet;
    std::vector<std::shared_ptr<TemplateFeatureDto>> m_Features;
    bool m_FeaturesIsSet;
    std::vector<std::shared_ptr<TemplateLimitationDto>> m_Limitations;
    bool m_LimitationsIsSet;
    std::vector<std::shared_ptr<TemplateVariableDto>> m_Variables;
    bool m_VariablesIsSet;
    std::vector<std::shared_ptr<TemplateConstrainedVariableDto>> m_Constrained_variables;
    bool m_Constrained_variablesIsSet;
    std::shared_ptr<ProvisioningMode> m_Provisioning_mode;
    bool m_Provisioning_modeIsSet;
    int32_t m_Session_period;
    bool m_Session_periodIsSet;
    int32_t m_Max_floating_sessions_with_same_client_id;
    bool m_Max_floating_sessions_with_same_client_idIsSet;
    bool m_Is_temporary;
    bool m_Is_temporaryIsSet;
    bool m_Has_strict_heartbeats;
    bool m_Has_strict_heartbeatsIsSet;
    utility::datetime m_Created_date_utc;
    bool m_Created_date_utcIsSet;
    utility::datetime m_Modified_date_utc;
    bool m_Modified_date_utcIsSet;
    utility::string_t m_Last_modified_by;
    bool m_Last_modified_byIsSet;
    std::shared_ptr<SoftwareReleaseLimitationDto> m_Software_release_limitation;
    bool m_Software_release_limitationIsSet;
    bool m_Supports_license_user_groups;
    bool m_Supports_license_user_groupsIsSet;
    int32_t m_Heartbeat_sampling_rate;
    bool m_Heartbeat_sampling_rateIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_TemplateDto_H_ */
